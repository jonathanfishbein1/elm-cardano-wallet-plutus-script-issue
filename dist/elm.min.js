(function(scope){

let uplc_wasm_module;
let evalScriptsCostsKernel = (elm_args) => {
  try {
    if (!uplc_wasm_module) {
      if (typeof window !== "undefined" && window.document) {
        // Browser environment
        if (!("uplc_wasm" in window)) {
          throw new Error(
            "Missing uplc_wasm module in window. Make sure to dynamically import the Elm app after window.uplc_wasm was populated.",
          );
        }
        uplc_wasm_module = window.uplc_wasm;
      } else if (
        typeof process !== "undefined" &&
        process.versions &&
        process.versions.node
      ) {
        // Node.js environment
        uplc_wasm_module = require("./pkg-uplc-wasm/pkg-node/uplc_wasm.js");
      } else {
        throw new Error("Unknown environment");
      }
    }
    const args = elm_args.a; // elm uses a specific structure for its data
    const fromHexString = (hexString) =>
      Uint8Array.from(
        hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)),
      );
    let redeemers = uplc_wasm_module.eval_phase_two_raw(
      fromHexString(args.tx_bytes), // tx_bytes: &[u8],
      args.utxos_refs_bytes.map(fromHexString), // utxos_refs_bytes: Vec<js_sys::Uint8Array>,
      args.utxos_outputs_bytes.map(fromHexString), // utxos_outputs_bytes: Vec<js_sys::Uint8Array>,
      fromHexString(args.cost_mdls_bytes), // cost_mdls_bytes: &[u8],
      BigInt(args.cpu_budget), // cpu_budget: u64,
      BigInt(args.mem_budget), // mem_budget: u64,
      BigInt(args.slot_config_zero_time), // slot_config_zero_time: u64,
      BigInt(args.slot_config_zero_slot), // slot_config_zero_slot: u64,
      args.slot_config_slot_length, // slot_config_slot_length: u32,
    );
    const uint8ArrayToHexString = (uint8Array) => {
      return Array.from(uint8Array)
        .map((i) => i.toString(16).padStart(2, "0"))
        .join("");
    };
    const redeemersAsHex = redeemers.map(uint8ArrayToHexString);
    return $elm$core$Result$Ok(_List_fromArray(redeemersAsHex));
  } catch (error) {
    return $elm$core$Result$Err(
      "Script evaluation failed with error: " + error,
    );
  }
};

let applyParamsToScriptKernel = (elm_args) => {
  try {
    if (!uplc_wasm_module) {
      if (typeof window !== "undefined" && window.document) {
        // Browser environment
        if (!("uplc_wasm" in window)) {
          throw new Error(
            "Missing uplc_wasm module in window. Make sure to dynamically import the Elm app after window.uplc_wasm was populated.",
          );
        }
        uplc_wasm_module = window.uplc_wasm;
      } else if (
        typeof process !== "undefined" &&
        process.versions &&
        process.versions.node
      ) {
        // Node.js environment
        uplc_wasm_module = require("./pkg-uplc-wasm/pkg-node/uplc_wasm.js");
      } else {
        throw new Error("Unknown environment");
      }
    }
    const args = elm_args.a; // elm uses a specific structure for its data
    const fromHexString = (hexString) =>
      Uint8Array.from(
        hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)),
      );
    let paramsBytes = fromHexString(args.params); // paramsBytes: &[u8]
    let plutusScriptBytes = fromHexString(args.script); // plutusScriptBytes: &[u8]
    let appliedScript = uplc_wasm_module.apply_params_to_script(
      paramsBytes,
      plutusScriptBytes
    );
    const uint8ArrayToHexString = (uint8Array) => {
      return Array.from(uint8Array)
        .map((i) => i.toString(16).padStart(2, "0"))
        .join("");
    };
    return $elm$core$Result$Ok(uint8ArrayToHexString(appliedScript));
  } catch (error) {
    return $elm$core$Result$Err(
      "Parameter application failed with error: " + error,
    );
  }
};

'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}var $author$project$Main$WalletMsg = function (a) {
	return {$: 'WalletMsg', a: a};
};
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Main$fromWallet = _Platform_incomingPort('fromWallet', $elm$json$Json$Decode$value);
var $author$project$Main$DiscoverWallets = {$: 'DiscoverWallets'};
var $author$project$Main$Startup = {$: 'Startup'};
var $author$project$Main$init = function (_v0) {
	return _Utils_Tuple2($author$project$Main$Startup, $author$project$Main$DiscoverWallets);
};
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $author$project$Cardano$Data$Bytes = function (a) {
	return {$: 'Bytes', a: a};
};
var $author$project$Main$GotProtocolParameters = function (a) {
	return {$: 'GotProtocolParameters', a: a};
};
var $author$project$Main$GotReferenceUtxos = function (a) {
	return {$: 'GotReferenceUtxos', a: a};
};
var $author$project$Cardano$Data$List = function (a) {
	return {$: 'List', a: a};
};
var $author$project$Main$ReceiveCloseMetadata = function (a) {
	return {$: 'ReceiveCloseMetadata', a: a};
};
var $author$project$Cardano$Address$Testnet = {$: 'Testnet'};
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $author$project$Cardano$Witness$ByReference = function (a) {
	return {$: 'ByReference', a: a};
};
var $author$project$Cardano$Metadatum$Bytes = function (a) {
	return {$: 'Bytes', a: a};
};
var $author$project$Cardano$Data$Constr = F2(
	function (a, b) {
		return {$: 'Constr', a: a, b: b};
	});
var $author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano = function (a) {
	return {$: 'FailurePleaseReportToElmCardano', a: a};
};
var $author$project$Cardano$TxIntent$FromPlutusScript = function (a) {
	return {$: 'FromPlutusScript', a: a};
};
var $author$project$Cardano$Script$PlutusV3 = {$: 'PlutusV3'};
var $author$project$Cardano$TxIntent$SendTo = F2(
	function (a, b) {
		return {$: 'SendTo', a: a, b: b};
	});
var $author$project$Cardano$TxIntent$Spend = function (a) {
	return {$: 'Spend', a: a};
};
var $bburdette$toop$Toop$T4 = F4(
	function (a, b, c, d) {
		return {$: 'T4', a: a, b: b, c: c, d: d};
	});
var $author$project$Cardano$TxIntent$TxMetadata = function (a) {
	return {$: 'TxMetadata', a: a};
};
var $elm_toulouse$cbor$Cbor$Encode$Encoder = function (a) {
	return {$: 'Encoder', a: a};
};
var $elm$bytes$Bytes$Encode$Bytes = function (a) {
	return {$: 'Bytes', a: a};
};
var $elm$bytes$Bytes$Encode$bytes = $elm$bytes$Bytes$Encode$Bytes;
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $elm$bytes$Bytes$BE = {$: 'BE'};
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$bytes$Bytes$Encode$U8 = function (a) {
	return {$: 'U8', a: a};
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $elm_toulouse$cbor$Cbor$Encode$majorType = F2(
	function (major, payload) {
		return $elm$bytes$Bytes$Encode$unsignedInt8(payload | (major << 5));
	});
var $elm$bytes$Bytes$Encode$U16 = F2(
	function (a, b) {
		return {$: 'U16', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt16 = $elm$bytes$Bytes$Encode$U16;
var $elm$bytes$Bytes$Encode$U32 = F2(
	function (a, b) {
		return {$: 'U32', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $elm_toulouse$cbor$Cbor$Encode$unsigned = F2(
	function (major, n) {
		return (n < 24) ? A2($elm_toulouse$cbor$Cbor$Encode$majorType, major, n) : ((n < 256) ? $elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Encode$majorType, major, 24),
					$elm$bytes$Bytes$Encode$unsignedInt8(n)
				])) : ((n < 65536) ? $elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Encode$majorType, major, 25),
					A2($elm$bytes$Bytes$Encode$unsignedInt16, $elm$bytes$Bytes$BE, n)
				])) : ((n < 4294967296) ? $elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Encode$majorType, major, 26),
					A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, n)
				])) : $elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Encode$majorType, major, 27),
					A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, (n / 4294967296) | 0),
					A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, n)
				])))));
	});
var $elm$bytes$Bytes$width = _Bytes_width;
var $elm_toulouse$cbor$Cbor$Encode$bytes = function (bs) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		$elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2(
					$elm_toulouse$cbor$Cbor$Encode$unsigned,
					2,
					$elm$bytes$Bytes$width(bs)),
					$elm$bytes$Bytes$Encode$bytes(bs)
				])));
};
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm_toulouse$cbor$Cbor$Encode$encode = function (_v0) {
	var e = _v0.a;
	return $elm$bytes$Bytes$Encode$encode(e);
};
var $author$project$Bytes$Comparable$Bytes = function (a) {
	return {$: 'Bytes', a: a};
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $jxxcarlson$hex$Hex$Convert$listStep = F2(
	function (decoder, _v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed(
			$elm$bytes$Bytes$Decode$Done(xs)) : A2(
			$elm$bytes$Bytes$Decode$map,
			function (x) {
				return $elm$bytes$Bytes$Decode$Loop(
					_Utils_Tuple2(
						n - 1,
						A2($elm$core$List$cons, x, xs)));
			},
			decoder);
	});
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $jxxcarlson$hex$Hex$Convert$decodeBytes = F2(
	function (len, decoder) {
		return A2(
			$elm$bytes$Bytes$Decode$loop,
			_Utils_Tuple2(len, _List_Nil),
			$jxxcarlson$hex$Hex$Convert$listStep(decoder));
	});
var $elm$core$Basics$modBy = _Basics_modBy;
var $jxxcarlson$hex$Hex$Convert$stringOfHexDigit = function (n) {
	if (n < 10) {
		return $elm$core$String$fromInt(n);
	} else {
		switch (n) {
			case 10:
				return 'A';
			case 11:
				return 'B';
			case 12:
				return 'C';
			case 13:
				return 'D';
			case 14:
				return 'E';
			case 15:
				return 'F';
			default:
				return 'X';
		}
	}
};
var $jxxcarlson$hex$Hex$Convert$hexStringOfInt = function (b) {
	var low = A2($elm$core$Basics$modBy, 16, b);
	var hi = (b / 16) | 0;
	return _Utils_ap(
		$jxxcarlson$hex$Hex$Convert$stringOfHexDigit(hi),
		$jxxcarlson$hex$Hex$Convert$stringOfHexDigit(low));
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $jxxcarlson$hex$Hex$Convert$toString = function (bytes_) {
	return A2(
		$elm$core$Maybe$withDefault,
		'Error',
		A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$reverse,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$map($jxxcarlson$hex$Hex$Convert$hexStringOfInt),
					$elm$core$String$join(''))),
			A2(
				$elm$bytes$Bytes$Decode$decode,
				A2(
					$jxxcarlson$hex$Hex$Convert$decodeBytes,
					$elm$bytes$Bytes$width(bytes_),
					$elm$bytes$Bytes$Decode$unsignedInt8),
				bytes_)));
};
var $author$project$Bytes$Comparable$fromBytes = function (bs) {
	return $author$project$Bytes$Comparable$Bytes(
		$elm$core$String$toLower(
			$jxxcarlson$hex$Hex$Convert$toString(bs)));
};
var $author$project$Bytes$Comparable$absurd = $elm$bytes$Bytes$Encode$encode(
	$elm$bytes$Bytes$Encode$sequence(_List_Nil));
var $jxxcarlson$hex$Hex$Convert$intOfHexDigit = function (str) {
	switch (str.valueOf()) {
		case '0':
			return $elm$core$Maybe$Just(0);
		case '1':
			return $elm$core$Maybe$Just(1);
		case '2':
			return $elm$core$Maybe$Just(2);
		case '3':
			return $elm$core$Maybe$Just(3);
		case '4':
			return $elm$core$Maybe$Just(4);
		case '5':
			return $elm$core$Maybe$Just(5);
		case '6':
			return $elm$core$Maybe$Just(6);
		case '7':
			return $elm$core$Maybe$Just(7);
		case '8':
			return $elm$core$Maybe$Just(8);
		case '9':
			return $elm$core$Maybe$Just(9);
		case 'A':
			return $elm$core$Maybe$Just(10);
		case 'a':
			return $elm$core$Maybe$Just(10);
		case 'B':
			return $elm$core$Maybe$Just(11);
		case 'b':
			return $elm$core$Maybe$Just(11);
		case 'C':
			return $elm$core$Maybe$Just(12);
		case 'c':
			return $elm$core$Maybe$Just(12);
		case 'D':
			return $elm$core$Maybe$Just(13);
		case 'd':
			return $elm$core$Maybe$Just(13);
		case 'E':
			return $elm$core$Maybe$Just(14);
		case 'e':
			return $elm$core$Maybe$Just(14);
		case 'F':
			return $elm$core$Maybe$Just(15);
		case 'f':
			return $elm$core$Maybe$Just(15);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $jxxcarlson$hex$Hex$Convert$intOfHexPair = F2(
	function (highChar, lowChar) {
		var lo = $jxxcarlson$hex$Hex$Convert$intOfHexDigit(lowChar);
		var hi_ = $jxxcarlson$hex$Hex$Convert$intOfHexDigit(highChar);
		var hi = A2(
			$elm$core$Maybe$map,
			function (x) {
				return 16 * x;
			},
			hi_);
		return A3($elm$core$Maybe$map2, $elm$core$Basics$add, hi, lo);
	});
var $jxxcarlson$hex$Hex$Convert$byteListOfStringEncoder = F2(
	function (list, charList) {
		byteListOfStringEncoder:
		while (true) {
			if (charList.b) {
				if (charList.b.b) {
					var high = charList.a;
					var _v1 = charList.b;
					var low = _v1.a;
					var rest = _v1.b;
					var _v2 = A2($jxxcarlson$hex$Hex$Convert$intOfHexPair, high, low);
					if (_v2.$ === 'Just') {
						var value = _v2.a;
						var $temp$list = A2(
							$elm$core$List$cons,
							$elm$bytes$Bytes$Encode$unsignedInt8(value),
							list),
							$temp$charList = rest;
						list = $temp$list;
						charList = $temp$charList;
						continue byteListOfStringEncoder;
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(list));
			}
		}
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $jxxcarlson$hex$Hex$Convert$toBytesEncoder = function (str) {
	return A2(
		$elm$core$Maybe$map,
		$elm$bytes$Bytes$Encode$sequence,
		A2(
			$jxxcarlson$hex$Hex$Convert$byteListOfStringEncoder,
			_List_Nil,
			$elm$core$String$toList(str)));
};
var $jxxcarlson$hex$Hex$Convert$toBytes = function (str) {
	return A2(
		$elm$core$Maybe$map,
		$elm$bytes$Bytes$Encode$encode,
		$jxxcarlson$hex$Hex$Convert$toBytesEncoder(str));
};
var $author$project$Bytes$Comparable$toBytes = function (_v0) {
	var str = _v0.a;
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$Bytes$Comparable$absurd,
		$jxxcarlson$hex$Hex$Convert$toBytes(str));
};
var $author$project$Cardano$Script$cborWrappedBytes = function (_v0) {
	var plutusScript = _v0.a;
	return $author$project$Bytes$Comparable$fromBytes(
		$elm_toulouse$cbor$Cbor$Encode$encode(
			$elm_toulouse$cbor$Cbor$Encode$bytes(
				$author$project$Bytes$Comparable$toBytes(plutusScript.flatBytes))));
};
var $elm_toulouse$cbor$Cbor$Encode$Step = function (a) {
	return {$: 'Step', a: a};
};
var $elm_toulouse$cbor$Cbor$Encode$elem = F3(
	function (encodeElem, extract, _v0) {
		var _this = _v0.a._this;
		var encodeKey = _v0.a.encodeKey;
		var steps = _v0.a.steps;
		return $elm_toulouse$cbor$Cbor$Encode$Step(
			{
				encodeKey: encodeKey,
				steps: A2(
					$elm$core$List$cons,
					encodeElem(
						extract(_this)),
					steps),
				_this: _this
			});
	});
var $elm_toulouse$cbor$Cbor$Encode$elems = $elm$core$Basics$identity;
var $elm_toulouse$cbor$Cbor$Tag$Cbor = {$: 'Cbor'};
var $elm_toulouse$cbor$Cbor$CborInt64 = function (a) {
	return {$: 'CborInt64', a: a};
};
var $elm_toulouse$cbor$Cbor$Tag$PositiveBigNum = {$: 'PositiveBigNum'};
var $elm_toulouse$cbor$Cbor$Encode$sequence = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$map(
		function (_v0) {
			var e = _v0.a;
			return e;
		}),
	A2($elm$core$Basics$composeR, $elm$bytes$Bytes$Encode$sequence, $elm_toulouse$cbor$Cbor$Encode$Encoder));
var $elm_toulouse$cbor$Cbor$Encode$keyValue = F3(
	function (encodeA, encodeB, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			_List_fromArray(
				[
					encodeA(a),
					encodeB(b)
				]));
	});
var $elm_toulouse$cbor$Cbor$Encode$associativeList = F3(
	function (k, v, xs) {
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			A2(
				$elm$core$List$cons,
				$elm_toulouse$cbor$Cbor$Encode$Encoder(
					A2(
						$elm_toulouse$cbor$Cbor$Encode$unsigned,
						5,
						$elm$core$List$length(xs))),
				A2(
					$elm$core$List$map,
					A2($elm_toulouse$cbor$Cbor$Encode$keyValue, k, v),
					xs)));
	});
var $elm_toulouse$cbor$Cbor$Encode$bool = function (n) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		$elm$bytes$Bytes$Encode$unsignedInt8(
			n ? 245 : 244));
};
var $elm$bytes$Bytes$Encode$F64 = F2(
	function (a, b) {
		return {$: 'F64', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$float64 = $elm$bytes$Bytes$Encode$F64;
var $elm_toulouse$cbor$Cbor$Encode$float64 = function (n) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		$elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Encode$majorType, 7, 27),
					A2($elm$bytes$Bytes$Encode$float64, $elm$bytes$Bytes$BE, n)
				])));
};
var $elm_toulouse$cbor$Cbor$Encode$float = $elm_toulouse$cbor$Cbor$Encode$float64;
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm_toulouse$cbor$Cbor$Encode$int = function (n) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		(_Utils_cmp(n, -9007199254740992) < 1) ? A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 1, 9007199254740991) : ((n < 0) ? A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 1, (-n) - 1) : A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 0, n)));
};
var $elm_toulouse$cbor$Cbor$Encode$list = F2(
	function (e, xs) {
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			A2(
				$elm$core$List$cons,
				$elm_toulouse$cbor$Cbor$Encode$Encoder(
					A2(
						$elm_toulouse$cbor$Cbor$Encode$unsigned,
						4,
						$elm$core$List$length(xs))),
				A2($elm$core$List$map, e, xs)));
	});
var $elm_toulouse$cbor$Cbor$Encode$null = $elm_toulouse$cbor$Cbor$Encode$Encoder(
	$elm$bytes$Bytes$Encode$unsignedInt8(246));
var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $elm_toulouse$cbor$Cbor$Encode$string = function (str) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		$elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2(
					$elm_toulouse$cbor$Cbor$Encode$unsigned,
					3,
					$elm$bytes$Bytes$Encode$getStringWidth(str)),
					$elm$bytes$Bytes$Encode$string(str)
				])));
};
var $elm_toulouse$cbor$Cbor$Encode$tag = function (t) {
	return $elm_toulouse$cbor$Cbor$Encode$Encoder(
		function () {
			switch (t.$) {
				case 'StandardDateTime':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 0);
				case 'EpochDateTime':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 1);
				case 'PositiveBigNum':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 2);
				case 'NegativeBigNum':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 3);
				case 'DecimalFraction':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 4);
				case 'BigFloat':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 5);
				case 'Base64UrlConversion':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 21);
				case 'Base64Conversion':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 22);
				case 'Base16Conversion':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 23);
				case 'Cbor':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 24);
				case 'Uri':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 32);
				case 'Base64Url':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 33);
				case 'Base64':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 34);
				case 'Regex':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 35);
				case 'Mime':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 36);
				case 'IsCbor':
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, 55799);
				default:
					var i = t.a;
					return A2($elm_toulouse$cbor$Cbor$Encode$unsigned, 6, i);
			}
		}());
};
var $elm_toulouse$cbor$Cbor$Encode$undefined = $elm_toulouse$cbor$Cbor$Encode$Encoder(
	$elm$bytes$Bytes$Encode$unsignedInt8(247));
var $elm_toulouse$cbor$Cbor$Encode$any = function (item) {
	switch (item.$) {
		case 'CborInt32':
			var i = item.a;
			return $elm_toulouse$cbor$Cbor$Encode$int(i);
		case 'CborInt64':
			var _v1 = item.a;
			var msb = _v1.a;
			var lsb = _v1.b;
			return $elm_toulouse$cbor$Cbor$Encode$Encoder(
				$elm$bytes$Bytes$Encode$sequence(
					(msb >= 0) ? _List_fromArray(
						[
							A2($elm_toulouse$cbor$Cbor$Encode$majorType, 0, 27),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, msb),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, lsb)
						]) : ((lsb >= 1) ? _List_fromArray(
						[
							A2($elm_toulouse$cbor$Cbor$Encode$majorType, 1, 27),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, -msb),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, lsb - 1)
						]) : ((!lsb) ? _List_fromArray(
						[
							A2($elm_toulouse$cbor$Cbor$Encode$majorType, 1, 27),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, (-msb) - 1),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, 4294967295)
						]) : _List_fromArray(
						[
							A2($elm_toulouse$cbor$Cbor$Encode$majorType, 1, 27),
							A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, -1)
						])))));
		case 'CborBytes':
			var bs = item.a;
			return $elm_toulouse$cbor$Cbor$Encode$bytes(bs);
		case 'CborString':
			var str = item.a;
			return $elm_toulouse$cbor$Cbor$Encode$string(str);
		case 'CborList':
			var xs = item.a;
			return A2($elm_toulouse$cbor$Cbor$Encode$list, $elm_toulouse$cbor$Cbor$Encode$any, xs);
		case 'CborMap':
			var xs = item.a;
			return A3($elm_toulouse$cbor$Cbor$Encode$associativeList, $elm_toulouse$cbor$Cbor$Encode$any, $elm_toulouse$cbor$Cbor$Encode$any, xs);
		case 'CborTag':
			var t = item.a;
			var x = item.b;
			return $elm_toulouse$cbor$Cbor$Encode$sequence(
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$tag(t),
						$elm_toulouse$cbor$Cbor$Encode$any(x)
					]));
		case 'CborBool':
			var b = item.a;
			return $elm_toulouse$cbor$Cbor$Encode$bool(b);
		case 'CborFloat':
			var f = item.a;
			return $elm_toulouse$cbor$Cbor$Encode$float(f);
		case 'CborNull':
			return $elm_toulouse$cbor$Cbor$Encode$null;
		default:
			return $elm_toulouse$cbor$Cbor$Encode$undefined;
	}
};
var $dwayne$elm_natural$Natural$Natural = function (a) {
	return {$: 'Natural', a: a};
};
var $elm$core$Basics$compare = _Utils_compare;
var $dwayne$elm_natural$Natural$compareLEHelper = F4(
	function (a, b, xsLE, ysLE) {
		compareLEHelper:
		while (true) {
			var _v0 = _Utils_Tuple2(xsLE, ysLE);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return A2($elm$core$Basics$compare, a, b);
				} else {
					return $elm$core$Basics$LT;
				}
			} else {
				if (!_v0.b.b) {
					return $elm$core$Basics$GT;
				} else {
					var _v1 = _v0.a;
					var x = _v1.a;
					var xsLERest = _v1.b;
					var _v2 = _v0.b;
					var y = _v2.a;
					var ysLERest = _v2.b;
					if (_Utils_eq(x, y)) {
						var $temp$a = a,
							$temp$b = b,
							$temp$xsLE = xsLERest,
							$temp$ysLE = ysLERest;
						a = $temp$a;
						b = $temp$b;
						xsLE = $temp$xsLE;
						ysLE = $temp$ysLE;
						continue compareLEHelper;
					} else {
						var $temp$a = x,
							$temp$b = y,
							$temp$xsLE = xsLERest,
							$temp$ysLE = ysLERest;
						a = $temp$a;
						b = $temp$b;
						xsLE = $temp$xsLE;
						ysLE = $temp$ysLE;
						continue compareLEHelper;
					}
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$compareLE = F2(
	function (xsLE, ysLE) {
		return A4($dwayne$elm_natural$Natural$compareLEHelper, 0, 0, xsLE, ysLE);
	});
var $dwayne$elm_natural$Natural$numBits = 26;
var $elm$core$Basics$pow = _Basics_pow;
var $dwayne$elm_natural$Natural$base = A2($elm$core$Basics$pow, 2, $dwayne$elm_natural$Natural$numBits);
var $dwayne$elm_natural$Natural$computeD2 = function (digitsBE) {
	if (digitsBE.b && digitsBE.b.b) {
		var d1 = digitsBE.a;
		var _v1 = digitsBE.b;
		var d0 = _v1.a;
		return _Utils_Tuple2(
			(d1 * $dwayne$elm_natural$Natural$base) + d0,
			_List_fromArray(
				[d0, d1]));
	} else {
		return _Utils_Tuple2(0, _List_Nil);
	}
};
var $dwayne$elm_natural$Natural$lengthAndReverseHelper = F3(
	function (list, n, revList) {
		lengthAndReverseHelper:
		while (true) {
			if (!list.b) {
				return _Utils_Tuple2(n, revList);
			} else {
				var x = list.a;
				var restList = list.b;
				var $temp$list = restList,
					$temp$n = n + 1,
					$temp$revList = A2($elm$core$List$cons, x, revList);
				list = $temp$list;
				n = $temp$n;
				revList = $temp$revList;
				continue lengthAndReverseHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$lengthAndReverse = function (list) {
	return A3($dwayne$elm_natural$Natural$lengthAndReverseHelper, list, 0, _List_Nil);
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $dwayne$elm_natural$Natural$baseMask = $dwayne$elm_natural$Natural$base - 1;
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $dwayne$elm_natural$Natural$sdAddPrepend = F2(
	function (digitsBE, digitsLE) {
		sdAddPrepend:
		while (true) {
			if (!digitsBE.b) {
				return digitsLE;
			} else {
				var d = digitsBE.a;
				var digitsBERest = digitsBE.b;
				var $temp$digitsBE = digitsBERest,
					$temp$digitsLE = A2($elm$core$List$cons, d, digitsLE);
				digitsBE = $temp$digitsBE;
				digitsLE = $temp$digitsLE;
				continue sdAddPrepend;
			}
		}
	});
var $dwayne$elm_natural$Natural$sdAddHelper = F3(
	function (xsLE, y, zsBE) {
		sdAddHelper:
		while (true) {
			if (!y) {
				return A2($dwayne$elm_natural$Natural$sdAddPrepend, zsBE, xsLE);
			} else {
				if (!xsLE.b) {
					return $elm$core$List$reverse(
						A2($elm$core$List$cons, y, zsBE));
				} else {
					var x = xsLE.a;
					var restXsLE = xsLE.b;
					var sum = x + y;
					var _v1 = (_Utils_cmp(sum, $dwayne$elm_natural$Natural$base) < 0) ? _Utils_Tuple2(0, sum) : _Utils_Tuple2(1, sum - $dwayne$elm_natural$Natural$base);
					var carry = _v1.a;
					var z = _v1.b;
					var $temp$xsLE = restXsLE,
						$temp$y = carry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					y = $temp$y;
					zsBE = $temp$zsBE;
					continue sdAddHelper;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$sdAdd = F2(
	function (xsLE, y) {
		var _v0 = _Utils_Tuple2(xsLE, y);
		if (!_v0.b) {
			return xsLE;
		} else {
			if (!_v0.a.b) {
				return _List_fromArray(
					[y]);
			} else {
				return A3($dwayne$elm_natural$Natural$sdAddHelper, xsLE, y, _List_Nil);
			}
		}
	});
var $dwayne$elm_natural$Natural$iDivModBy = F2(
	function (divisor, dividend) {
		return _Utils_Tuple2(
			(dividend / divisor) | 0,
			A2($elm$core$Basics$modBy, divisor, dividend));
	});
var $dwayne$elm_natural$Natural$sdMulHelper = F4(
	function (xsLE, y, carry, zsBE) {
		sdMulHelper:
		while (true) {
			if (!xsLE.b) {
				return (!carry) ? zsBE : A2($elm$core$List$cons, carry, zsBE);
			} else {
				var x = xsLE.a;
				var restXsLE = xsLE.b;
				var product = (x * y) + carry;
				var _v1 = A2($dwayne$elm_natural$Natural$iDivModBy, $dwayne$elm_natural$Natural$base, product);
				var newCarry = _v1.a;
				var z = _v1.b;
				var $temp$xsLE = restXsLE,
					$temp$y = y,
					$temp$carry = newCarry,
					$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
				xsLE = $temp$xsLE;
				y = $temp$y;
				carry = $temp$carry;
				zsBE = $temp$zsBE;
				continue sdMulHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$sdMul = F2(
	function (xsLE, y) {
		var _v0 = _Utils_Tuple2(xsLE, y);
		_v0$0:
		while (true) {
			switch (_v0.b) {
				case 0:
					if (!_v0.a.b) {
						break _v0$0;
					} else {
						return _List_Nil;
					}
				case 1:
					if (!_v0.a.b) {
						break _v0$0;
					} else {
						return xsLE;
					}
				default:
					if (!_v0.a.b) {
						break _v0$0;
					} else {
						return $elm$core$List$reverse(
							A4($dwayne$elm_natural$Natural$sdMulHelper, xsLE, y, 0, _List_Nil));
					}
			}
		}
		return _List_Nil;
	});
var $dwayne$elm_natural$Natural$quotientModBy = F2(
	function (divisor, dividend) {
		return _Utils_Tuple2(
			$elm$core$Basics$floor(dividend / divisor),
			A2($elm$core$Basics$modBy, divisor, dividend));
	});
var $dwayne$elm_natural$Natural$removeLeadingZeros = function (digits) {
	removeLeadingZeros:
	while (true) {
		if (!digits.b) {
			return _List_Nil;
		} else {
			var d = digits.a;
			var restDigits = digits.b;
			if (!d) {
				var $temp$digits = restDigits;
				digits = $temp$digits;
				continue removeLeadingZeros;
			} else {
				return digits;
			}
		}
	}
};
var $dwayne$elm_natural$Natural$subHelper = F4(
	function (xsLE, ysLE, carry, zsBE) {
		subHelper:
		while (true) {
			var _v0 = _Utils_Tuple2(xsLE, ysLE);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return (!carry) ? $elm$core$List$reverse(
						$dwayne$elm_natural$Natural$removeLeadingZeros(zsBE)) : _List_Nil;
				} else {
					var _v3 = _v0.b;
					var y = _v3.a;
					var restYsLE = _v3.b;
					var _v4 = A2($dwayne$elm_natural$Natural$quotientModBy, $dwayne$elm_natural$Natural$base, carry - y);
					var newCarry = _v4.a;
					var z = _v4.b;
					var $temp$xsLE = _List_Nil,
						$temp$ysLE = restYsLE,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue subHelper;
				}
			} else {
				if (!_v0.b.b) {
					var _v1 = _v0.a;
					var x = _v1.a;
					var restXsLE = _v1.b;
					var _v2 = A2($dwayne$elm_natural$Natural$quotientModBy, $dwayne$elm_natural$Natural$base, x + carry);
					var newCarry = _v2.a;
					var z = _v2.b;
					var $temp$xsLE = restXsLE,
						$temp$ysLE = _List_Nil,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue subHelper;
				} else {
					var _v5 = _v0.a;
					var x = _v5.a;
					var restXsLE = _v5.b;
					var _v6 = _v0.b;
					var y = _v6.a;
					var restYsLE = _v6.b;
					var _v7 = A2($dwayne$elm_natural$Natural$quotientModBy, $dwayne$elm_natural$Natural$base, (x - y) + carry);
					var newCarry = _v7.a;
					var z = _v7.b;
					var $temp$xsLE = restXsLE,
						$temp$ysLE = restYsLE,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue subHelper;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$slowDivModBy = F2(
	function (ysLE, xsLE) {
		var _v0 = A2($dwayne$elm_natural$Natural$compareLE, xsLE, ysLE);
		switch (_v0.$) {
			case 'LT':
				return _Utils_Tuple2(_List_Nil, xsLE);
			case 'EQ':
				return _Utils_Tuple2(
					_List_fromArray(
						[1]),
					_List_Nil);
			default:
				var twoYLE = A2($dwayne$elm_natural$Natural$sdMul, ysLE, 2);
				var _v1 = A2($dwayne$elm_natural$Natural$slowDivModBy, twoYLE, xsLE);
				var qsLE = _v1.a;
				var rLE = _v1.b;
				var twoQsLE = A2($dwayne$elm_natural$Natural$sdMul, qsLE, 2);
				return _Utils_eq(
					A2($dwayne$elm_natural$Natural$compareLE, rLE, ysLE),
					$elm$core$Basics$LT) ? _Utils_Tuple2(twoQsLE, rLE) : _Utils_Tuple2(
					A2($dwayne$elm_natural$Natural$sdAdd, twoQsLE, 1),
					A4($dwayne$elm_natural$Natural$subHelper, rLE, ysLE, 0, _List_Nil));
		}
	});
var $dwayne$elm_natural$Natural$computeFirstEstimation = F3(
	function (r3, d2, d2LE) {
		if (r3.$ === 'P3Single') {
			var x = r3.a;
			return A2($elm$core$Basics$min, (x / d2) | 0, $dwayne$elm_natural$Natural$baseMask);
		} else {
			var xsLE = r3.a;
			var _v1 = A2($dwayne$elm_natural$Natural$slowDivModBy, d2LE, xsLE);
			if (!_v1.a.b) {
				return 0;
			} else {
				if (!_v1.a.b.b) {
					var _v2 = _v1.a;
					var qk = _v2.a;
					return qk;
				} else {
					return $dwayne$elm_natural$Natural$baseMask;
				}
			}
		}
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$P3Multi = function (a) {
	return {$: 'P3Multi', a: a};
};
var $dwayne$elm_natural$Natural$P3Single = function (a) {
	return {$: 'P3Single', a: a};
};
var $dwayne$elm_natural$Natural$prefix3 = function (digitsBE) {
	if (!digitsBE.b) {
		return $dwayne$elm_natural$Natural$P3Single(0);
	} else {
		if (!digitsBE.b.b) {
			var d0 = digitsBE.a;
			return $dwayne$elm_natural$Natural$P3Single(d0);
		} else {
			if (!digitsBE.b.b.b) {
				var d1 = digitsBE.a;
				var _v1 = digitsBE.b;
				var d0 = _v1.a;
				return $dwayne$elm_natural$Natural$P3Single((d1 * $dwayne$elm_natural$Natural$base) + d0);
			} else {
				if (!digitsBE.a) {
					var _v2 = digitsBE.b;
					var d1 = _v2.a;
					var _v3 = _v2.b;
					var d0 = _v3.a;
					return $dwayne$elm_natural$Natural$P3Single((d1 * $dwayne$elm_natural$Natural$base) + d0);
				} else {
					var d2 = digitsBE.a;
					var _v4 = digitsBE.b;
					var d1 = _v4.a;
					var _v5 = _v4.b;
					var d0 = _v5.a;
					return $dwayne$elm_natural$Natural$P3Multi(
						_List_fromArray(
							[d0, d1, d2]));
				}
			}
		}
	}
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $dwayne$elm_natural$Natural$longDivision = F7(
	function (rsBE, dsLE, d2, d2LE, m, k, qsLE) {
		longDivision:
		while (true) {
			if (k < 0) {
				return _Utils_Tuple2(
					qsLE,
					$elm$core$List$reverse(
						$dwayne$elm_natural$Natural$removeLeadingZeros(rsBE)));
			} else {
				var j = (k + m) + 1;
				var z = j - $elm$core$List$length(rsBE);
				var l = 3 - z;
				var r3 = $dwayne$elm_natural$Natural$prefix3(
					A2($elm$core$List$take, l, rsBE));
				var qt0 = A3($dwayne$elm_natural$Natural$computeFirstEstimation, r3, d2, d2LE);
				var p = (m + 1) - z;
				var rpBE = A2($elm$core$List$take, p, rsBE);
				var rpLE = $elm$core$List$reverse(rpBE);
				var rtBE = A2($elm$core$List$drop, p, rsBE);
				var dq0LE = A2($dwayne$elm_natural$Natural$sdMul, dsLE, qt0);
				var _v0 = function () {
					if (_Utils_eq(
						A2($dwayne$elm_natural$Natural$compareLE, rpLE, dq0LE),
						$elm$core$Basics$LT)) {
						var qt1 = qt0 - 1;
						return _Utils_Tuple2(
							qt1,
							A2($dwayne$elm_natural$Natural$sdMul, dsLE, qt1));
					} else {
						return _Utils_Tuple2(qt0, dq0LE);
					}
				}();
				var qk = _v0.a;
				var dqLE = _v0.b;
				var rhBE = $elm$core$List$reverse(
					A4($dwayne$elm_natural$Natural$subHelper, rpLE, dqLE, 0, _List_Nil));
				var newRsBE = A2($elm$core$List$append, rhBE, rtBE);
				if ((!qk) && _Utils_eq(qsLE, _List_Nil)) {
					var $temp$rsBE = newRsBE,
						$temp$dsLE = dsLE,
						$temp$d2 = d2,
						$temp$d2LE = d2LE,
						$temp$m = m,
						$temp$k = k - 1,
						$temp$qsLE = qsLE;
					rsBE = $temp$rsBE;
					dsLE = $temp$dsLE;
					d2 = $temp$d2;
					d2LE = $temp$d2LE;
					m = $temp$m;
					k = $temp$k;
					qsLE = $temp$qsLE;
					continue longDivision;
				} else {
					var $temp$rsBE = newRsBE,
						$temp$dsLE = dsLE,
						$temp$d2 = d2,
						$temp$d2LE = d2LE,
						$temp$m = m,
						$temp$k = k - 1,
						$temp$qsLE = A2($elm$core$List$cons, qk, qsLE);
					rsBE = $temp$rsBE;
					dsLE = $temp$dsLE;
					d2 = $temp$d2;
					d2LE = $temp$d2LE;
					m = $temp$m;
					k = $temp$k;
					qsLE = $temp$qsLE;
					continue longDivision;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$one = $dwayne$elm_natural$Natural$Natural(
	_List_fromArray(
		[1]));
var $dwayne$elm_natural$Natural$sdDivModHelper = F5(
	function (xs, y, isTrailingZero, qs, r) {
		sdDivModHelper:
		while (true) {
			if (!xs.b) {
				return _Utils_Tuple2(qs, r);
			} else {
				var x = xs.a;
				var restXs = xs.b;
				var value = (r * $dwayne$elm_natural$Natural$base) + x;
				var _v1 = A2($dwayne$elm_natural$Natural$iDivModBy, y, value);
				var q = _v1.a;
				var newR = _v1.b;
				if (isTrailingZero && (!q)) {
					var $temp$xs = restXs,
						$temp$y = y,
						$temp$isTrailingZero = isTrailingZero,
						$temp$qs = qs,
						$temp$r = newR;
					xs = $temp$xs;
					y = $temp$y;
					isTrailingZero = $temp$isTrailingZero;
					qs = $temp$qs;
					r = $temp$r;
					continue sdDivModHelper;
				} else {
					var $temp$xs = restXs,
						$temp$y = y,
						$temp$isTrailingZero = false,
						$temp$qs = A2($elm$core$List$cons, q, qs),
						$temp$r = newR;
					xs = $temp$xs;
					y = $temp$y;
					isTrailingZero = $temp$isTrailingZero;
					qs = $temp$qs;
					r = $temp$r;
					continue sdDivModHelper;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$sdDivMod = F4(
	function (xs, y, qs, r) {
		return A5(
			$dwayne$elm_natural$Natural$sdDivModHelper,
			$elm$core$List$reverse(xs),
			y,
			true,
			qs,
			r);
	});
var $dwayne$elm_natural$Natural$zero = $dwayne$elm_natural$Natural$Natural(_List_Nil);
var $dwayne$elm_natural$Natural$divModBy = F2(
	function (_v0, x) {
		var ysLE = _v0.a;
		var xsLE = x.a;
		if (!ysLE.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!ysLE.b.b) {
				var d = ysLE.a;
				var _v2 = A4($dwayne$elm_natural$Natural$sdDivMod, xsLE, d, _List_Nil, 0);
				var qs = _v2.a;
				var r = _v2.b;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(
						$dwayne$elm_natural$Natural$Natural(qs),
						(!r) ? $dwayne$elm_natural$Natural$zero : $dwayne$elm_natural$Natural$Natural(
							_List_fromArray(
								[r]))));
			} else {
				var _v3 = A2($dwayne$elm_natural$Natural$compareLE, xsLE, ysLE);
				switch (_v3.$) {
					case 'LT':
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($dwayne$elm_natural$Natural$zero, x));
					case 'EQ':
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($dwayne$elm_natural$Natural$one, $dwayne$elm_natural$Natural$zero));
					default:
						var _v4 = $dwayne$elm_natural$Natural$lengthAndReverse(xsLE);
						var n = _v4.a;
						var rsBE = _v4.b;
						var _v5 = $dwayne$elm_natural$Natural$lengthAndReverse(ysLE);
						var m = _v5.a;
						var dsBE = _v5.b;
						var k = n - m;
						var _v6 = $dwayne$elm_natural$Natural$computeD2(dsBE);
						var d2 = _v6.a;
						var d2LE = _v6.b;
						var _v7 = A7($dwayne$elm_natural$Natural$longDivision, rsBE, ysLE, d2, d2LE, m, k, _List_Nil);
						var qsLE = _v7.a;
						var rsLE = _v7.b;
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								$dwayne$elm_natural$Natural$Natural(qsLE),
								$dwayne$elm_natural$Natural$Natural(rsLE)));
				}
			}
		}
	});
var $author$project$Bytes$Comparable$fromHexUnchecked = $author$project$Bytes$Comparable$Bytes;
var $dwayne$elm_natural$Natural$fromIntHelper = F2(
	function (digitsBE, n) {
		fromIntHelper:
		while (true) {
			if (!n) {
				return $elm$core$List$reverse(digitsBE);
			} else {
				var _v0 = A2($dwayne$elm_natural$Natural$quotientModBy, $dwayne$elm_natural$Natural$base, n);
				var q = _v0.a;
				var r = _v0.b;
				var $temp$digitsBE = A2($elm$core$List$cons, r, digitsBE),
					$temp$n = q;
				digitsBE = $temp$digitsBE;
				n = $temp$n;
				continue fromIntHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$maxBits = 53;
var $dwayne$elm_natural$Natural$maxSafeInt = A2($elm$core$Basics$pow, 2, $dwayne$elm_natural$Natural$maxBits) - 1;
var $dwayne$elm_natural$Natural$fromInt = function (x) {
	return ((x >= 0) && (_Utils_cmp(x, $dwayne$elm_natural$Natural$maxSafeInt) < 1)) ? $elm$core$Maybe$Just(
		$dwayne$elm_natural$Natural$Natural(
			A2($dwayne$elm_natural$Natural$fromIntHelper, _List_Nil, x))) : $elm$core$Maybe$Nothing;
};
var $dwayne$elm_natural$Natural$fromSafeInt = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_natural$Natural$fromInt,
	$elm$core$Maybe$withDefault($dwayne$elm_natural$Natural$zero));
var $dwayne$elm_natural$Natural$compare = F2(
	function (_v0, _v1) {
		var xsLE = _v0.a;
		var ysLE = _v1.a;
		return A2($dwayne$elm_natural$Natural$compareLE, xsLE, ysLE);
	});
var $dwayne$elm_natural$Natural$isGreaterThan = F2(
	function (b, a) {
		return _Utils_eq(
			A2($dwayne$elm_natural$Natural$compare, a, b),
			$elm$core$Basics$GT);
	});
var $elm$core$Basics$not = _Basics_not;
var $dwayne$elm_natural$Natural$isLessThanOrEqual = F2(
	function (b, a) {
		return !A2($dwayne$elm_natural$Natural$isGreaterThan, b, a);
	});
var $author$project$Cbor$Encode$Extra$isSafeNat = function (n) {
	return A2(
		$dwayne$elm_natural$Natural$isLessThanOrEqual,
		$dwayne$elm_natural$Natural$fromSafeInt($dwayne$elm_natural$Natural$maxSafeInt),
		n);
};
var $dwayne$elm_natural$Natural$isLessThan = F2(
	function (b, a) {
		return _Utils_eq(
			A2($dwayne$elm_natural$Natural$compare, a, b),
			$elm$core$Basics$LT);
	});
var $author$project$Cbor$Encode$Extra$limit32Bits = $dwayne$elm_natural$Natural$fromSafeInt(
	A2($elm$core$Basics$pow, 2, 32));
var $dwayne$elm_natural$Natural$addHelper = F4(
	function (xsLE, ysLE, carry, zsBE) {
		addHelper:
		while (true) {
			var _v0 = _Utils_Tuple2(xsLE, ysLE);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					var finalZsBE = (!carry) ? zsBE : A2($elm$core$List$cons, carry, zsBE);
					return $elm$core$List$reverse(finalZsBE);
				} else {
					var _v3 = _v0.b;
					var y = _v3.a;
					var restYsLE = _v3.b;
					var _v4 = A2($dwayne$elm_natural$Natural$iDivModBy, $dwayne$elm_natural$Natural$base, y + carry);
					var newCarry = _v4.a;
					var z = _v4.b;
					var $temp$xsLE = _List_Nil,
						$temp$ysLE = restYsLE,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue addHelper;
				}
			} else {
				if (!_v0.b.b) {
					var _v1 = _v0.a;
					var x = _v1.a;
					var restXsLE = _v1.b;
					var _v2 = A2($dwayne$elm_natural$Natural$iDivModBy, $dwayne$elm_natural$Natural$base, x + carry);
					var newCarry = _v2.a;
					var z = _v2.b;
					var $temp$xsLE = restXsLE,
						$temp$ysLE = _List_Nil,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue addHelper;
				} else {
					var _v5 = _v0.a;
					var x = _v5.a;
					var restXsLE = _v5.b;
					var _v6 = _v0.b;
					var y = _v6.a;
					var restYsLE = _v6.b;
					var _v7 = A2($dwayne$elm_natural$Natural$iDivModBy, $dwayne$elm_natural$Natural$base, (x + y) + carry);
					var newCarry = _v7.a;
					var z = _v7.b;
					var $temp$xsLE = restXsLE,
						$temp$ysLE = restYsLE,
						$temp$carry = newCarry,
						$temp$zsBE = A2($elm$core$List$cons, z, zsBE);
					xsLE = $temp$xsLE;
					ysLE = $temp$ysLE;
					carry = $temp$carry;
					zsBE = $temp$zsBE;
					continue addHelper;
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$mulHelper = F3(
	function (xsLE, ysBE, zsLE) {
		mulHelper:
		while (true) {
			if (!ysBE.b) {
				return zsLE;
			} else {
				var y = ysBE.a;
				var restYsBE = ysBE.b;
				var augend = _Utils_eq(zsLE, _List_Nil) ? _List_Nil : A2($elm$core$List$cons, 0, zsLE);
				var addend = A2($dwayne$elm_natural$Natural$sdMul, xsLE, y);
				var partialSum = A4($dwayne$elm_natural$Natural$addHelper, augend, addend, 0, _List_Nil);
				var $temp$xsLE = xsLE,
					$temp$ysBE = restYsBE,
					$temp$zsLE = partialSum;
				xsLE = $temp$xsLE;
				ysBE = $temp$ysBE;
				zsLE = $temp$zsLE;
				continue mulHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$shiftLeftByHelper = F2(
	function (n, digitsLE) {
		shiftLeftByHelper:
		while (true) {
			if (!n) {
				return digitsLE;
			} else {
				var $temp$n = n - 1,
					$temp$digitsLE = A2($elm$core$List$cons, 0, digitsLE);
				n = $temp$n;
				digitsLE = $temp$digitsLE;
				continue shiftLeftByHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$shiftLeftBy = F2(
	function (n, digitsLE) {
		if (!digitsLE.b) {
			return _List_Nil;
		} else {
			return A2($dwayne$elm_natural$Natural$shiftLeftByHelper, n, digitsLE);
		}
	});
var $dwayne$elm_natural$Natural$splitAt = F2(
	function (n, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, list),
			A2($elm$core$List$drop, n, list));
	});
var $dwayne$elm_natural$Natural$karatsuba = F2(
	function (xsLE, ysLE) {
		var _v0 = _Utils_Tuple2(xsLE, ysLE);
		if (!_v0.a.b) {
			return _List_Nil;
		} else {
			if (!_v0.b.b) {
				return _List_Nil;
			} else {
				if ((_v0.a.a === 1) && (!_v0.a.b.b)) {
					var _v1 = _v0.a;
					return ysLE;
				} else {
					if ((_v0.b.a === 1) && (!_v0.b.b.b)) {
						var _v2 = _v0.b;
						return xsLE;
					} else {
						var yLen = $elm$core$List$length(ysLE);
						var xLen = $elm$core$List$length(xsLE);
						if ((xLen < 1000) || (yLen < 1000)) {
							return A3(
								$dwayne$elm_natural$Natural$mulHelper,
								xsLE,
								$elm$core$List$reverse(ysLE),
								_List_Nil);
						} else {
							var n = A2($elm$core$Basics$max, xLen, yLen);
							var m = (n / 2) | 0;
							var m2 = 2 * m;
							var _v3 = A2($dwayne$elm_natural$Natural$splitAt, m, ysLE);
							var y0 = _v3.a;
							var y1 = _v3.b;
							var _v4 = A2($dwayne$elm_natural$Natural$splitAt, m, xsLE);
							var x0 = _v4.a;
							var x1 = _v4.b;
							var z0 = A2($dwayne$elm_natural$Natural$karatsuba, x0, y0);
							var t1 = A2(
								$dwayne$elm_natural$Natural$karatsuba,
								A4($dwayne$elm_natural$Natural$addHelper, x0, x1, 0, _List_Nil),
								A4($dwayne$elm_natural$Natural$addHelper, y0, y1, 0, _List_Nil));
							var t2 = A4($dwayne$elm_natural$Natural$subHelper, t1, z0, 0, _List_Nil);
							var z2 = A2($dwayne$elm_natural$Natural$karatsuba, x1, y1);
							var z1 = A4($dwayne$elm_natural$Natural$subHelper, t2, z2, 0, _List_Nil);
							var t3 = A4(
								$dwayne$elm_natural$Natural$addHelper,
								A2($dwayne$elm_natural$Natural$shiftLeftBy, m, z1),
								z0,
								0,
								_List_Nil);
							return A4(
								$dwayne$elm_natural$Natural$addHelper,
								A2($dwayne$elm_natural$Natural$shiftLeftBy, m2, z2),
								t3,
								0,
								_List_Nil);
						}
					}
				}
			}
		}
	});
var $dwayne$elm_natural$Natural$mul = F2(
	function (_v0, _v1) {
		var xsLE = _v0.a;
		var ysLE = _v1.a;
		return $dwayne$elm_natural$Natural$Natural(
			A2($dwayne$elm_natural$Natural$karatsuba, xsLE, ysLE));
	});
var $author$project$Cbor$Encode$Extra$limit64Bits = A2($dwayne$elm_natural$Natural$mul, $author$project$Cbor$Encode$Extra$limit32Bits, $author$project$Cbor$Encode$Extra$limit32Bits);
var $author$project$Cbor$Encode$Extra$isU64 = function (n) {
	return A2($dwayne$elm_natural$Natural$isLessThan, $author$project$Cbor$Encode$Extra$limit64Bits, n);
};
var $author$project$Cbor$Encode$Extra$prependWith0IfOddLength = function (str) {
	return (!A2(
		$elm$core$Basics$modBy,
		2,
		$elm$core$String$length(str))) ? str : ('0' + str);
};
var $elm_toulouse$cbor$Cbor$Encode$tagged = F3(
	function (t, encodeA, a) {
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			_List_fromArray(
				[
					$elm_toulouse$cbor$Cbor$Encode$tag(t),
					encodeA(a)
				]));
	});
var $dwayne$elm_natural$Natural$isBaseB = function (b) {
	return (2 <= b) && (b <= 36);
};
var $elm$core$String$cons = _String_cons;
var $elm$core$Char$fromCode = _Char_fromCode;
var $dwayne$elm_natural$Natural$toBaseBChar = function (offset) {
	return $elm$core$Char$fromCode(
		(offset < 10) ? (48 + offset) : ((65 + offset) - 10));
};
var $dwayne$elm_natural$Natural$toBaseBStringHelper = F3(
	function (b, xs, result) {
		toBaseBStringHelper:
		while (true) {
			if (!xs.b) {
				return (result === '') ? '0' : result;
			} else {
				var _v1 = A4($dwayne$elm_natural$Natural$sdDivMod, xs, b, _List_Nil, 0);
				var q = _v1.a;
				var r = _v1.b;
				var $temp$b = b,
					$temp$xs = q,
					$temp$result = A2(
					$elm$core$String$cons,
					$dwayne$elm_natural$Natural$toBaseBChar(r),
					result);
				b = $temp$b;
				xs = $temp$xs;
				result = $temp$result;
				continue toBaseBStringHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$toBaseBString = F2(
	function (b, _v0) {
		var xs = _v0.a;
		return $dwayne$elm_natural$Natural$isBaseB(b) ? $elm$core$Maybe$Just(
			A3($dwayne$elm_natural$Natural$toBaseBStringHelper, b, xs, '')) : $elm$core$Maybe$Nothing;
	});
var $dwayne$elm_natural$Natural$toHexString = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_natural$Natural$toBaseBString(16),
	$elm$core$Maybe$withDefault(''));
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $dwayne$elm_natural$Natural$padLeft = F3(
	function (n, x, list) {
		return _Utils_ap(
			A2(
				$elm$core$List$repeat,
				n - $elm$core$List$length(list),
				x),
			list);
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $dwayne$elm_natural$Natural$toIntHelper = F3(
	function (mask, x, digitsBE) {
		toIntHelper:
		while (true) {
			if (!digitsBE.b) {
				return x;
			} else {
				var digit = digitsBE.a;
				var restDigitsBE = digitsBE.b;
				var $temp$mask = $dwayne$elm_natural$Natural$baseMask,
					$temp$x = (x * $dwayne$elm_natural$Natural$base) + (digit & mask),
					$temp$digitsBE = restDigitsBE;
				mask = $temp$mask;
				x = $temp$x;
				digitsBE = $temp$digitsBE;
				continue toIntHelper;
			}
		}
	});
var $dwayne$elm_natural$Natural$toInt = function (_v0) {
	var digitsLE = _v0.a;
	if (!digitsLE.b) {
		return 0;
	} else {
		var _v2 = A2($dwayne$elm_natural$Natural$iDivModBy, $dwayne$elm_natural$Natural$numBits, $dwayne$elm_natural$Natural$maxBits);
		var q = _v2.a;
		var r = _v2.b;
		var _v3 = (r > 0) ? _Utils_Tuple2(
			q + 1,
			A2($elm$core$Basics$pow, 2, r) - 1) : _Utils_Tuple2(q, $dwayne$elm_natural$Natural$baseMask);
		var len = _v3.a;
		var maskStart = _v3.b;
		return A3(
			$dwayne$elm_natural$Natural$toIntHelper,
			maskStart,
			0,
			A3(
				$dwayne$elm_natural$Natural$padLeft,
				len,
				0,
				$elm$core$List$reverse(
					A2($elm$core$List$take, len, digitsLE))));
	}
};
var $author$project$Cbor$Encode$Extra$natural = function (n) {
	if ($author$project$Cbor$Encode$Extra$isSafeNat(n)) {
		return $elm_toulouse$cbor$Cbor$Encode$int(
			$dwayne$elm_natural$Natural$toInt(n));
	} else {
		if ($author$project$Cbor$Encode$Extra$isU64(n)) {
			var msbLsb = A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, 0),
				A2(
					$elm$core$Maybe$map,
					function (_v0) {
						var msb = _v0.a;
						var lsb = _v0.b;
						return _Utils_Tuple2(
							$dwayne$elm_natural$Natural$toInt(msb),
							$dwayne$elm_natural$Natural$toInt(lsb));
					},
					A2(
						$dwayne$elm_natural$Natural$divModBy,
						$dwayne$elm_natural$Natural$fromSafeInt(
							A2($elm$core$Basics$pow, 2, 32)),
						n)));
			return $elm_toulouse$cbor$Cbor$Encode$any(
				$elm_toulouse$cbor$Cbor$CborInt64(msbLsb));
		} else {
			var nAsBytes = $author$project$Bytes$Comparable$toBytes(
				$author$project$Bytes$Comparable$fromHexUnchecked(
					$author$project$Cbor$Encode$Extra$prependWith0IfOddLength(
						$dwayne$elm_natural$Natural$toHexString(n))));
			return A3($elm_toulouse$cbor$Cbor$Encode$tagged, $elm_toulouse$cbor$Cbor$Tag$PositiveBigNum, $elm_toulouse$cbor$Cbor$Encode$bytes, nAsBytes);
		}
	}
};
var $turboMaCk$any_dict$Dict$Any$AnyDict = function (a) {
	return {$: 'AnyDict', a: a};
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $turboMaCk$any_dict$Dict$Any$fromList = F2(
	function (f, xs) {
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var k = _v0.a;
							var v = _v0.b;
							return _Utils_Tuple2(
								f(k),
								_Utils_Tuple2(k, v));
						},
						xs)),
				toKey: f
			});
	});
var $author$project$Bytes$Comparable$toHex = function (_v0) {
	var str = _v0.a;
	return str;
};
var $author$project$Cbor$Encode$Extra$toCanonicalKey = F2(
	function (encodeKey, k) {
		var encodedKey = $author$project$Bytes$Comparable$toHex(
			$author$project$Bytes$Comparable$fromBytes(
				$elm_toulouse$cbor$Cbor$Encode$encode(
					encodeKey(k))));
		return _Utils_Tuple2(
			$elm$core$String$length(encodedKey),
			encodedKey);
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $turboMaCk$any_dict$Dict$Any$toList = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$values(dict);
};
var $author$project$Cbor$Encode$Extra$associativeList = F3(
	function (encodeKey, encodeValue, pairs) {
		return A3(
			$elm_toulouse$cbor$Cbor$Encode$associativeList,
			encodeKey,
			encodeValue,
			$turboMaCk$any_dict$Dict$Any$toList(
				A2(
					$turboMaCk$any_dict$Dict$Any$fromList,
					$author$project$Cbor$Encode$Extra$toCanonicalKey(encodeKey),
					pairs)));
	});
var $author$project$Bytes$Comparable$toCbor = A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$toBytes, $elm_toulouse$cbor$Cbor$Encode$bytes);
var $author$project$Bytes$Map$toList = function (_v0) {
	var m = _v0.a;
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (k, v, ks) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(
						$author$project$Bytes$Comparable$fromHexUnchecked(k),
						v),
					ks);
			}),
		_List_Nil,
		m);
};
var $author$project$Bytes$Map$toCbor = F2(
	function (valueEncoder, data) {
		return A3(
			$author$project$Cbor$Encode$Extra$associativeList,
			$author$project$Bytes$Comparable$toCbor,
			valueEncoder,
			$author$project$Bytes$Map$toList(data));
	});
var $author$project$Cardano$MultiAsset$coinsToCbor = function (multiAsset) {
	return A2(
		$author$project$Bytes$Map$toCbor,
		$author$project$Bytes$Map$toCbor($author$project$Cbor$Encode$Extra$natural),
		multiAsset);
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $author$project$Bytes$Map$isEmpty = function (_v0) {
	var m = _v0.a;
	return $elm$core$Dict$isEmpty(m);
};
var $author$project$Cardano$MultiAsset$isEmpty = $author$project$Bytes$Map$isEmpty;
var $elm_toulouse$cbor$Cbor$Encode$length = A2(
	$elm$core$Basics$composeL,
	$elm_toulouse$cbor$Cbor$Encode$Encoder,
	$elm_toulouse$cbor$Cbor$Encode$unsigned(4));
var $elm_toulouse$cbor$Cbor$Encode$tuple = F2(
	function (step, _this) {
		var _v0 = step(
			$elm_toulouse$cbor$Cbor$Encode$Step(
				{encodeKey: $elm$core$Basics$never, steps: _List_Nil, _this: _this}));
		var steps = _v0.a.steps;
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			A2(
				$elm$core$List$cons,
				$elm_toulouse$cbor$Cbor$Encode$length(
					$elm$core$List$length(steps)),
				$elm$core$List$reverse(steps)));
	});
var $author$project$Cardano$Value$encode = function (_v0) {
	var lovelace = _v0.lovelace;
	var assets = _v0.assets;
	return $author$project$Cardano$MultiAsset$isEmpty(assets) ? $author$project$Cbor$Encode$Extra$natural(lovelace) : $elm_toulouse$cbor$Cbor$Encode$tuple(
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Encode$elems,
			A2(
				$elm$core$Basics$composeR,
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$author$project$Cbor$Encode$Extra$natural,
					function (_v1) {
						return lovelace;
					}),
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$author$project$Cardano$MultiAsset$coinsToCbor,
					function (_v2) {
						return assets;
					}))))(_Utils_Tuple0);
};
var $author$project$Cardano$Utxo$encodeDatumOption = function (datumOption) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm$core$Basics$identity,
		function () {
			if (datumOption.$ === 'DatumHash') {
				var hash = datumOption.a;
				return _List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(0),
						$author$project$Bytes$Comparable$toCbor(hash)
					]);
			} else {
				var datum = datumOption.a;
				return _List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(1),
						A3(
						$elm_toulouse$cbor$Cbor$Encode$tagged,
						$elm_toulouse$cbor$Cbor$Tag$Cbor,
						$elm_toulouse$cbor$Cbor$Encode$bytes,
						$author$project$Bytes$Comparable$toBytes(datum.rawBytes))
					]);
			}
		}());
};
var $elm_toulouse$cbor$Cbor$Encode$field = F4(
	function (k, encodeValue, extract, _v0) {
		var _this = _v0.a._this;
		var encodeKey = _v0.a.encodeKey;
		var steps = _v0.a.steps;
		return $elm_toulouse$cbor$Cbor$Encode$Step(
			{
				encodeKey: encodeKey,
				steps: A2(
					$elm$core$List$cons,
					encodeValue(
						extract(_this)),
					A2(
						$elm$core$List$cons,
						encodeKey(k),
						steps)),
				_this: _this
			});
	});
var $elm_toulouse$cbor$Cbor$Encode$fields = $elm$core$Basics$identity;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm_toulouse$cbor$Cbor$Encode$optionalField = F4(
	function (k, encodeValue, extract, step) {
		var _this = step.a._this;
		var _v0 = extract(_this);
		if (_v0.$ === 'Nothing') {
			return step;
		} else {
			var a = _v0.a;
			return A4(
				$elm_toulouse$cbor$Cbor$Encode$field,
				k,
				encodeValue,
				$elm$core$Basics$always(a),
				step);
		}
	});
var $elm_toulouse$cbor$Cbor$Encode$size = A2(
	$elm$core$Basics$composeL,
	$elm_toulouse$cbor$Cbor$Encode$Encoder,
	$elm_toulouse$cbor$Cbor$Encode$unsigned(5));
var $elm_toulouse$cbor$Cbor$Encode$record = F3(
	function (encodeKey, step, _this) {
		var _v0 = step(
			$elm_toulouse$cbor$Cbor$Encode$Step(
				{encodeKey: encodeKey, steps: _List_Nil, _this: _this}));
		var steps = _v0.a.steps;
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			A2(
				$elm$core$List$cons,
				$elm_toulouse$cbor$Cbor$Encode$size(
					($elm$core$List$length(steps) / 2) | 0),
				$elm$core$List$reverse(steps)));
	});
var $author$project$Cardano$Script$refBytes = function (_v0) {
	var bytes = _v0.a.bytes;
	return bytes;
};
var $author$project$Cardano$Address$toBytesHelper = F3(
	function (networkId, headerType, payload) {
		var network = function () {
			if (networkId.$ === 'Testnet') {
				return '0';
			} else {
				return '1';
			}
		}();
		return $author$project$Bytes$Comparable$fromHexUnchecked(
			_Utils_ap(
				headerType,
				_Utils_ap(network, payload)));
	});
var $author$project$Cardano$Address$stakeAddressToBytes = function (_v0) {
	var networkId = _v0.networkId;
	var stakeCredential = _v0.stakeCredential;
	if (stakeCredential.$ === 'VKeyHash') {
		var stakeKeyHash = stakeCredential.a;
		return A3(
			$author$project$Cardano$Address$toBytesHelper,
			networkId,
			'e',
			$author$project$Bytes$Comparable$toHex(stakeKeyHash));
	} else {
		var stakeScriptHash = stakeCredential.a;
		return A3(
			$author$project$Cardano$Address$toBytesHelper,
			networkId,
			'f',
			$author$project$Bytes$Comparable$toHex(stakeScriptHash));
	}
};
var $elm$core$Debug$todo = _Debug_todo;
var $author$project$Cardano$Address$toBytes = function (address) {
	switch (address.$) {
		case 'Byron':
			var bytes = address.a;
			return $author$project$Bytes$Comparable$fromHexUnchecked(
				$author$project$Bytes$Comparable$toHex(bytes));
		case 'Shelley':
			var networkId = address.a.networkId;
			var paymentCredential = address.a.paymentCredential;
			var stakeCredential = address.a.stakeCredential;
			var _v1 = _Utils_Tuple2(paymentCredential, stakeCredential);
			if (_v1.a.$ === 'VKeyHash') {
				if (_v1.b.$ === 'Just') {
					if (_v1.b.a.$ === 'InlineCredential') {
						if (_v1.b.a.a.$ === 'VKeyHash') {
							var paymentKeyHash = _v1.a.a;
							var stakeKeyHash = _v1.b.a.a.a;
							return A3(
								$author$project$Cardano$Address$toBytesHelper,
								networkId,
								'0',
								_Utils_ap(
									$author$project$Bytes$Comparable$toHex(paymentKeyHash),
									$author$project$Bytes$Comparable$toHex(stakeKeyHash)));
						} else {
							var paymentKeyHash = _v1.a.a;
							var stakeScriptHash = _v1.b.a.a.a;
							return A3(
								$author$project$Cardano$Address$toBytesHelper,
								networkId,
								'2',
								_Utils_ap(
									$author$project$Bytes$Comparable$toHex(paymentKeyHash),
									$author$project$Bytes$Comparable$toHex(stakeScriptHash)));
						}
					} else {
						var paymentKeyHash = _v1.a.a;
						return A3(
							$author$project$Cardano$Address$toBytesHelper,
							networkId,
							'4',
							_Utils_ap(
								$author$project$Bytes$Comparable$toHex(paymentKeyHash),
								_Debug_todo(
									'Cardano.Address',
									{
										start: {line: 486, column: 80},
										end: {line: 486, column: 90}
									})('encode pointer credential')));
					}
				} else {
					var paymentKeyHash = _v1.a.a;
					var _v2 = _v1.b;
					return A3(
						$author$project$Cardano$Address$toBytesHelper,
						networkId,
						'6',
						$author$project$Bytes$Comparable$toHex(paymentKeyHash));
				}
			} else {
				if (_v1.b.$ === 'Just') {
					if (_v1.b.a.$ === 'InlineCredential') {
						if (_v1.b.a.a.$ === 'VKeyHash') {
							var paymentScriptHash = _v1.a.a;
							var stakeKeyHash = _v1.b.a.a.a;
							return A3(
								$author$project$Cardano$Address$toBytesHelper,
								networkId,
								'1',
								_Utils_ap(
									$author$project$Bytes$Comparable$toHex(paymentScriptHash),
									$author$project$Bytes$Comparable$toHex(stakeKeyHash)));
						} else {
							var paymentScriptHash = _v1.a.a;
							var stakeScriptHash = _v1.b.a.a.a;
							return A3(
								$author$project$Cardano$Address$toBytesHelper,
								networkId,
								'3',
								_Utils_ap(
									$author$project$Bytes$Comparable$toHex(paymentScriptHash),
									$author$project$Bytes$Comparable$toHex(stakeScriptHash)));
						}
					} else {
						var paymentScriptHash = _v1.a.a;
						return A3(
							$author$project$Cardano$Address$toBytesHelper,
							networkId,
							'5',
							_Utils_ap(
								$author$project$Bytes$Comparable$toHex(paymentScriptHash),
								_Debug_todo(
									'Cardano.Address',
									{
										start: {line: 490, column: 83},
										end: {line: 490, column: 93}
									})('encode pointer credential')));
					}
				} else {
					var paymentScriptHash = _v1.a.a;
					var _v3 = _v1.b;
					return A3(
						$author$project$Cardano$Address$toBytesHelper,
						networkId,
						'7',
						$author$project$Bytes$Comparable$toHex(paymentScriptHash));
				}
			}
		default:
			var stakeAddress = address.a;
			return $author$project$Bytes$Comparable$fromHexUnchecked(
				$author$project$Bytes$Comparable$toHex(
					$author$project$Cardano$Address$stakeAddressToBytes(stakeAddress)));
	}
};
var $author$project$Cardano$Address$toCbor = function (address) {
	return $author$project$Bytes$Comparable$toCbor(
		$author$project$Cardano$Address$toBytes(address));
};
var $author$project$Cardano$Utxo$encodeOutput = function (output) {
	return A3(
		$elm_toulouse$cbor$Cbor$Encode$record,
		$elm_toulouse$cbor$Cbor$Encode$int,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Encode$fields,
			A2(
				$elm$core$Basics$composeR,
				A3(
					$elm_toulouse$cbor$Cbor$Encode$field,
					0,
					$author$project$Cardano$Address$toCbor,
					function ($) {
						return $.address;
					}),
				A2(
					$elm$core$Basics$composeR,
					A3(
						$elm_toulouse$cbor$Cbor$Encode$field,
						1,
						$author$project$Cardano$Value$encode,
						function ($) {
							return $.amount;
						}),
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							2,
							$author$project$Cardano$Utxo$encodeDatumOption,
							function ($) {
								return $.datumOption;
							}),
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							3,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Cardano$Script$refBytes,
								A2(
									$elm$core$Basics$composeR,
									$author$project$Bytes$Comparable$toBytes,
									A2($elm_toulouse$cbor$Cbor$Encode$tagged, $elm_toulouse$cbor$Cbor$Tag$Cbor, $elm_toulouse$cbor$Cbor$Encode$bytes))),
							function ($) {
								return $.referenceScript;
							}))))),
		output);
};
var $author$project$Cardano$Utxo$encodeOutputReference = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.transactionId;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$int,
				function ($) {
					return $.outputIndex;
				}))));
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Main$encodeTuple = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2($elm_toulouse$cbor$Cbor$Encode$elem, $author$project$Cardano$Utxo$encodeOutputReference, $elm$core$Tuple$first),
			A2($elm_toulouse$cbor$Cbor$Encode$elem, $author$project$Cardano$Utxo$encodeOutput, $elm$core$Tuple$second))));
var $author$project$Cardano$TxIntent$AutoFee = function (a) {
	return {$: 'AutoFee', a: a};
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $author$project$Cardano$TxIntent$GovProposalsNotSupportedInSimpleFinalize = {$: 'GovProposalsNotSupportedInSimpleFinalize'};
var $author$project$Cardano$TxIntent$assertNoGovProposals = function (intents) {
	assertNoGovProposals:
	while (true) {
		if (!intents.b) {
			return $elm$core$Result$Ok(_Utils_Tuple0);
		} else {
			if (intents.a.$ === 'Propose') {
				return $elm$core$Result$Err($author$project$Cardano$TxIntent$GovProposalsNotSupportedInSimpleFinalize);
			} else {
				var otherIntents = intents.b;
				var $temp$intents = otherIntents;
				intents = $temp$intents;
				continue assertNoGovProposals;
			}
		}
	}
};
var $author$project$Cardano$Witness$credentialIsPlutusScript = function (cred) {
	if ((cred.$ === 'WithScript') && (cred.b.$ === 'Plutus')) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Cardano$TxIntent$containPlutusScripts = function (txIntents) {
	containPlutusScripts:
	while (true) {
		if (!txIntents.b) {
			return false;
		} else {
			switch (txIntents.a.$) {
				case 'SendTo':
					var _v1 = txIntents.a;
					var otherIntents = txIntents.b;
					var $temp$txIntents = otherIntents;
					txIntents = $temp$txIntents;
					continue containPlutusScripts;
				case 'SendToOutput':
					var otherIntents = txIntents.b;
					var $temp$txIntents = otherIntents;
					txIntents = $temp$txIntents;
					continue containPlutusScripts;
				case 'SendToOutputAdvanced':
					var otherIntents = txIntents.b;
					var $temp$txIntents = otherIntents;
					txIntents = $temp$txIntents;
					continue containPlutusScripts;
				case 'Spend':
					switch (txIntents.a.a.$) {
						case 'FromWallet':
							var otherIntents = txIntents.b;
							var $temp$txIntents = otherIntents;
							txIntents = $temp$txIntents;
							continue containPlutusScripts;
						case 'FromNativeScript':
							var otherIntents = txIntents.b;
							var $temp$txIntents = otherIntents;
							txIntents = $temp$txIntents;
							continue containPlutusScripts;
						default:
							return true;
					}
				case 'MintBurn':
					var scriptWitness = txIntents.a.a.scriptWitness;
					var otherIntents = txIntents.b;
					if (scriptWitness.$ === 'Native') {
						var $temp$txIntents = otherIntents;
						txIntents = $temp$txIntents;
						continue containPlutusScripts;
					} else {
						return true;
					}
				case 'IssueCertificate':
					switch (txIntents.a.a.$) {
						case 'RegisterStake':
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'UnregisterStake':
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'DelegateStake':
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'RegisterPool':
							var _v3 = txIntents.a.a;
							var otherIntents = txIntents.b;
							var $temp$txIntents = otherIntents;
							txIntents = $temp$txIntents;
							continue containPlutusScripts;
						case 'RetirePool':
							var otherIntents = txIntents.b;
							var $temp$txIntents = otherIntents;
							txIntents = $temp$txIntents;
							continue containPlutusScripts;
						case 'RegisterDrep':
							var drep = txIntents.a.a.a.drep;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(drep)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'UnregisterDrep':
							var drep = txIntents.a.a.a.drep;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(drep)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'VoteAlwaysAbstain':
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						case 'VoteAlwaysNoConfidence':
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
						default:
							var delegator = txIntents.a.a.a.delegator;
							var otherIntents = txIntents.b;
							if ($author$project$Cardano$Witness$credentialIsPlutusScript(delegator)) {
								return true;
							} else {
								var $temp$txIntents = otherIntents;
								txIntents = $temp$txIntents;
								continue containPlutusScripts;
							}
					}
				case 'WithdrawRewards':
					var scriptWitness = txIntents.a.a.scriptWitness;
					var otherIntents = txIntents.b;
					if ((scriptWitness.$ === 'Just') && (scriptWitness.a.$ === 'Plutus')) {
						return true;
					} else {
						var $temp$txIntents = otherIntents;
						txIntents = $temp$txIntents;
						continue containPlutusScripts;
					}
				case 'Vote':
					var _v5 = txIntents.a;
					var voter = _v5.a;
					var otherIntents = txIntents.b;
					_v6$2:
					while (true) {
						switch (voter.$) {
							case 'WithCommitteeHotCred':
								if ((voter.a.$ === 'WithScript') && (voter.a.b.$ === 'Plutus')) {
									var _v7 = voter.a;
									return true;
								} else {
									break _v6$2;
								}
							case 'WithDrepCred':
								if ((voter.a.$ === 'WithScript') && (voter.a.b.$ === 'Plutus')) {
									var _v8 = voter.a;
									return true;
								} else {
									break _v6$2;
								}
							default:
								break _v6$2;
						}
					}
					var $temp$txIntents = otherIntents;
					txIntents = $temp$txIntents;
					continue containPlutusScripts;
				default:
					var govAction = txIntents.a.a.govAction;
					var otherIntents = txIntents.b;
					switch (govAction.$) {
						case 'ParameterChange':
							return true;
						case 'TreasuryWithdrawals':
							return true;
						default:
							var $temp$txIntents = otherIntents;
							txIntents = $temp$txIntents;
							continue containPlutusScripts;
					}
			}
		}
	}
};
var $author$project$Cardano$Uplc$conwayDefaultBudget = {mem: 14000000, steps: 10000000000};
var $author$project$Cardano$Uplc$conwayDefaultCostModels = {
	plutusV1: $elm$core$Maybe$Just(
		_List_fromArray(
			[100788, 420, 1, 1, 1000, 173, 0, 1, 1000, 59957, 4, 1, 11183, 32, 201305, 8356, 4, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 100, 100, 16000, 100, 94375, 32, 132994, 32, 61462, 4, 72010, 178, 0, 1, 22151, 32, 91189, 769, 4, 2, 85848, 228465, 122, 0, 1, 1, 1000, 42921, 4, 2, 24548, 29498, 38, 1, 898148, 27279, 1, 51775, 558, 1, 39184, 1000, 60594, 1, 141895, 32, 83150, 32, 15299, 32, 76049, 1, 13169, 4, 22100, 10, 28999, 74, 1, 28999, 74, 1, 43285, 552, 1, 44749, 541, 1, 33852, 32, 68246, 32, 72362, 32, 7243, 32, 7391, 32, 11546, 32, 85848, 228465, 122, 0, 1, 1, 90434, 519, 0, 1, 74433, 32, 85848, 228465, 122, 0, 1, 1, 85848, 228465, 122, 0, 1, 1, 270652, 22588, 4, 1457325, 64566, 4, 20467, 1, 4, 0, 141992, 32, 100788, 420, 1, 1, 81663, 32, 59498, 32, 20142, 32, 24588, 32, 20744, 32, 25933, 32, 24623, 32, 53384111, 14333, 10])),
	plutusV2: $elm$core$Maybe$Just(
		_List_fromArray(
			[100788, 420, 1, 1, 1000, 173, 0, 1, 1000, 59957, 4, 1, 11183, 32, 201305, 8356, 4, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 100, 100, 16000, 100, 94375, 32, 132994, 32, 61462, 4, 72010, 178, 0, 1, 22151, 32, 91189, 769, 4, 2, 85848, 228465, 122, 0, 1, 1, 1000, 42921, 4, 2, 24548, 29498, 38, 1, 898148, 27279, 1, 51775, 558, 1, 39184, 1000, 60594, 1, 141895, 32, 83150, 32, 15299, 32, 76049, 1, 13169, 4, 22100, 10, 28999, 74, 1, 28999, 74, 1, 43285, 552, 1, 44749, 541, 1, 33852, 32, 68246, 32, 72362, 32, 7243, 32, 7391, 32, 11546, 32, 85848, 228465, 122, 0, 1, 1, 90434, 519, 0, 1, 74433, 32, 85848, 228465, 122, 0, 1, 1, 85848, 228465, 122, 0, 1, 1, 955506, 213312, 0, 2, 270652, 22588, 4, 1457325, 64566, 4, 20467, 1, 4, 0, 141992, 32, 100788, 420, 1, 1, 81663, 32, 59498, 32, 20142, 32, 24588, 32, 20744, 32, 25933, 32, 24623, 32, 43053543, 10, 53384111, 14333, 10, 43574283, 26308, 10])),
	plutusV3: $elm$core$Maybe$Just(
		_List_fromArray(
			[100788, 420, 1, 1, 1000, 173, 0, 1, 1000, 59957, 4, 1, 11183, 32, 201305, 8356, 4, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 16000, 100, 100, 100, 16000, 100, 94375, 32, 132994, 32, 61462, 4, 72010, 178, 0, 1, 22151, 32, 91189, 769, 4, 2, 85848, 123203, 7305, -900, 1716, 549, 57, 85848, 0, 1, 1, 1000, 42921, 4, 2, 24548, 29498, 38, 1, 898148, 27279, 1, 51775, 558, 1, 39184, 1000, 60594, 1, 141895, 32, 83150, 32, 15299, 32, 76049, 1, 13169, 4, 22100, 10, 28999, 74, 1, 28999, 74, 1, 43285, 552, 1, 44749, 541, 1, 33852, 32, 68246, 32, 72362, 32, 7243, 32, 7391, 32, 11546, 32, 85848, 123203, 7305, -900, 1716, 549, 57, 85848, 0, 1, 90434, 519, 0, 1, 74433, 32, 85848, 123203, 7305, -900, 1716, 549, 57, 85848, 0, 1, 1, 85848, 123203, 7305, -900, 1716, 549, 57, 85848, 0, 1, 955506, 213312, 0, 2, 270652, 22588, 4, 1457325, 64566, 4, 20467, 1, 4, 0, 141992, 32, 100788, 420, 1, 1, 81663, 32, 59498, 32, 20142, 32, 24588, 32, 20744, 32, 25933, 32, 24623, 32, 43053543, 10, 53384111, 14333, 10, 43574283, 26308, 10, 16000, 100, 16000, 100, 962335, 18, 2780678, 6, 442008, 1, 52538055, 3756, 18, 267929, 18, 76433006, 8868, 18, 52948122, 18, 1995836, 36, 3227919, 12, 901022, 1, 166917843, 4307, 36, 284546, 36, 158221314, 26549, 36, 74698472, 36, 333849714, 1, 254006273, 72, 2174038, 72, 2261318, 64571, 4, 207616, 8310, 4, 1293828, 28716, 63, 0, 1, 1006041, 43623, 251, 0, 1, 100181, 726, 719, 0, 1, 100181, 726, 719, 0, 1, 100181, 726, 719, 0, 1, 107878, 680, 0, 1, 95336, 1, 281145, 18848, 0, 1, 180194, 159, 1, 1, 158519, 8942, 0, 1, 159378, 8813, 0, 1, 107490, 3298, 1, 106057, 655, 1, 1964219, 24520, 3]))
};
var $author$project$Cardano$TxIntent$emptyGovernanceState = {guardrailsScript: $elm$core$Maybe$Nothing, lastEnactedCommitteeAction: $elm$core$Maybe$Nothing, lastEnactedConstitutionAction: $elm$core$Maybe$Nothing, lastEnactedHardForkAction: $elm$core$Maybe$Nothing, lastEnactedProtocolParamUpdateAction: $elm$core$Maybe$Nothing};
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $author$project$Cardano$Utxo$refDictFromList = $turboMaCk$any_dict$Dict$Any$fromList(
	function (ref) {
		return _Utils_Tuple2(
			$author$project$Bytes$Comparable$toHex(ref.transactionId),
			ref.outputIndex);
	});
var $author$project$Cardano$Transaction$allInputs = function (tx) {
	return $author$project$Cardano$Utxo$refDictFromList(
		A2(
			$elm$core$List$map,
			function (ref) {
				return _Utils_Tuple2(ref, _Utils_Tuple0);
			},
			$elm$core$List$concat(
				_List_fromArray(
					[tx.body.inputs, tx.body.collateral, tx.body.referenceInputs]))));
};
var $turboMaCk$any_dict$Dict$Any$empty = function (toKey) {
	return $turboMaCk$any_dict$Dict$Any$AnyDict(
		{dict: $elm$core$Dict$empty, toKey: toKey});
};
var $author$project$Cardano$Utxo$emptyRefDict = $turboMaCk$any_dict$Dict$Any$empty(
	function (ref) {
		return _Utils_Tuple2(
			$author$project$Bytes$Comparable$toHex(ref.transactionId),
			ref.outputIndex);
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$runKeepState = F2(
	function (_v0, input) {
		var decoder = _v0.a;
		var dec = decoder(
			{input: input, offset: 0});
		return A2($elm$bytes$Bytes$Decode$decode, dec, input);
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$decode = F2(
	function (decoder, input) {
		return A2(
			$elm$core$Maybe$map,
			function (_v0) {
				var value = _v0.b;
				return value;
			},
			A2($elm_toulouse$cbor$Bytes$Decode$Branchable$runKeepState, decoder, input));
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$andThen = F2(
	function (callback, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var newOffset = _v1.a;
					var a = _v1.b;
					var _v2 = callback(a);
					var decodeB = _v2.a;
					return A2(decodeB, bites, newOffset);
				}));
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$andThen = F2(
	function (thenB, _v0) {
		var decoderA = _v0.a;
		return $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder(
			function (state) {
				return A2(
					$elm$bytes$Bytes$Decode$andThen,
					function (_v1) {
						var newState = _v1.a;
						var a = _v1.b;
						var _v2 = thenB(a);
						var decoderB = _v2.a;
						return decoderB(newState);
					},
					decoderA(state));
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$runDecoder = function (_v0) {
	var consumeNext = _v0.a;
	var processNext = _v0.b;
	return A2($elm_toulouse$cbor$Bytes$Decode$Branchable$andThen, processNext, consumeNext);
};
var $elm_toulouse$cbor$Cbor$Decode$decode = function (d) {
	return $elm_toulouse$cbor$Bytes$Decode$Branchable$decode(
		$elm_toulouse$cbor$Cbor$Decode$runDecoder(d));
};
var $author$project$Cardano$Gov$encodeCostModels = A2(
	$elm_toulouse$cbor$Cbor$Encode$record,
	$elm_toulouse$cbor$Cbor$Encode$int,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$fields,
		A2(
			$elm$core$Basics$composeR,
			A3(
				$elm_toulouse$cbor$Cbor$Encode$optionalField,
				0,
				$elm_toulouse$cbor$Cbor$Encode$list($elm_toulouse$cbor$Cbor$Encode$int),
				function ($) {
					return $.plutusV1;
				}),
			A2(
				$elm$core$Basics$composeR,
				A3(
					$elm_toulouse$cbor$Cbor$Encode$optionalField,
					1,
					$elm_toulouse$cbor$Cbor$Encode$list($elm_toulouse$cbor$Cbor$Encode$int),
					function ($) {
						return $.plutusV2;
					}),
				A3(
					$elm_toulouse$cbor$Cbor$Encode$optionalField,
					2,
					$elm_toulouse$cbor$Cbor$Encode$list($elm_toulouse$cbor$Cbor$Encode$int),
					function ($) {
						return $.plutusV3;
					})))));
var $author$project$Cardano$Uplc$evalScriptsCostsKernel = function (_v0) {
	return evalScriptsCostsKernel(_v0);
};
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $author$project$Cardano$Redeemer$Redeemer = F4(
	function (tag, index, data, exUnits) {
		return {data: data, exUnits: exUnits, index: index, tag: tag};
	});
var $elm_toulouse$cbor$Cbor$Decode$Decoder = F2(
	function (a, b) {
		return {$: 'Decoder', a: a, b: b};
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$map = F2(
	function (f, _v0) {
		var decoder = _v0.a;
		return $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder(
			function (state) {
				return A2(
					$elm$bytes$Bytes$Decode$map,
					$elm$core$Tuple$mapSecond(f),
					decoder(state));
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$map = F2(
	function (fn, _v0) {
		var consumeNext = _v0.a;
		var processNext = _v0.b;
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$Decoder,
			consumeNext,
			A2(
				$elm$core$Basics$composeR,
				processNext,
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map(fn)));
	});
var $elm_toulouse$cbor$Cbor$Decode$Definite = function (a) {
	return {$: 'Definite', a: a};
};
var $elm_toulouse$cbor$Cbor$Decode$Indefinite = function (a) {
	return {$: 'Indefinite', a: a};
};
var $elm_toulouse$cbor$Cbor$Decode$step = F3(
	function (st, k, next) {
		return {
			decodeKey: st.decodeKey,
			k: k,
			size: function () {
				var _v0 = st.size;
				if (_v0.$ === 'Indefinite') {
					var done = _v0.a;
					return $elm_toulouse$cbor$Cbor$Decode$Indefinite(done);
				} else {
					var sz = _v0.a;
					return $elm_toulouse$cbor$Cbor$Decode$Definite(
						sz - function () {
							if (k.$ === 'Nothing') {
								return 1;
							} else {
								return 0;
							}
						}());
				}
			}(),
			steps: st.steps(next)
		};
	});
var $elm_toulouse$cbor$Cbor$Decode$TupleStep = function (a) {
	return {$: 'TupleStep', a: a};
};
var $elm_toulouse$cbor$Cbor$Decode$andThen = F2(
	function (fn, _v0) {
		var consumeNext = _v0.a;
		var processNext = _v0.b;
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$Decoder,
			consumeNext,
			A2(
				$elm$core$Basics$composeR,
				processNext,
				$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen(
					A2($elm$core$Basics$composeR, fn, $elm_toulouse$cbor$Cbor$Decode$runDecoder))));
	});
var $elm$bytes$Bytes$Decode$fail = $elm$bytes$Bytes$Decode$Decoder(_Bytes_decodeFailure);
var $elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder = F2(
	function (decoder, byteLength) {
		return $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder(
			function (state) {
				return A2(
					$elm$bytes$Bytes$Decode$map,
					function (v) {
						return _Utils_Tuple2(
							{input: state.input, offset: state.offset + byteLength},
							v);
					},
					decoder);
			});
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$fail = A2($elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder, $elm$bytes$Bytes$Decode$fail, 0);
var $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8 = A2($elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder, $elm$bytes$Bytes$Decode$unsignedInt8, 1);
var $elm_toulouse$cbor$Cbor$Decode$fail = A2(
	$elm_toulouse$cbor$Cbor$Decode$Decoder,
	$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
	$elm$core$Basics$always($elm_toulouse$cbor$Bytes$Decode$Branchable$fail));
var $elm_toulouse$cbor$Cbor$Decode$withTupleStep = F2(
	function (_with, st) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$andThen,
			function (inner) {
				if (inner.$ === 'TupleStep') {
					var t = inner.a;
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$map,
						$elm_toulouse$cbor$Cbor$Decode$TupleStep,
						_with(t));
				} else {
					return $elm_toulouse$cbor$Cbor$Decode$fail;
				}
			},
			st);
	});
var $elm_toulouse$cbor$Cbor$Decode$elem = function (v) {
	return $elm_toulouse$cbor$Cbor$Decode$withTupleStep(
		function (st) {
			return A2(
				$elm_toulouse$cbor$Cbor$Decode$map,
				A2($elm_toulouse$cbor$Cbor$Decode$step, st, $elm$core$Maybe$Nothing),
				v);
		});
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed = function (val) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$succeed(val),
		0);
};
var $elm_toulouse$cbor$Cbor$Decode$succeed = function (a) {
	var absurd = 28 << 5;
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$Decoder,
		$elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(absurd),
		$elm$core$Basics$always(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(a)));
};
var $elm_toulouse$cbor$Cbor$Decode$elems = $elm_toulouse$cbor$Cbor$Decode$succeed;
var $author$project$Cardano$Redeemer$ExUnits = F2(
	function (mem, steps) {
		return {mem: mem, steps: steps};
	});
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm_toulouse$cbor$Bytes$Decode$Branchable$map2 = F3(
	function (f, decoderX, decoderY) {
		return A2(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
			function (x) {
				return A2(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
					function (y) {
						return A2(f, x, y);
					},
					decoderY);
			},
			decoderX);
	});
var $elm$bytes$Bytes$Decode$unsignedInt16 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u16(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt16 = function (bo) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$unsignedInt16(bo),
		2);
};
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32 = function (bo) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$unsignedInt32(bo),
		4);
};
var $elm_toulouse$cbor$Cbor$Decode$unsignedInt53 = function (e) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
		function (up) {
			return (up > 2097151) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$fail : $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(up * 4294967296);
		},
		$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32(e));
};
var $elm_toulouse$cbor$Cbor$Decode$unsigned = function (a) {
	return (a < 24) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(a) : ((a === 24) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8 : ((a === 25) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt16($elm$bytes$Bytes$BE) : ((a === 26) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32($elm$bytes$Bytes$BE) : ((a === 27) ? A3(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$map2,
		$elm$core$Basics$add,
		$elm_toulouse$cbor$Cbor$Decode$unsignedInt53($elm$bytes$Bytes$BE),
		$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32($elm$bytes$Bytes$BE)) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail))));
};
var $elm_toulouse$cbor$Cbor$Decode$int = A2(
	$elm_toulouse$cbor$Cbor$Decode$Decoder,
	$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
	function (a) {
		return (!(a >> 5)) ? $elm_toulouse$cbor$Cbor$Decode$unsigned(a) : (((a >> 5) === 1) ? A2(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
			function (x) {
				return (-x) - 1;
			},
			$elm_toulouse$cbor$Cbor$Decode$unsigned(a & 31)) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail);
	});
var $elm_toulouse$cbor$Cbor$Decode$payloadForMajor = F2(
	function (majorType, _byte) {
		return _Utils_eq(_byte >> 5, majorType) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(_byte & 31) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail;
	});
var $elm_toulouse$cbor$Cbor$Decode$consumeNextMajor = F2(
	function (majorType, processNext) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$Decoder,
			$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$payloadForMajor(majorType),
				$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen(processNext)));
	});
var $elm_toulouse$cbor$Cbor$Decode$tBEGIN = 31;
var $elm_toulouse$cbor$Cbor$Decode$tBREAK = 255;
var $elm_toulouse$cbor$Cbor$Decode$tuple = F2(
	function (steps, decodeTuple) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
			4,
			function (tFirst) {
				return _Utils_eq(tFirst, $elm_toulouse$cbor$Cbor$Decode$tBEGIN) ? $elm_toulouse$cbor$Cbor$Decode$runDecoder(
					A2(
						$elm_toulouse$cbor$Cbor$Decode$andThen,
						function (result) {
							if (result.$ === 'RecordStep') {
								return $elm_toulouse$cbor$Cbor$Decode$fail;
							} else {
								var st = result.a;
								var _v1 = st.size;
								if ((_v1.$ === 'Indefinite') && _v1.a) {
									return $elm_toulouse$cbor$Cbor$Decode$succeed(st.steps);
								} else {
									return A2(
										$elm_toulouse$cbor$Cbor$Decode$Decoder,
										$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
										function (tLast) {
											return _Utils_eq(tLast, $elm_toulouse$cbor$Cbor$Decode$tBREAK) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(st.steps) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail;
										});
								}
							}
						},
						decodeTuple(
							$elm_toulouse$cbor$Cbor$Decode$TupleStep(
								{
									decodeKey: $elm_toulouse$cbor$Cbor$Decode$fail,
									k: $elm$core$Maybe$Nothing,
									size: $elm_toulouse$cbor$Cbor$Decode$Indefinite(false),
									steps: steps
								})))) : A2(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
					function (result) {
						if (result.$ === 'RecordStep') {
							return $elm_toulouse$cbor$Bytes$Decode$Branchable$fail;
						} else {
							var st = result.a;
							return $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(st.steps);
						}
					},
					A2(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
						function (sz) {
							return $elm_toulouse$cbor$Cbor$Decode$runDecoder(
								decodeTuple(
									$elm_toulouse$cbor$Cbor$Decode$TupleStep(
										{
											decodeKey: $elm_toulouse$cbor$Cbor$Decode$fail,
											k: $elm$core$Maybe$Nothing,
											size: $elm_toulouse$cbor$Cbor$Decode$Definite(sz),
											steps: steps
										})));
						},
						$elm_toulouse$cbor$Cbor$Decode$unsigned(tFirst)));
			});
	});
var $author$project$Cardano$Redeemer$exUnitsFromCbor = A2(
	$elm_toulouse$cbor$Cbor$Decode$tuple,
	$author$project$Cardano$Redeemer$ExUnits,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$elems,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$int),
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$int))));
var $elm_toulouse$cbor$Cbor$CborBool = function (a) {
	return {$: 'CborBool', a: a};
};
var $elm_toulouse$cbor$Cbor$CborBytes = function (a) {
	return {$: 'CborBytes', a: a};
};
var $elm_toulouse$cbor$Cbor$CborFloat = function (a) {
	return {$: 'CborFloat', a: a};
};
var $elm_toulouse$cbor$Cbor$CborInt32 = function (a) {
	return {$: 'CborInt32', a: a};
};
var $elm_toulouse$cbor$Cbor$CborList = function (a) {
	return {$: 'CborList', a: a};
};
var $elm_toulouse$cbor$Cbor$CborMap = function (a) {
	return {$: 'CborMap', a: a};
};
var $elm_toulouse$cbor$Cbor$CborNull = {$: 'CborNull'};
var $elm_toulouse$cbor$Cbor$CborString = function (a) {
	return {$: 'CborString', a: a};
};
var $elm_toulouse$cbor$Cbor$CborTag = F2(
	function (a, b) {
		return {$: 'CborTag', a: a, b: b};
	});
var $elm_toulouse$cbor$Cbor$CborUndefined = {$: 'CborUndefined'};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$loop = F2(
	function (initialState, callback) {
		return $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder(
			function (initialDecoderState) {
				var makeDecoderStep = F2(
					function (decoderState, step) {
						if (step.$ === 'Loop') {
							var state = step.a;
							return $elm$bytes$Bytes$Decode$Loop(
								_Utils_Tuple2(state, decoderState));
						} else {
							var a = step.a;
							return $elm$bytes$Bytes$Decode$Done(
								_Utils_Tuple2(decoderState, a));
						}
					});
				var loopStep = function (_v2) {
					var state = _v2.a;
					var decoderState = _v2.b;
					var _v0 = callback(state);
					var decoder = _v0.a;
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (_v1) {
							var newDecoderState = _v1.a;
							var step = _v1.b;
							return A2(makeDecoderStep, newDecoderState, step);
						},
						decoder(decoderState));
				};
				return A2(
					$elm$bytes$Bytes$Decode$loop,
					_Utils_Tuple2(initialState, initialDecoderState),
					loopStep);
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$foldable = F3(
	function (majorType, consumeNext, processNext) {
		var indef = function (es) {
			return A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
				function (a) {
					return _Utils_eq(a, $elm_toulouse$cbor$Cbor$Decode$tBREAK) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
						$elm$bytes$Bytes$Decode$Done(
							$elm$core$List$reverse(es))) : A2(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
						function (e) {
							return $elm$bytes$Bytes$Decode$Loop(
								A2($elm$core$List$cons, e, es));
						},
						processNext(a));
				},
				consumeNext);
		};
		var def = function (_v0) {
			var n = _v0.a;
			var es = _v0.b;
			return (n <= 0) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
				$elm$bytes$Bytes$Decode$Done(
					$elm$core$List$reverse(es))) : A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				function (e) {
					return $elm$bytes$Bytes$Decode$Loop(
						_Utils_Tuple2(
							n - 1,
							A2($elm$core$List$cons, e, es)));
				},
				A2($elm_toulouse$cbor$Bytes$Decode$Branchable$andThen, processNext, consumeNext));
		};
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
			majorType,
			function (a) {
				return _Utils_eq(a, $elm_toulouse$cbor$Cbor$Decode$tBEGIN) ? A2($elm_toulouse$cbor$Bytes$Decode$Branchable$loop, _List_Nil, indef) : A2(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
					function (n) {
						return A2(
							$elm_toulouse$cbor$Bytes$Decode$Branchable$loop,
							_Utils_Tuple2(n, _List_Nil),
							def);
					},
					$elm_toulouse$cbor$Cbor$Decode$unsigned(a));
			});
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm_toulouse$cbor$Cbor$Decode$associativeList = F2(
	function (_v0, value) {
		var consumeNextKey = _v0.a;
		var processNextKey = _v0.b;
		return A3(
			$elm_toulouse$cbor$Cbor$Decode$foldable,
			5,
			consumeNextKey,
			function (key) {
				return A3(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$map2,
					$elm$core$Tuple$pair,
					processNextKey(key),
					$elm_toulouse$cbor$Cbor$Decode$runDecoder(value));
			});
	});
var $elm$bytes$Bytes$Decode$bytes = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_bytes(n));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$bytes = function (count) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$bytes(count),
		count);
};
var $elm_toulouse$cbor$Cbor$Decode$chunks = F3(
	function (majorType, chunk, mappend) {
		var indef = function (es) {
			return A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
				function (a) {
					return _Utils_eq(a, $elm_toulouse$cbor$Cbor$Decode$tBREAK) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
						$elm$bytes$Bytes$Decode$Done(
							mappend(
								$elm$core$List$reverse(es)))) : A2(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
						function (e) {
							return $elm$bytes$Bytes$Decode$Loop(
								A2($elm$core$List$cons, e, es));
						},
						A2(
							$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
							chunk,
							A2(
								$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
								$elm_toulouse$cbor$Cbor$Decode$unsigned,
								A2($elm_toulouse$cbor$Cbor$Decode$payloadForMajor, majorType, a))));
				},
				$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8);
		};
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
			majorType,
			function (a) {
				return _Utils_eq(a, $elm_toulouse$cbor$Cbor$Decode$tBEGIN) ? A2($elm_toulouse$cbor$Bytes$Decode$Branchable$loop, _List_Nil, indef) : A2(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
					chunk,
					$elm_toulouse$cbor$Cbor$Decode$unsigned(a));
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$bytes = A3(
	$elm_toulouse$cbor$Cbor$Decode$chunks,
	2,
	$elm_toulouse$cbor$Bytes$Decode$Branchable$bytes,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($elm$bytes$Bytes$Encode$bytes),
		A2($elm$core$Basics$composeR, $elm$bytes$Bytes$Encode$sequence, $elm$bytes$Bytes$Encode$encode)));
var $elm$bytes$Bytes$Decode$float32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_f32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm_toulouse$float16$Bytes$Floating$Decode$fromUnsignedInt32 = A2(
	$elm$core$Basics$composeR,
	$elm$bytes$Bytes$Encode$unsignedInt32($elm$bytes$Bytes$BE),
	A2(
		$elm$core$Basics$composeR,
		$elm$bytes$Bytes$Encode$encode,
		A2(
			$elm$core$Basics$composeR,
			$elm$bytes$Bytes$Decode$decode(
				$elm$bytes$Bytes$Decode$float32($elm$bytes$Bytes$BE)),
			$elm$core$Maybe$withDefault(0 / 0))));
var $elm_toulouse$float16$Bytes$Floating$Decode$iEEE754 = function (_v0) {
	var m = _v0.m;
	var e = _v0.e;
	var s = _v0.s;
	return m | ((e << 23) | (s << 31));
};
var $elm_toulouse$float16$Bytes$Floating$Decode$renormalize = function (_v0) {
	renormalize:
	while (true) {
		var m = _v0.m;
		var e = _v0.e;
		var s = _v0.s;
		var _v1 = 1024 & m;
		if (!_v1) {
			var $temp$_v0 = {e: e - 1, m: m << 1, s: s};
			_v0 = $temp$_v0;
			continue renormalize;
		} else {
			return {e: e + 113, m: (-1025) & m, s: s};
		}
	}
};
var $elm_toulouse$float16$Bytes$Floating$Decode$halfToFloat = function (x) {
	var s = 1 & (x >> 15);
	var m = 1023 & x;
	var e = 31 & (x >> 10);
	return (!e) ? ((!m) ? (s << 31) : $elm_toulouse$float16$Bytes$Floating$Decode$iEEE754(
		$elm_toulouse$float16$Bytes$Floating$Decode$renormalize(
			{e: e, m: m, s: s}))) : ((e === 31) ? $elm_toulouse$float16$Bytes$Floating$Decode$iEEE754(
		{e: 255, m: m << 13, s: s}) : $elm_toulouse$float16$Bytes$Floating$Decode$iEEE754(
		{e: e + 112, m: m << 13, s: s}));
};
var $elm_toulouse$float16$Bytes$Floating$Decode$float16 = function (endian) {
	return A2(
		$elm$bytes$Bytes$Decode$map,
		A2($elm$core$Basics$composeR, $elm_toulouse$float16$Bytes$Floating$Decode$halfToFloat, $elm_toulouse$float16$Bytes$Floating$Decode$fromUnsignedInt32),
		$elm$bytes$Bytes$Decode$unsignedInt16(endian));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$float32 = function (bo) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$float32(bo),
		4);
};
var $elm$bytes$Bytes$Decode$float64 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_f64(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$float64 = function (bo) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$float64(bo),
		8);
};
var $elm_toulouse$cbor$Cbor$Decode$float = A2(
	$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
	7,
	function (a) {
		return (a === 25) ? A2(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
			$elm_toulouse$float16$Bytes$Floating$Decode$float16($elm$bytes$Bytes$BE),
			2) : ((a === 26) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$float32($elm$bytes$Bytes$BE) : ((a === 27) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$float64($elm$bytes$Bytes$BE) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail));
	});
var $elm_toulouse$cbor$Cbor$Decode$int64 = function (major) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
		function (_v0) {
			var msb = _v0.a;
			var lsb = _v0.b;
			return (!major) ? _Utils_Tuple2(msb, lsb) : ((lsb === 4294967295) ? _Utils_Tuple2(-(msb + 1), 0) : _Utils_Tuple2(-msb, lsb + 1));
		},
		A3(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$map2,
			$elm$core$Tuple$pair,
			$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32($elm$bytes$Bytes$BE),
			$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt32($elm$bytes$Bytes$BE)));
};
var $elm_toulouse$cbor$Cbor$Decode$list = function (_v0) {
	var consumeNext = _v0.a;
	var processNext = _v0.b;
	return A3($elm_toulouse$cbor$Cbor$Decode$foldable, 4, consumeNext, processNext);
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$bytes$Bytes$Decode$string = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_string(n));
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$string = function (byteCount) {
	return A2(
		$elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder,
		$elm$bytes$Bytes$Decode$string(byteCount),
		byteCount);
};
var $elm_toulouse$cbor$Cbor$Decode$string = A3($elm_toulouse$cbor$Cbor$Decode$chunks, 3, $elm_toulouse$cbor$Bytes$Decode$Branchable$string, $elm$core$String$concat);
var $elm_toulouse$cbor$Cbor$Tag$Base16Conversion = {$: 'Base16Conversion'};
var $elm_toulouse$cbor$Cbor$Tag$Base64 = {$: 'Base64'};
var $elm_toulouse$cbor$Cbor$Tag$Base64Conversion = {$: 'Base64Conversion'};
var $elm_toulouse$cbor$Cbor$Tag$Base64Url = {$: 'Base64Url'};
var $elm_toulouse$cbor$Cbor$Tag$Base64UrlConversion = {$: 'Base64UrlConversion'};
var $elm_toulouse$cbor$Cbor$Tag$BigFloat = {$: 'BigFloat'};
var $elm_toulouse$cbor$Cbor$Tag$DecimalFraction = {$: 'DecimalFraction'};
var $elm_toulouse$cbor$Cbor$Tag$EpochDateTime = {$: 'EpochDateTime'};
var $elm_toulouse$cbor$Cbor$Tag$IsCbor = {$: 'IsCbor'};
var $elm_toulouse$cbor$Cbor$Tag$Mime = {$: 'Mime'};
var $elm_toulouse$cbor$Cbor$Tag$NegativeBigNum = {$: 'NegativeBigNum'};
var $elm_toulouse$cbor$Cbor$Tag$Regex = {$: 'Regex'};
var $elm_toulouse$cbor$Cbor$Tag$StandardDateTime = {$: 'StandardDateTime'};
var $elm_toulouse$cbor$Cbor$Tag$Unknown = function (a) {
	return {$: 'Unknown', a: a};
};
var $elm_toulouse$cbor$Cbor$Tag$Uri = {$: 'Uri'};
var $elm_toulouse$cbor$Cbor$Decode$tag = A2(
	$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
	6,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$unsigned,
		$elm_toulouse$cbor$Bytes$Decode$Branchable$map(
			function (t) {
				switch (t) {
					case 0:
						return $elm_toulouse$cbor$Cbor$Tag$StandardDateTime;
					case 1:
						return $elm_toulouse$cbor$Cbor$Tag$EpochDateTime;
					case 2:
						return $elm_toulouse$cbor$Cbor$Tag$PositiveBigNum;
					case 3:
						return $elm_toulouse$cbor$Cbor$Tag$NegativeBigNum;
					case 4:
						return $elm_toulouse$cbor$Cbor$Tag$DecimalFraction;
					case 5:
						return $elm_toulouse$cbor$Cbor$Tag$BigFloat;
					case 21:
						return $elm_toulouse$cbor$Cbor$Tag$Base64UrlConversion;
					case 22:
						return $elm_toulouse$cbor$Cbor$Tag$Base64Conversion;
					case 23:
						return $elm_toulouse$cbor$Cbor$Tag$Base16Conversion;
					case 24:
						return $elm_toulouse$cbor$Cbor$Tag$Cbor;
					case 32:
						return $elm_toulouse$cbor$Cbor$Tag$Uri;
					case 33:
						return $elm_toulouse$cbor$Cbor$Tag$Base64Url;
					case 34:
						return $elm_toulouse$cbor$Cbor$Tag$Base64;
					case 35:
						return $elm_toulouse$cbor$Cbor$Tag$Regex;
					case 36:
						return $elm_toulouse$cbor$Cbor$Tag$Mime;
					case 55799:
						return $elm_toulouse$cbor$Cbor$Tag$IsCbor;
					default:
						return $elm_toulouse$cbor$Cbor$Tag$Unknown(t);
				}
			})));
function $elm_toulouse$cbor$Cbor$Decode$cyclic$any() {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$Decoder,
		$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
		function (a) {
			var payload = a & 31;
			var majorType = a >> 5;
			var apply = F2(
				function (_v0, i) {
					var processNext = _v0.b;
					return processNext(i);
				});
			return (!majorType) ? ((payload === 27) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborInt64,
				$elm_toulouse$cbor$Cbor$Decode$int64(majorType)) : A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborInt32,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$int, a))) : ((majorType === 1) ? ((payload === 27) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborInt64,
				$elm_toulouse$cbor$Cbor$Decode$int64(majorType)) : A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborInt32,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$int, a))) : ((majorType === 2) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborBytes,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$bytes, a)) : ((majorType === 3) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborString,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$string, a)) : ((majorType === 4) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborList,
				A2(
					apply,
					$elm_toulouse$cbor$Cbor$Decode$list(
						$elm_toulouse$cbor$Cbor$Decode$cyclic$any()),
					a)) : ((majorType === 5) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborMap,
				A2(
					apply,
					A2(
						$elm_toulouse$cbor$Cbor$Decode$associativeList,
						$elm_toulouse$cbor$Cbor$Decode$cyclic$any(),
						$elm_toulouse$cbor$Cbor$Decode$cyclic$any()),
					a)) : ((majorType === 6) ? A3(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map2,
				$elm_toulouse$cbor$Cbor$CborTag,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$tag, a),
				$elm_toulouse$cbor$Cbor$Decode$runDecoder(
					$elm_toulouse$cbor$Cbor$Decode$cyclic$any())) : ((payload === 20) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
				$elm_toulouse$cbor$Cbor$CborBool(false)) : ((payload === 21) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
				$elm_toulouse$cbor$Cbor$CborBool(true)) : ((payload === 22) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed($elm_toulouse$cbor$Cbor$CborNull) : ((payload === 23) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed($elm_toulouse$cbor$Cbor$CborUndefined) : (A2(
				$elm$core$List$member,
				payload,
				_List_fromArray(
					[25, 26, 27])) ? A2(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
				$elm_toulouse$cbor$Cbor$CborFloat,
				A2(apply, $elm_toulouse$cbor$Cbor$Decode$float, a)) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail)))))))))));
		});
}
try {
	var $elm_toulouse$cbor$Cbor$Decode$any = $elm_toulouse$cbor$Cbor$Decode$cyclic$any();
	$elm_toulouse$cbor$Cbor$Decode$cyclic$any = function () {
		return $elm_toulouse$cbor$Cbor$Decode$any;
	};
} catch ($) {
	throw 'Some top-level definitions from `Cbor.Decode` are causing infinite recursion:\n\n  ┌─────┐\n  │    any\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Cardano$Data$Int = function (a) {
	return {$: 'Int', a: a};
};
var $author$project$Cardano$Data$Map = function (a) {
	return {$: 'Map', a: a};
};
var $dwayne$elm_integer$Integer$Negative = function (a) {
	return {$: 'Negative', a: a};
};
var $dwayne$elm_integer$Integer$Positive = function (a) {
	return {$: 'Positive', a: a};
};
var $dwayne$elm_integer$Integer$Zero = {$: 'Zero'};
var $dwayne$elm_natural$Natural$add = F2(
	function (_v0, _v1) {
		var xsLE = _v0.a;
		var ysLE = _v1.a;
		return $dwayne$elm_natural$Natural$Natural(
			A4($dwayne$elm_natural$Natural$addHelper, xsLE, ysLE, 0, _List_Nil));
	});
var $dwayne$elm_natural$Natural$sub = F2(
	function (_v0, _v1) {
		var xsLE = _v0.a;
		var ysLE = _v1.a;
		return $dwayne$elm_natural$Natural$Natural(
			A4($dwayne$elm_natural$Natural$subHelper, xsLE, ysLE, 0, _List_Nil));
	});
var $dwayne$elm_integer$Integer$add = F2(
	function (x, y) {
		var _v0 = _Utils_Tuple2(x, y);
		_v0$1:
		while (true) {
			switch (_v0.b.$) {
				case 'Zero':
					var _v1 = _v0.b;
					return x;
				case 'Negative':
					switch (_v0.a.$) {
						case 'Zero':
							break _v0$1;
						case 'Negative':
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Negative(
								A2($dwayne$elm_natural$Natural$add, a, b));
						default:
							var a = _v0.a.a;
							var b = _v0.b.a;
							return _Utils_eq(a, b) ? $dwayne$elm_integer$Integer$Zero : (A2($dwayne$elm_natural$Natural$isGreaterThan, b, a) ? $dwayne$elm_integer$Integer$Positive(
								A2($dwayne$elm_natural$Natural$sub, a, b)) : $dwayne$elm_integer$Integer$Negative(
								A2($dwayne$elm_natural$Natural$sub, b, a)));
					}
				default:
					switch (_v0.a.$) {
						case 'Zero':
							break _v0$1;
						case 'Negative':
							var a = _v0.a.a;
							var b = _v0.b.a;
							return _Utils_eq(a, b) ? $dwayne$elm_integer$Integer$Zero : (A2($dwayne$elm_natural$Natural$isGreaterThan, b, a) ? $dwayne$elm_integer$Integer$Negative(
								A2($dwayne$elm_natural$Natural$sub, a, b)) : $dwayne$elm_integer$Integer$Positive(
								A2($dwayne$elm_natural$Natural$sub, b, a)));
						default:
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Positive(
								A2($dwayne$elm_natural$Natural$add, a, b));
					}
			}
		}
		var _v2 = _v0.a;
		return y;
	});
var $dwayne$elm_integer$Integer$maxSafeInt = $dwayne$elm_natural$Natural$maxSafeInt;
var $dwayne$elm_integer$Integer$minSafeInt = -$dwayne$elm_integer$Integer$maxSafeInt;
var $dwayne$elm_integer$Integer$fromInt = function (x) {
	return ((_Utils_cmp($dwayne$elm_integer$Integer$minSafeInt, x) < 1) && (_Utils_cmp(x, $dwayne$elm_integer$Integer$maxSafeInt) < 1)) ? ((!x) ? $elm$core$Maybe$Just($dwayne$elm_integer$Integer$Zero) : ((x > 0) ? A2(
		$elm$core$Maybe$map,
		$dwayne$elm_integer$Integer$Positive,
		$dwayne$elm_natural$Natural$fromInt(x)) : A2(
		$elm$core$Maybe$map,
		$dwayne$elm_integer$Integer$Negative,
		$dwayne$elm_natural$Natural$fromInt(-x)))) : $elm$core$Maybe$Nothing;
};
var $dwayne$elm_integer$Integer$fromSafeInt = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_integer$Integer$fromInt,
	$elm$core$Maybe$withDefault($dwayne$elm_integer$Integer$Zero));
var $elm_toulouse$cbor$Cbor$Negative = {$: 'Negative'};
var $elm_toulouse$cbor$Cbor$Positive = {$: 'Positive'};
var $elm_toulouse$cbor$Cbor$Decode$unsignedBytes = function (a) {
	return (a < 24) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
		$elm$bytes$Bytes$Encode$encode(
			$elm$bytes$Bytes$Encode$unsignedInt8(a))) : ((a === 24) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$bytes(1) : ((a === 25) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$bytes(2) : ((a === 26) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$bytes(4) : ((a === 27) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$bytes(8) : $elm_toulouse$cbor$Bytes$Decode$Branchable$fail))));
};
var $elm_toulouse$cbor$Cbor$Decode$bigint = function () {
	var positive = $elm_toulouse$cbor$Bytes$Decode$Branchable$map(
		function (n) {
			return _Utils_Tuple2($elm_toulouse$cbor$Cbor$Positive, n);
		});
	var negative = $elm_toulouse$cbor$Bytes$Decode$Branchable$map(
		function (n) {
			return _Utils_Tuple2($elm_toulouse$cbor$Cbor$Negative, n);
		});
	var increment = function (bs) {
		var width = $elm$bytes$Bytes$width(bs);
		return A2(
			$elm$core$Maybe$withDefault,
			$elm_toulouse$cbor$Bytes$Decode$Branchable$fail,
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$foldl,
						F2(
							function (x, _v4) {
								var done = _v4.a;
								var ys = _v4.b;
								return done ? _Utils_Tuple2(
									done,
									A2(
										$elm$core$List$cons,
										$elm$bytes$Bytes$Encode$unsignedInt8(x),
										ys)) : ((x >= 255) ? _Utils_Tuple2(
									done,
									A2(
										$elm$core$List$cons,
										$elm$bytes$Bytes$Encode$unsignedInt8(0),
										ys)) : _Utils_Tuple2(
									true,
									A2(
										$elm$core$List$cons,
										$elm$bytes$Bytes$Encode$unsignedInt8(x + 1),
										ys)));
							}),
						_Utils_Tuple2(false, _List_Nil)),
					A2(
						$elm$core$Basics$composeR,
						function (_v5) {
							var done = _v5.a;
							var xs = _v5.b;
							if (done) {
								return xs;
							} else {
								switch (width) {
									case 2:
										return A2(
											$elm$core$List$cons,
											$elm$bytes$Bytes$Encode$unsignedInt8(0),
											A2(
												$elm$core$List$cons,
												$elm$bytes$Bytes$Encode$unsignedInt8(1),
												xs));
									case 4:
										return A2(
											$elm$core$List$cons,
											$elm$bytes$Bytes$Encode$unsignedInt8(0),
											A2(
												$elm$core$List$cons,
												$elm$bytes$Bytes$Encode$unsignedInt8(0),
												A2(
													$elm$core$List$cons,
													$elm$bytes$Bytes$Encode$unsignedInt8(0),
													A2(
														$elm$core$List$cons,
														$elm$bytes$Bytes$Encode$unsignedInt8(1),
														xs))));
									default:
										return A2(
											$elm$core$List$cons,
											$elm$bytes$Bytes$Encode$unsignedInt8(1),
											xs);
								}
							}
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$bytes$Bytes$Encode$sequence,
							A2($elm$core$Basics$composeR, $elm$bytes$Bytes$Encode$encode, $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed)))),
				A2(
					$elm_toulouse$cbor$Bytes$Decode$Branchable$decode,
					A2(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$loop,
						_Utils_Tuple2(width, _List_Nil),
						function (_v3) {
							var sz = _v3.a;
							var xs = _v3.b;
							return (sz > 0) ? A2(
								$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
								function (x) {
									return $elm$bytes$Bytes$Decode$Loop(
										_Utils_Tuple2(
											sz - 1,
											A2($elm$core$List$cons, x, xs)));
								},
								$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8) : $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
								$elm$bytes$Bytes$Decode$Done(xs));
						}),
					bs)));
	};
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$Decoder,
		$elm_toulouse$cbor$Bytes$Decode$Branchable$unsignedInt8,
		function (a) {
			var _v0 = a >> 5;
			switch (_v0) {
				case 0:
					return positive(
						A2(
							$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
							$elm_toulouse$cbor$Cbor$Decode$unsignedBytes,
							A2($elm_toulouse$cbor$Cbor$Decode$payloadForMajor, 0, a)));
				case 1:
					return negative(
						A2(
							$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
							increment,
							A2(
								$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
								$elm_toulouse$cbor$Cbor$Decode$unsignedBytes,
								A2($elm_toulouse$cbor$Cbor$Decode$payloadForMajor, 1, a))));
				case 6:
					var _v1 = $elm_toulouse$cbor$Cbor$Decode$tag;
					var processTag = _v1.b;
					return A2(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
						function (t) {
							switch (t.$) {
								case 'PositiveBigNum':
									return positive(
										$elm_toulouse$cbor$Cbor$Decode$runDecoder($elm_toulouse$cbor$Cbor$Decode$bytes));
								case 'NegativeBigNum':
									return negative(
										A2(
											$elm_toulouse$cbor$Bytes$Decode$Branchable$andThen,
											increment,
											$elm_toulouse$cbor$Cbor$Decode$runDecoder($elm_toulouse$cbor$Cbor$Decode$bytes)));
								default:
									return $elm_toulouse$cbor$Bytes$Decode$Branchable$fail;
							}
						},
						processTag(a));
				default:
					return $elm_toulouse$cbor$Bytes$Decode$Branchable$fail;
			}
		});
}();
var $elm$core$String$foldl = _String_foldl;
var $dwayne$elm_natural$Natural$isBaseBChar = F2(
	function (b, _char) {
		var code = $elm$core$Char$toCode(_char);
		return ((48 <= code) && (_Utils_cmp(
			code,
			A2($elm$core$Basics$min, (48 + b) - 1, 57)) < 1)) || (((65 <= code) && (_Utils_cmp(code, (65 + b) - 11) < 1)) || ((97 <= code) && (_Utils_cmp(code, (97 + b) - 11) < 1)));
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $dwayne$elm_natural$Natural$isBaseBString = F2(
	function (b, input) {
		return (input !== '') && A2(
			$elm$core$String$all,
			$dwayne$elm_natural$Natural$isBaseBChar(b),
			input);
	});
var $dwayne$elm_natural$Natural$toBaseBDigit = F2(
	function (b, _char) {
		var code = $elm$core$Char$toCode(_char);
		return ((48 <= code) && (_Utils_cmp(
			code,
			A2($elm$core$Basics$min, (48 + b) - 1, 57)) < 1)) ? (code - 48) : (((65 <= code) && (_Utils_cmp(code, (65 + b) - 11) < 1)) ? ((code - 65) + 10) : ((code - 97) + 10));
	});
var $dwayne$elm_natural$Natural$fromBaseBString = F2(
	function (b, input) {
		return ($dwayne$elm_natural$Natural$isBaseB(b) && A2($dwayne$elm_natural$Natural$isBaseBString, b, input)) ? $elm$core$Maybe$Just(
			$dwayne$elm_natural$Natural$Natural(
				A3(
					$elm$core$String$foldl,
					F2(
						function (_char, x) {
							return A2(
								$dwayne$elm_natural$Natural$sdAdd,
								A2($dwayne$elm_natural$Natural$sdMul, x, b),
								A2($dwayne$elm_natural$Natural$toBaseBDigit, b, _char));
						}),
					_List_Nil,
					input))) : $elm$core$Maybe$Nothing;
	});
var $dwayne$elm_natural$Natural$fromHexString = $dwayne$elm_natural$Natural$fromBaseBString(16);
var $author$project$Cbor$Decode$Extra$bigNum = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (_v0) {
		var sign = _v0.a;
		var bytes = _v0.b;
		var _v1 = $dwayne$elm_natural$Natural$fromHexString(
			$author$project$Bytes$Comparable$toHex(
				$author$project$Bytes$Comparable$fromBytes(bytes)));
		if (_v1.$ === 'Just') {
			var nat = _v1.a;
			return $elm_toulouse$cbor$Cbor$Decode$succeed(
				_Utils_Tuple2(sign, nat));
		} else {
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	$elm_toulouse$cbor$Cbor$Decode$bigint);
var $dwayne$elm_natural$Natural$isZero = $elm$core$Basics$eq($dwayne$elm_natural$Natural$zero);
var $dwayne$elm_integer$Integer$fromNatural = function (n) {
	return $dwayne$elm_natural$Natural$isZero(n) ? $dwayne$elm_integer$Integer$Zero : $dwayne$elm_integer$Integer$Positive(n);
};
var $dwayne$elm_integer$Integer$negate = function (z) {
	switch (z.$) {
		case 'Positive':
			var n = z.a;
			return $dwayne$elm_integer$Integer$Negative(n);
		case 'Negative':
			var n = z.a;
			return $dwayne$elm_integer$Integer$Positive(n);
		default:
			return z;
	}
};
var $author$project$Cbor$Decode$Extra$integer = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (_v0) {
		var sign = _v0.a;
		var nat = _v0.b;
		if (sign.$ === 'Positive') {
			return $elm_toulouse$cbor$Cbor$Decode$succeed(
				$dwayne$elm_integer$Integer$fromNatural(nat));
		} else {
			return $elm_toulouse$cbor$Cbor$Decode$succeed(
				$dwayne$elm_integer$Integer$negate(
					$dwayne$elm_integer$Integer$fromNatural(nat)));
		}
	},
	$author$project$Cbor$Decode$Extra$bigNum);
var $dwayne$elm_integer$Integer$mul = F2(
	function (x, y) {
		var _v0 = _Utils_Tuple2(x, y);
		_v0$1:
		while (true) {
			switch (_v0.b.$) {
				case 'Zero':
					var _v1 = _v0.b;
					return $dwayne$elm_integer$Integer$Zero;
				case 'Negative':
					switch (_v0.a.$) {
						case 'Zero':
							break _v0$1;
						case 'Negative':
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Positive(
								A2($dwayne$elm_natural$Natural$mul, a, b));
						default:
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Negative(
								A2($dwayne$elm_natural$Natural$mul, a, b));
					}
				default:
					switch (_v0.a.$) {
						case 'Zero':
							break _v0$1;
						case 'Negative':
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Negative(
								A2($dwayne$elm_natural$Natural$mul, a, b));
						default:
							var a = _v0.a.a;
							var b = _v0.b.a;
							return $dwayne$elm_integer$Integer$Positive(
								A2($dwayne$elm_natural$Natural$mul, a, b));
					}
			}
		}
		var _v2 = _v0.a;
		return $dwayne$elm_integer$Integer$Zero;
	});
var $dwayne$elm_integer$Integer$sub = F2(
	function (x, y) {
		return A2(
			$dwayne$elm_integer$Integer$add,
			x,
			$dwayne$elm_integer$Integer$negate(y));
	});
var $author$project$Cardano$Data$unwrapCborUint = function (item) {
	switch (item.$) {
		case 'CborInt32':
			var i = item.a;
			return (i >= 0) ? $elm$core$Maybe$Just(
				$dwayne$elm_natural$Natural$fromSafeInt(i)) : $elm$core$Maybe$Nothing;
		case 'CborInt64':
			var _v1 = item.a;
			var msb = _v1.a;
			var lsb = _v1.b;
			if (msb >= 0) {
				var bigMsb = A2(
					$dwayne$elm_natural$Natural$mul,
					$dwayne$elm_natural$Natural$fromSafeInt(4294967296),
					$dwayne$elm_natural$Natural$fromSafeInt(msb));
				var bigLsb = $dwayne$elm_natural$Natural$fromSafeInt(lsb);
				return $elm$core$Maybe$Just(
					A2($dwayne$elm_natural$Natural$add, bigMsb, bigLsb));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$Data$collectCborItems = F2(
	function (st, items) {
		collectCborItems:
		while (true) {
			if (!items.b) {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(st));
			} else {
				var head = items.a;
				var tail = items.b;
				var _v13 = $author$project$Cardano$Data$fromCborItem(head);
				if (_v13.$ === 'Just') {
					var s = _v13.a;
					var $temp$st = A2($elm$core$List$cons, s, st),
						$temp$items = tail;
					st = $temp$st;
					items = $temp$items;
					continue collectCborItems;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $author$project$Cardano$Data$collectCborPairs = F2(
	function (st, pairs) {
		collectCborPairs:
		while (true) {
			if (!pairs.b) {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(st));
			} else {
				var _v10 = pairs.a;
				var left = _v10.a;
				var right = _v10.b;
				var tail = pairs.b;
				var _v11 = _Utils_Tuple2(
					$author$project$Cardano$Data$fromCborItem(left),
					$author$project$Cardano$Data$fromCborItem(right));
				if ((_v11.a.$ === 'Just') && (_v11.b.$ === 'Just')) {
					var l = _v11.a.a;
					var r = _v11.b.a;
					var $temp$st = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(l, r),
						st),
						$temp$pairs = tail;
					st = $temp$st;
					pairs = $temp$pairs;
					continue collectCborPairs;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $author$project$Cardano$Data$fromCborItem = function (item) {
	_v0$8:
	while (true) {
		switch (item.$) {
			case 'CborMap':
				var xs = item.a;
				return A2(
					$elm$core$Maybe$map,
					$author$project$Cardano$Data$Map,
					A2($author$project$Cardano$Data$collectCborPairs, _List_Nil, xs));
			case 'CborList':
				var xs = item.a;
				return A2(
					$elm$core$Maybe$map,
					$author$project$Cardano$Data$List,
					A2($author$project$Cardano$Data$collectCborItems, _List_Nil, xs));
			case 'CborInt32':
				var i = item.a;
				return $elm$core$Maybe$Just(
					$author$project$Cardano$Data$Int(
						$dwayne$elm_integer$Integer$fromSafeInt(i)));
			case 'CborInt64':
				var _v1 = item.a;
				var msb = _v1.a;
				var lsb = _v1.b;
				var bigMsb = A2(
					$dwayne$elm_integer$Integer$mul,
					$dwayne$elm_integer$Integer$fromSafeInt(4294967296),
					$dwayne$elm_integer$Integer$fromSafeInt(msb));
				var bigLsb = $dwayne$elm_integer$Integer$fromSafeInt(lsb);
				return (msb >= 0) ? $elm$core$Maybe$Just(
					$author$project$Cardano$Data$Int(
						A2($dwayne$elm_integer$Integer$add, bigMsb, bigLsb))) : $elm$core$Maybe$Just(
					$author$project$Cardano$Data$Int(
						A2($dwayne$elm_integer$Integer$sub, bigMsb, bigLsb)));
			case 'CborBytes':
				var bs = item.a;
				return $elm$core$Maybe$Just(
					$author$project$Cardano$Data$Bytes(
						$author$project$Bytes$Comparable$fromBytes(bs)));
			case 'CborTag':
				switch (item.a.$) {
					case 'PositiveBigNum':
						var _v2 = item.a;
						return A2(
							$elm$core$Maybe$map,
							$author$project$Cardano$Data$Int,
							A2(
								$elm_toulouse$cbor$Cbor$Decode$decode,
								$author$project$Cbor$Decode$Extra$integer,
								$elm_toulouse$cbor$Cbor$Encode$encode(
									$elm_toulouse$cbor$Cbor$Encode$any(item))));
					case 'NegativeBigNum':
						var _v3 = item.a;
						return A2(
							$elm$core$Maybe$map,
							$author$project$Cardano$Data$Int,
							A2(
								$elm_toulouse$cbor$Cbor$Decode$decode,
								$author$project$Cbor$Decode$Extra$integer,
								$elm_toulouse$cbor$Cbor$Encode$encode(
									$elm_toulouse$cbor$Cbor$Encode$any(item))));
					case 'Unknown':
						var n = item.a.a;
						var tagged = item.b;
						if (n === 102) {
							if (((((tagged.$ === 'CborList') && tagged.a.b) && tagged.a.b.b) && (tagged.a.b.a.$ === 'CborList')) && (!tagged.a.b.b.b)) {
								var _v5 = tagged.a;
								var ixItem = _v5.a;
								var _v6 = _v5.b;
								var fields = _v6.a.a;
								var _v7 = _Utils_Tuple2(
									$author$project$Cardano$Data$unwrapCborUint(ixItem),
									A2($author$project$Cardano$Data$collectCborItems, _List_Nil, fields));
								if ((_v7.a.$ === 'Just') && (_v7.b.$ === 'Just')) {
									var ix = _v7.a.a;
									var items = _v7.b.a;
									return $elm$core$Maybe$Just(
										A2($author$project$Cardano$Data$Constr, ix, items));
								} else {
									return $elm$core$Maybe$Nothing;
								}
							} else {
								return $elm$core$Maybe$Nothing;
							}
						} else {
							if (tagged.$ === 'CborList') {
								var fields = tagged.a;
								var ix = (n >= 1280) ? ((n - 1280) + 7) : (n - 121);
								return A2(
									$elm$core$Maybe$map,
									$author$project$Cardano$Data$Constr(
										$dwayne$elm_natural$Natural$fromSafeInt(ix)),
									A2($author$project$Cardano$Data$collectCborItems, _List_Nil, fields));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					default:
						break _v0$8;
				}
			default:
				break _v0$8;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Cardano$Data$fromCbor = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (any) {
		var _v0 = $author$project$Cardano$Data$fromCborItem(any);
		if (_v0.$ === 'Nothing') {
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		} else {
			var data = _v0.a;
			return $elm_toulouse$cbor$Cbor$Decode$succeed(data);
		}
	},
	$elm_toulouse$cbor$Cbor$Decode$any);
var $author$project$Cardano$Redeemer$Cert = {$: 'Cert'};
var $author$project$Cardano$Redeemer$Mint = {$: 'Mint'};
var $author$project$Cardano$Redeemer$Propose = {$: 'Propose'};
var $author$project$Cardano$Redeemer$Reward = {$: 'Reward'};
var $author$project$Cardano$Redeemer$Spend = {$: 'Spend'};
var $author$project$Cardano$Redeemer$Vote = {$: 'Vote'};
var $author$project$Cardano$Redeemer$tagFromCbor = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (tag) {
		switch (tag) {
			case 0:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Spend);
			case 1:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Mint);
			case 2:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Cert);
			case 3:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Reward);
			case 4:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Vote);
			case 5:
				return $elm_toulouse$cbor$Cbor$Decode$succeed($author$project$Cardano$Redeemer$Propose);
			default:
				return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	$elm_toulouse$cbor$Cbor$Decode$int);
var $author$project$Cardano$Redeemer$fromCborArray = A2(
	$elm_toulouse$cbor$Cbor$Decode$tuple,
	$author$project$Cardano$Redeemer$Redeemer,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$elems,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Redeemer$tagFromCbor),
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$int),
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Data$fromCbor),
					$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Redeemer$exUnitsFromCbor))))));
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Cardano$Uplc$jsEncodeHelper = F2(
	function (cborEncoder, v) {
		return $elm$json$Json$Encode$string(
			$author$project$Bytes$Comparable$toHex(
				$author$project$Bytes$Comparable$fromBytes(
					$elm_toulouse$cbor$Cbor$Encode$encode(
						cborEncoder(v)))));
	});
var $turboMaCk$any_dict$Dict$Any$keys = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$map($elm$core$Tuple$first),
	$turboMaCk$any_dict$Dict$Any$toList);
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $author$project$Cardano$Utxo$refAsString = function (_v0) {
	var transactionId = _v0.transactionId;
	var outputIndex = _v0.outputIndex;
	return $author$project$Bytes$Comparable$toHex(transactionId) + (' #' + $elm$core$String$fromInt(outputIndex));
};
var $turboMaCk$any_dict$Dict$Any$values = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$map($elm$core$Tuple$second),
	$turboMaCk$any_dict$Dict$Any$toList);
var $author$project$Cardano$Uplc$evalScriptsCostsRaw = F3(
	function (vmConfig, usedUtxos, txBytes) {
		var decodeRedeemer = function (redeemerHex) {
			return A2(
				$elm_toulouse$cbor$Cbor$Decode$decode,
				$author$project$Cardano$Redeemer$fromCborArray,
				$author$project$Bytes$Comparable$toBytes(
					$author$project$Bytes$Comparable$fromHexUnchecked(redeemerHex)));
		};
		var _v0 = _Utils_Tuple2(
			$turboMaCk$any_dict$Dict$Any$keys(usedUtxos),
			$turboMaCk$any_dict$Dict$Any$values(usedUtxos));
		var refs = _v0.a;
		var outputs = _v0.b;
		var jsArguments = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'tx_bytes',
					$elm$json$Json$Encode$string(
						$author$project$Bytes$Comparable$toHex(txBytes))),
					_Utils_Tuple2(
					'utxos_refs_bytes',
					A2(
						$elm$json$Json$Encode$list,
						$author$project$Cardano$Uplc$jsEncodeHelper($author$project$Cardano$Utxo$encodeOutputReference),
						refs)),
					_Utils_Tuple2(
					'utxos_outputs_bytes',
					A2(
						$elm$json$Json$Encode$list,
						$author$project$Cardano$Uplc$jsEncodeHelper($author$project$Cardano$Utxo$encodeOutput),
						outputs)),
					_Utils_Tuple2(
					'cost_mdls_bytes',
					A2($author$project$Cardano$Uplc$jsEncodeHelper, $author$project$Cardano$Gov$encodeCostModels, vmConfig.costModels)),
					_Utils_Tuple2(
					'cpu_budget',
					$elm$json$Json$Encode$int(vmConfig.budget.steps)),
					_Utils_Tuple2(
					'mem_budget',
					$elm$json$Json$Encode$int(vmConfig.budget.mem)),
					_Utils_Tuple2(
					'slot_config_zero_time',
					$elm$json$Json$Encode$int(
						$dwayne$elm_natural$Natural$toInt(vmConfig.slotConfig.zeroTime))),
					_Utils_Tuple2(
					'slot_config_zero_slot',
					$elm$json$Json$Encode$int(
						$dwayne$elm_natural$Natural$toInt(vmConfig.slotConfig.zeroSlot))),
					_Utils_Tuple2(
					'slot_config_slot_length',
					$elm$json$Json$Encode$int(vmConfig.slotConfig.slotLengthMs))
				]));
		return A2(
			$elm$core$Result$map,
			$elm$core$List$filterMap(decodeRedeemer),
			A2(
				$elm$core$Result$mapError,
				function (error) {
					var utxoRefs = A2($elm$core$List$map, $author$project$Cardano$Utxo$refAsString, refs);
					var utxoOutputs = A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Encode$encode),
							$author$project$Cardano$Utxo$encodeOutput),
						outputs);
					return A2(
						$elm$core$String$join,
						'\n\n',
						_List_fromArray(
							[
								error,
								'Here are more details to help with debugging (cbor.nemo157.com) and error reporting.',
								'The Tx that failed phase-2 evaluation is the following, CBOR-encoded:',
								$author$project$Bytes$Comparable$toHex(txBytes),
								'The UTxOs in context for the evaluation are the following:',
								'  ' + A2($elm$core$String$join, '\n  ', utxoRefs),
								'And they contain the following outputs, in the same order, CBOR-encoded:',
								'  ' + A2(
								$elm$core$String$join,
								'\n  ',
								A2($elm$core$List$map, $author$project$Bytes$Comparable$toHex, utxoOutputs))
							]));
				},
				$author$project$Cardano$Uplc$evalScriptsCostsKernel(jsArguments)));
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $turboMaCk$any_dict$Dict$Any$filter = F2(
	function (f, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2(
						$elm$core$Dict$filter,
						F2(
							function (_v1, _v2) {
								var k = _v2.a;
								var v = _v2.b;
								return A2(f, k, v);
							}),
						inner.dict)
				}));
	});
var $turboMaCk$any_dict$Dict$Any$foldl = F3(
	function (f, acc, _v0) {
		var dict = _v0.a.dict;
		return A3(
			$elm$core$Dict$foldl,
			F2(
				function (_v1, _v2) {
					var k = _v2.a;
					var v = _v2.b;
					return A2(f, k, v);
				}),
			acc,
			dict);
	});
var $turboMaCk$any_dict$Dict$Any$insert = F3(
	function (k, v, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						$elm$core$Dict$insert,
						inner.toKey(k),
						_Utils_Tuple2(k, v),
						inner.dict)
				}));
	});
var $turboMaCk$any_dict$Dict$Any$removeAll = function (_v0) {
	var inner = _v0.a;
	return $turboMaCk$any_dict$Dict$Any$AnyDict(
		{dict: $elm$core$Dict$empty, toKey: inner.toKey});
};
var $turboMaCk$any_dict$Dict$Any$filterMap = F2(
	function (f, dict) {
		return A3(
			$turboMaCk$any_dict$Dict$Any$foldl,
			F3(
				function (k, v, acc) {
					var _v0 = A2(f, k, v);
					if (_v0.$ === 'Just') {
						var newVal = _v0.a;
						return A3($turboMaCk$any_dict$Dict$Any$insert, k, newVal, acc);
					} else {
						return acc;
					}
				}),
			$turboMaCk$any_dict$Dict$Any$removeAll(dict),
			dict);
	});
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $turboMaCk$any_dict$Dict$Any$get = F2(
	function (k, _v0) {
		var toKey = _v0.a.toKey;
		var dict = _v0.a.dict;
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			A2(
				$elm$core$Dict$get,
				toKey(k),
				dict));
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Cardano$Address$credentialToCbor = function (stakeCredential) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm$core$Basics$identity,
		function () {
			if (stakeCredential.$ === 'VKeyHash') {
				var addrKeyHash = stakeCredential.a;
				return _List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(0),
						$author$project$Bytes$Comparable$toCbor(addrKeyHash)
					]);
			} else {
				var scriptHash = stakeCredential.a;
				return _List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(1),
						$author$project$Bytes$Comparable$toCbor(scriptHash)
					]);
			}
		}());
};
var $author$project$Cardano$Gov$encodeAnchor = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$string,
				function ($) {
					return $.url;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.dataHash;
				}))));
var $author$project$Cardano$Gov$encodeDrep = function (drep) {
	switch (drep.$) {
		case 'DrepCredential':
			var cred = drep.a;
			return $author$project$Cardano$Address$credentialToCbor(cred);
		case 'AlwaysAbstain':
			return $elm_toulouse$cbor$Cbor$Encode$int(2);
		default:
			return $elm_toulouse$cbor$Cbor$Encode$int(3);
	}
};
var $author$project$Cardano$Transaction$encodeRewardSource = function (source) {
	return $elm_toulouse$cbor$Cbor$Encode$int(
		function () {
			if (source.$ === 'Reserves') {
				return 0;
			} else {
				return 1;
			}
		}());
};
var $author$project$Cardano$Transaction$encodeRewardTarget = function (target) {
	if (target.$ === 'StakeCredentials') {
		var distribution = target.a;
		return A3($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Address$credentialToCbor, $author$project$Cbor$Encode$Extra$natural, distribution);
	} else {
		var n = target.a;
		return $author$project$Cbor$Encode$Extra$natural(n);
	}
};
var $author$project$Cardano$Transaction$encodeMoveInstantaneousReward = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Transaction$encodeRewardSource,
				function ($) {
					return $.source;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Transaction$encodeRewardTarget,
				function ($) {
					return $.target;
				}))));
var $author$project$Cardano$Pool$encodePoolMetadata = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$string,
				function ($) {
					return $.url;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.poolMetadataHash;
				}))));
var $author$project$Cardano$Utils$encodeRationalNumber = A2(
	$elm_toulouse$cbor$Cbor$Encode$tagged,
	$elm_toulouse$cbor$Cbor$Tag$Unknown(30),
	$elm_toulouse$cbor$Cbor$Encode$tuple(
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Encode$elems,
			A2(
				$elm$core$Basics$composeR,
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$elm_toulouse$cbor$Cbor$Encode$int,
					function ($) {
						return $.numerator;
					}),
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$elm_toulouse$cbor$Cbor$Encode$int,
					function ($) {
						return $.denominator;
					})))));
var $elm_toulouse$cbor$Cbor$Encode$maybe = F2(
	function (encodeA, m) {
		if (m.$ === 'Nothing') {
			return $elm_toulouse$cbor$Cbor$Encode$null;
		} else {
			var a = m.a;
			return encodeA(a);
		}
	});
var $author$project$Cardano$Pool$encodeRelay = function (relay) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm$core$Basics$identity,
		function () {
			switch (relay.$) {
				case 'SingleHostAddr':
					var port_ = relay.a.port_;
					var ipv4 = relay.a.ipv4;
					var ipv6 = relay.a.ipv6;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(0),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $elm_toulouse$cbor$Cbor$Encode$int, port_),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Bytes$Comparable$toCbor, ipv4),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Bytes$Comparable$toCbor, ipv6)
						]);
				case 'SingleHostName':
					var port_ = relay.a.port_;
					var dnsName = relay.a.dnsName;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(1),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $elm_toulouse$cbor$Cbor$Encode$int, port_),
							$elm_toulouse$cbor$Cbor$Encode$string(dnsName)
						]);
				default:
					var dnsName = relay.a.dnsName;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(2),
							$elm_toulouse$cbor$Cbor$Encode$string(dnsName)
						]);
			}
		}());
};
var $author$project$Cardano$Address$stakeAddressToCbor = function (stakeAddress) {
	return $author$project$Bytes$Comparable$toCbor(
		$author$project$Cardano$Address$stakeAddressToBytes(stakeAddress));
};
var $author$project$Cardano$Pool$encodeParams = function (poolParams) {
	return _List_fromArray(
		[
			$author$project$Bytes$Comparable$toCbor(poolParams.operator),
			$author$project$Bytes$Comparable$toCbor(poolParams.vrfKeyHash),
			$author$project$Cbor$Encode$Extra$natural(poolParams.pledge),
			$author$project$Cbor$Encode$Extra$natural(poolParams.cost),
			$author$project$Cardano$Utils$encodeRationalNumber(poolParams.margin),
			$author$project$Cardano$Address$stakeAddressToCbor(poolParams.rewardAccount),
			A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Bytes$Comparable$toCbor, poolParams.poolOwners),
			A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Pool$encodeRelay, poolParams.relays),
			A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Pool$encodePoolMetadata, poolParams.poolMetadata)
		]);
};
var $author$project$Cardano$Transaction$encodeCertificate = function (certificate) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm$core$Basics$identity,
		function () {
			switch (certificate.$) {
				case 'StakeRegistrationCert':
					var delegator = certificate.a.delegator;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(0),
							$author$project$Cardano$Address$credentialToCbor(delegator)
						]);
				case 'StakeDeregistrationCert':
					var delegator = certificate.a.delegator;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(1),
							$author$project$Cardano$Address$credentialToCbor(delegator)
						]);
				case 'StakeDelegationCert':
					var delegator = certificate.a.delegator;
					var poolId = certificate.a.poolId;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(2),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Bytes$Comparable$toCbor(poolId)
						]);
				case 'PoolRegistrationCert':
					var poolParams = certificate.a;
					return A2(
						$elm$core$List$cons,
						$elm_toulouse$cbor$Cbor$Encode$int(3),
						$author$project$Cardano$Pool$encodeParams(poolParams));
				case 'PoolRetirementCert':
					var poolId = certificate.a.poolId;
					var epoch = certificate.a.epoch;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(4),
							$author$project$Bytes$Comparable$toCbor(poolId),
							$author$project$Cbor$Encode$Extra$natural(epoch)
						]);
				case 'GenesisKeyDelegationCert':
					var genesisHash = certificate.a.genesisHash;
					var genesisDelegateHash = certificate.a.genesisDelegateHash;
					var vrfKeyHash = certificate.a.vrfKeyHash;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(5),
							$author$project$Bytes$Comparable$toCbor(genesisHash),
							$author$project$Bytes$Comparable$toCbor(genesisDelegateHash),
							$author$project$Bytes$Comparable$toCbor(vrfKeyHash)
						]);
				case 'MoveInstantaneousRewardsCert':
					var moveInstantaneousReward = certificate.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(6),
							$author$project$Cardano$Transaction$encodeMoveInstantaneousReward(moveInstantaneousReward)
						]);
				case 'RegCert':
					var delegator = certificate.a.delegator;
					var deposit = certificate.a.deposit;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(7),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Cbor$Encode$Extra$natural(deposit)
						]);
				case 'UnregCert':
					var delegator = certificate.a.delegator;
					var refund = certificate.a.refund;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(8),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Cbor$Encode$Extra$natural(refund)
						]);
				case 'VoteDelegCert':
					var delegator = certificate.a.delegator;
					var drep = certificate.a.drep;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(9),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Cardano$Gov$encodeDrep(drep)
						]);
				case 'StakeVoteDelegCert':
					var delegator = certificate.a.delegator;
					var poolId = certificate.a.poolId;
					var drep = certificate.a.drep;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(10),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Bytes$Comparable$toCbor(poolId),
							$author$project$Cardano$Gov$encodeDrep(drep)
						]);
				case 'StakeRegDelegCert':
					var delegator = certificate.a.delegator;
					var poolId = certificate.a.poolId;
					var deposit = certificate.a.deposit;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(11),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Bytes$Comparable$toCbor(poolId),
							$author$project$Cbor$Encode$Extra$natural(deposit)
						]);
				case 'VoteRegDelegCert':
					var delegator = certificate.a.delegator;
					var drep = certificate.a.drep;
					var deposit = certificate.a.deposit;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(12),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Cardano$Gov$encodeDrep(drep),
							$author$project$Cbor$Encode$Extra$natural(deposit)
						]);
				case 'StakeVoteRegDelegCert':
					var delegator = certificate.a.delegator;
					var poolId = certificate.a.poolId;
					var drep = certificate.a.drep;
					var deposit = certificate.a.deposit;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(13),
							$author$project$Cardano$Address$credentialToCbor(delegator),
							$author$project$Bytes$Comparable$toCbor(poolId),
							$author$project$Cardano$Gov$encodeDrep(drep),
							$author$project$Cbor$Encode$Extra$natural(deposit)
						]);
				case 'AuthCommitteeHotCert':
					var committeeColdCredential = certificate.a.committeeColdCredential;
					var committeeHotCredential = certificate.a.committeeHotCredential;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(14),
							$author$project$Cardano$Address$credentialToCbor(committeeColdCredential),
							$author$project$Cardano$Address$credentialToCbor(committeeHotCredential)
						]);
				case 'ResignCommitteeColdCert':
					var committeeColdCredential = certificate.a.committeeColdCredential;
					var anchor = certificate.a.anchor;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(15),
							$author$project$Cardano$Address$credentialToCbor(committeeColdCredential),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeAnchor, anchor)
						]);
				case 'RegDrepCert':
					var drepCredential = certificate.a.drepCredential;
					var deposit = certificate.a.deposit;
					var anchor = certificate.a.anchor;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(16),
							$author$project$Cardano$Address$credentialToCbor(drepCredential),
							$author$project$Cbor$Encode$Extra$natural(deposit),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeAnchor, anchor)
						]);
				case 'UnregDrepCert':
					var drepCredential = certificate.a.drepCredential;
					var refund = certificate.a.refund;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(17),
							$author$project$Cardano$Address$credentialToCbor(drepCredential),
							$author$project$Cbor$Encode$Extra$natural(refund)
						]);
				default:
					var drepCredential = certificate.a.drepCredential;
					var anchor = certificate.a.anchor;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(18),
							$author$project$Cardano$Address$credentialToCbor(drepCredential),
							A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeAnchor, anchor)
						]);
			}
		}());
};
var $author$project$Cardano$Transaction$encodeCertificates = $elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Transaction$encodeCertificate);
var $author$project$Cardano$Transaction$encodeInputs = function (inputs) {
	return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Utxo$encodeOutputReference, inputs);
};
var $author$project$Cardano$Address$encodeNetworkId = function (networkId) {
	return $elm_toulouse$cbor$Cbor$Encode$int(
		function () {
			if (networkId.$ === 'Testnet') {
				return 0;
			} else {
				return 1;
			}
		}());
};
var $author$project$Cardano$Transaction$encodeOutputs = function (outputs) {
	return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Utxo$encodeOutput, outputs);
};
var $author$project$Cardano$Gov$encodeActionId = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.transactionId;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$int,
				function ($) {
					return $.govActionIndex;
				}))));
var $author$project$Cardano$Gov$encodeConstitution = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Gov$encodeAnchor,
				function ($) {
					return $.anchor;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$maybe($author$project$Bytes$Comparable$toCbor),
				function ($) {
					return $.scripthash;
				}))));
var $author$project$Cardano$Gov$encodeDrepVotingThresholds = function (thresholds) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$author$project$Cardano$Utils$encodeRationalNumber,
		_List_fromArray(
			[thresholds.motionNoConfidence, thresholds.committeeNormal, thresholds.committeeNoConfidence, thresholds.updateConstitution, thresholds.hardforkInitiation, thresholds.ppNetworkGroup, thresholds.ppEconomicGroup, thresholds.ppTechnicalGroup, thresholds.ppGovernanceGroup, thresholds.treasuryWithdrawal]));
};
var $author$project$Cardano$Redeemer$encodeExUnitPrices = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Utils$encodeRationalNumber,
				function ($) {
					return $.memPrice;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Utils$encodeRationalNumber,
				function ($) {
					return $.stepPrice;
				}))));
var $author$project$Cardano$Redeemer$encodeExUnits = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$int,
				function ($) {
					return $.mem;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$int,
				function ($) {
					return $.steps;
				}))));
var $author$project$Cardano$Gov$encodePoolVotingThresholds = function (thresholds) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$author$project$Cardano$Utils$encodeRationalNumber,
		_List_fromArray(
			[thresholds.motionNoConfidence, thresholds.committeeNormal, thresholds.committeeNoConfidence, thresholds.hardforkInitiation, thresholds.securityRelevantParameter]));
};
var $author$project$Cardano$Gov$encodeProtocolParamUpdate = A2(
	$elm_toulouse$cbor$Cbor$Encode$record,
	$elm_toulouse$cbor$Cbor$Encode$int,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$fields,
		A2(
			$elm$core$Basics$composeR,
			A3(
				$elm_toulouse$cbor$Cbor$Encode$optionalField,
				0,
				$author$project$Cbor$Encode$Extra$natural,
				function ($) {
					return $.minFeeA;
				}),
			A2(
				$elm$core$Basics$composeR,
				A3(
					$elm_toulouse$cbor$Cbor$Encode$optionalField,
					1,
					$author$project$Cbor$Encode$Extra$natural,
					function ($) {
						return $.minFeeB;
					}),
				A2(
					$elm$core$Basics$composeR,
					A3(
						$elm_toulouse$cbor$Cbor$Encode$optionalField,
						2,
						$elm_toulouse$cbor$Cbor$Encode$int,
						function ($) {
							return $.maxBlockBodySize;
						}),
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							3,
							$elm_toulouse$cbor$Cbor$Encode$int,
							function ($) {
								return $.maxTransactionSize;
							}),
						A2(
							$elm$core$Basics$composeR,
							A3(
								$elm_toulouse$cbor$Cbor$Encode$optionalField,
								4,
								$elm_toulouse$cbor$Cbor$Encode$int,
								function ($) {
									return $.maxBlockHeaderSize;
								}),
							A2(
								$elm$core$Basics$composeR,
								A3(
									$elm_toulouse$cbor$Cbor$Encode$optionalField,
									5,
									$author$project$Cbor$Encode$Extra$natural,
									function ($) {
										return $.keyDeposit;
									}),
								A2(
									$elm$core$Basics$composeR,
									A3(
										$elm_toulouse$cbor$Cbor$Encode$optionalField,
										6,
										$author$project$Cbor$Encode$Extra$natural,
										function ($) {
											return $.poolDeposit;
										}),
									A2(
										$elm$core$Basics$composeR,
										A3(
											$elm_toulouse$cbor$Cbor$Encode$optionalField,
											7,
											$author$project$Cbor$Encode$Extra$natural,
											function ($) {
												return $.maximumEpoch;
											}),
										A2(
											$elm$core$Basics$composeR,
											A3(
												$elm_toulouse$cbor$Cbor$Encode$optionalField,
												8,
												$elm_toulouse$cbor$Cbor$Encode$int,
												function ($) {
													return $.desiredNumberOfStakePools;
												}),
											A2(
												$elm$core$Basics$composeR,
												A3(
													$elm_toulouse$cbor$Cbor$Encode$optionalField,
													9,
													$author$project$Cardano$Utils$encodeRationalNumber,
													function ($) {
														return $.poolPledgeInfluence;
													}),
												A2(
													$elm$core$Basics$composeR,
													A3(
														$elm_toulouse$cbor$Cbor$Encode$optionalField,
														10,
														$author$project$Cardano$Utils$encodeRationalNumber,
														function ($) {
															return $.expansionRate;
														}),
													A2(
														$elm$core$Basics$composeR,
														A3(
															$elm_toulouse$cbor$Cbor$Encode$optionalField,
															11,
															$author$project$Cardano$Utils$encodeRationalNumber,
															function ($) {
																return $.treasuryGrowthRate;
															}),
														A2(
															$elm$core$Basics$composeR,
															A3(
																$elm_toulouse$cbor$Cbor$Encode$optionalField,
																14,
																function (_v0) {
																	var v = _v0.a;
																	var m = _v0.b;
																	return A2(
																		$elm_toulouse$cbor$Cbor$Encode$list,
																		$elm_toulouse$cbor$Cbor$Encode$int,
																		_List_fromArray(
																			[v, m]));
																},
																function ($) {
																	return $.protocolVersion;
																}),
															A2(
																$elm$core$Basics$composeR,
																A3(
																	$elm_toulouse$cbor$Cbor$Encode$optionalField,
																	16,
																	$author$project$Cbor$Encode$Extra$natural,
																	function ($) {
																		return $.minPoolCost;
																	}),
																A2(
																	$elm$core$Basics$composeR,
																	A3(
																		$elm_toulouse$cbor$Cbor$Encode$optionalField,
																		17,
																		$author$project$Cbor$Encode$Extra$natural,
																		function ($) {
																			return $.adaPerUtxoByte;
																		}),
																	A2(
																		$elm$core$Basics$composeR,
																		A3(
																			$elm_toulouse$cbor$Cbor$Encode$optionalField,
																			18,
																			$author$project$Cardano$Gov$encodeCostModels,
																			function ($) {
																				return $.costModelsForScriptLanguages;
																			}),
																		A2(
																			$elm$core$Basics$composeR,
																			A3(
																				$elm_toulouse$cbor$Cbor$Encode$optionalField,
																				19,
																				$author$project$Cardano$Redeemer$encodeExUnitPrices,
																				function ($) {
																					return $.executionCosts;
																				}),
																			A2(
																				$elm$core$Basics$composeR,
																				A3(
																					$elm_toulouse$cbor$Cbor$Encode$optionalField,
																					20,
																					$author$project$Cardano$Redeemer$encodeExUnits,
																					function ($) {
																						return $.maxTxExUnits;
																					}),
																				A2(
																					$elm$core$Basics$composeR,
																					A3(
																						$elm_toulouse$cbor$Cbor$Encode$optionalField,
																						21,
																						$author$project$Cardano$Redeemer$encodeExUnits,
																						function ($) {
																							return $.maxBlockExUnits;
																						}),
																					A2(
																						$elm$core$Basics$composeR,
																						A3(
																							$elm_toulouse$cbor$Cbor$Encode$optionalField,
																							22,
																							$elm_toulouse$cbor$Cbor$Encode$int,
																							function ($) {
																								return $.maxValueSize;
																							}),
																						A2(
																							$elm$core$Basics$composeR,
																							A3(
																								$elm_toulouse$cbor$Cbor$Encode$optionalField,
																								23,
																								$elm_toulouse$cbor$Cbor$Encode$int,
																								function ($) {
																									return $.collateralPercentage;
																								}),
																							A2(
																								$elm$core$Basics$composeR,
																								A3(
																									$elm_toulouse$cbor$Cbor$Encode$optionalField,
																									24,
																									$elm_toulouse$cbor$Cbor$Encode$int,
																									function ($) {
																										return $.maxCollateralInputs;
																									}),
																								A2(
																									$elm$core$Basics$composeR,
																									A3(
																										$elm_toulouse$cbor$Cbor$Encode$optionalField,
																										25,
																										$author$project$Cardano$Gov$encodePoolVotingThresholds,
																										function ($) {
																											return $.poolVotingThresholds;
																										}),
																									A2(
																										$elm$core$Basics$composeR,
																										A3(
																											$elm_toulouse$cbor$Cbor$Encode$optionalField,
																											26,
																											$author$project$Cardano$Gov$encodeDrepVotingThresholds,
																											function ($) {
																												return $.drepVotingThresholds;
																											}),
																										A2(
																											$elm$core$Basics$composeR,
																											A3(
																												$elm_toulouse$cbor$Cbor$Encode$optionalField,
																												27,
																												$elm_toulouse$cbor$Cbor$Encode$int,
																												function ($) {
																													return $.minCommitteeSize;
																												}),
																											A2(
																												$elm$core$Basics$composeR,
																												A3(
																													$elm_toulouse$cbor$Cbor$Encode$optionalField,
																													28,
																													$author$project$Cbor$Encode$Extra$natural,
																													function ($) {
																														return $.committeeTermLimit;
																													}),
																												A2(
																													$elm$core$Basics$composeR,
																													A3(
																														$elm_toulouse$cbor$Cbor$Encode$optionalField,
																														29,
																														$author$project$Cbor$Encode$Extra$natural,
																														function ($) {
																															return $.governanceActionValidityPeriod;
																														}),
																													A2(
																														$elm$core$Basics$composeR,
																														A3(
																															$elm_toulouse$cbor$Cbor$Encode$optionalField,
																															30,
																															$author$project$Cbor$Encode$Extra$natural,
																															function ($) {
																																return $.governanceActionDeposit;
																															}),
																														A2(
																															$elm$core$Basics$composeR,
																															A3(
																																$elm_toulouse$cbor$Cbor$Encode$optionalField,
																																31,
																																$author$project$Cbor$Encode$Extra$natural,
																																function ($) {
																																	return $.drepDeposit;
																																}),
																															A2(
																																$elm$core$Basics$composeR,
																																A3(
																																	$elm_toulouse$cbor$Cbor$Encode$optionalField,
																																	32,
																																	$author$project$Cbor$Encode$Extra$natural,
																																	function ($) {
																																		return $.drepInactivityPeriod;
																																	}),
																																A3(
																																	$elm_toulouse$cbor$Cbor$Encode$optionalField,
																																	33,
																																	$elm_toulouse$cbor$Cbor$Encode$int,
																																	function ($) {
																																		return $.minFeeRefScriptCostPerByte;
																																	})))))))))))))))))))))))))))))))));
var $author$project$Cardano$Gov$encodeProtocolVersion = function (_v0) {
	var major = _v0.a;
	var minor = _v0.b;
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm_toulouse$cbor$Cbor$Encode$int,
		_List_fromArray(
			[major, minor]));
};
var $author$project$Cardano$Gov$encodeAction = function (action) {
	switch (action.$) {
		case 'ParameterChange':
			var latestEnacted = action.a.latestEnacted;
			var protocolParamUpdate = action.a.protocolParamUpdate;
			var guardrailsPolicy = action.a.guardrailsPolicy;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(0),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeActionId, latestEnacted),
						$author$project$Cardano$Gov$encodeProtocolParamUpdate(protocolParamUpdate),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Bytes$Comparable$toCbor, guardrailsPolicy)
					]));
		case 'HardForkInitiation':
			var latestEnacted = action.a.latestEnacted;
			var protocolVersion = action.a.protocolVersion;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(1),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeActionId, latestEnacted),
						$author$project$Cardano$Gov$encodeProtocolVersion(protocolVersion)
					]));
		case 'TreasuryWithdrawals':
			var withdrawals = action.a.withdrawals;
			var guardrailsPolicy = action.a.guardrailsPolicy;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(2),
						A3($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Address$stakeAddressToCbor, $author$project$Cbor$Encode$Extra$natural, withdrawals),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Bytes$Comparable$toCbor, guardrailsPolicy)
					]));
		case 'NoConfidence':
			var latestEnacted = action.a.latestEnacted;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(3),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeActionId, latestEnacted)
					]));
		case 'UpdateCommittee':
			var latestEnacted = action.a.latestEnacted;
			var removedMembers = action.a.removedMembers;
			var addedMembers = action.a.addedMembers;
			var quorumThreshold = action.a.quorumThreshold;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(4),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeActionId, latestEnacted),
						A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Address$credentialToCbor, removedMembers),
						A3(
						$author$project$Cbor$Encode$Extra$associativeList,
						$author$project$Cardano$Address$credentialToCbor,
						$author$project$Cbor$Encode$Extra$natural,
						A2(
							$elm$core$List$map,
							function (m) {
								return _Utils_Tuple2(m.newMember, m.expirationEpoch);
							},
							addedMembers)),
						$author$project$Cardano$Utils$encodeRationalNumber(quorumThreshold)
					]));
		case 'NewConstitution':
			var latestEnacted = action.a.latestEnacted;
			var constitution = action.a.constitution;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(5),
						A2($elm_toulouse$cbor$Cbor$Encode$maybe, $author$project$Cardano$Gov$encodeActionId, latestEnacted),
						$author$project$Cardano$Gov$encodeConstitution(constitution)
					]));
		default:
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm_toulouse$cbor$Cbor$Encode$int,
				_List_fromArray(
					[6]));
	}
};
var $author$project$Cardano$Transaction$encodeProposalProcedure = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cbor$Encode$Extra$natural,
				function ($) {
					return $.deposit;
				}),
			A2(
				$elm$core$Basics$composeR,
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$author$project$Cardano$Address$stakeAddressToCbor,
					function ($) {
						return $.depositReturnAccount;
					}),
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm_toulouse$cbor$Cbor$Encode$elem,
						$author$project$Cardano$Gov$encodeAction,
						function ($) {
							return $.govAction;
						}),
					A2(
						$elm_toulouse$cbor$Cbor$Encode$elem,
						$author$project$Cardano$Gov$encodeAnchor,
						function ($) {
							return $.anchor;
						}))))));
var $author$project$Cardano$Transaction$encodeRequiredSigners = $elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor);
var $author$project$Cardano$Transaction$encodeProposedProtocolParameterUpdates = $author$project$Bytes$Map$toCbor($author$project$Cardano$Gov$encodeProtocolParamUpdate);
var $author$project$Cardano$Transaction$encodeUpdate = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Transaction$encodeProposedProtocolParameterUpdates,
				function ($) {
					return $.proposedProtocolParameterUpdates;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cbor$Encode$Extra$natural,
				function ($) {
					return $.epoch;
				}))));
var $author$project$Cardano$Gov$encodeVoter = function (voter) {
	switch (voter.$) {
		case 'VoterCommitteeHotCred':
			var cred = voter.a;
			if (cred.$ === 'VKeyHash') {
				var hash = cred.a;
				return A2(
					$elm_toulouse$cbor$Cbor$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(0),
							$author$project$Bytes$Comparable$toCbor(hash)
						]));
			} else {
				var hash = cred.a;
				return A2(
					$elm_toulouse$cbor$Cbor$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(1),
							$author$project$Bytes$Comparable$toCbor(hash)
						]));
			}
		case 'VoterDrepCred':
			var cred = voter.a;
			if (cred.$ === 'VKeyHash') {
				var hash = cred.a;
				return A2(
					$elm_toulouse$cbor$Cbor$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(2),
							$author$project$Bytes$Comparable$toCbor(hash)
						]));
			} else {
				var hash = cred.a;
				return A2(
					$elm_toulouse$cbor$Cbor$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(3),
							$author$project$Bytes$Comparable$toCbor(hash)
						]));
			}
		default:
			var poolId = voter.a;
			return A2(
				$elm_toulouse$cbor$Cbor$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(4),
						$author$project$Bytes$Comparable$toCbor(poolId)
					]));
	}
};
var $author$project$Cardano$Gov$encodeVote = function (vote) {
	switch (vote.$) {
		case 'VoteNo':
			return $elm_toulouse$cbor$Cbor$Encode$int(0);
		case 'VoteYes':
			return $elm_toulouse$cbor$Cbor$Encode$int(1);
		default:
			return $elm_toulouse$cbor$Cbor$Encode$int(2);
	}
};
var $author$project$Cardano$Gov$encodeVotingProcedure = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Gov$encodeVote,
				function ($) {
					return $.vote;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$elm_toulouse$cbor$Cbor$Encode$maybe($author$project$Cardano$Gov$encodeAnchor),
				function ($) {
					return $.anchor;
				}))));
var $author$project$Cardano$Transaction$encodeVotingProcedures = A2(
	$author$project$Cbor$Encode$Extra$associativeList,
	$author$project$Cardano$Gov$encodeVoter,
	A2($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Gov$encodeActionId, $author$project$Cardano$Gov$encodeVotingProcedure));
var $dwayne$elm_integer$Integer$toNatural = function (z) {
	switch (z.$) {
		case 'Zero':
			return $dwayne$elm_natural$Natural$zero;
		case 'Positive':
			var n = z.a;
			return n;
		default:
			var n = z.a;
			return n;
	}
};
var $author$project$Cbor$Encode$Extra$isNegativeCborU64 = function (n) {
	return A2(
		$dwayne$elm_natural$Natural$isLessThanOrEqual,
		$author$project$Cbor$Encode$Extra$limit64Bits,
		$dwayne$elm_integer$Integer$toNatural(n));
};
var $dwayne$elm_integer$Integer$compare = F2(
	function (x, y) {
		switch (x.$) {
			case 'Negative':
				var a = x.a;
				if (y.$ === 'Negative') {
					var b = y.a;
					return A2($dwayne$elm_natural$Natural$compare, b, a);
				} else {
					return $elm$core$Basics$LT;
				}
			case 'Zero':
				switch (y.$) {
					case 'Negative':
						return $elm$core$Basics$GT;
					case 'Zero':
						return $elm$core$Basics$EQ;
					default:
						return $elm$core$Basics$LT;
				}
			default:
				var a = x.a;
				if (y.$ === 'Positive') {
					var b = y.a;
					return A2($dwayne$elm_natural$Natural$compare, a, b);
				} else {
					return $elm$core$Basics$GT;
				}
		}
	});
var $dwayne$elm_integer$Integer$isLessThan = F2(
	function (y, x) {
		return _Utils_eq(
			A2($dwayne$elm_integer$Integer$compare, x, y),
			$elm$core$Basics$LT);
	});
var $dwayne$elm_integer$Integer$zero = $dwayne$elm_integer$Integer$Zero;
var $dwayne$elm_integer$Integer$isNegative = $dwayne$elm_integer$Integer$isLessThan($dwayne$elm_integer$Integer$zero);
var $dwayne$elm_integer$Integer$isNonNegative = A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dwayne$elm_integer$Integer$isNegative);
var $dwayne$elm_integer$Integer$isGreaterThan = F2(
	function (y, x) {
		return _Utils_eq(
			A2($dwayne$elm_integer$Integer$compare, x, y),
			$elm$core$Basics$GT);
	});
var $dwayne$elm_integer$Integer$isLessThanOrEqual = F2(
	function (y, x) {
		return !A2($dwayne$elm_integer$Integer$isGreaterThan, y, x);
	});
var $author$project$Cbor$Encode$Extra$isSafeInt = function (n) {
	return A2(
		$dwayne$elm_integer$Integer$isLessThanOrEqual,
		$dwayne$elm_integer$Integer$fromSafeInt($dwayne$elm_integer$Integer$maxSafeInt),
		n) && A2(
		$dwayne$elm_integer$Integer$isGreaterThan,
		$dwayne$elm_integer$Integer$fromSafeInt($dwayne$elm_integer$Integer$minSafeInt),
		n);
};
var $dwayne$elm_integer$Integer$one = $dwayne$elm_integer$Integer$Positive($dwayne$elm_natural$Natural$one);
var $dwayne$elm_integer$Integer$toBaseBString = F2(
	function (b, z) {
		switch (z.$) {
			case 'Zero':
				return $elm$core$Maybe$Just('0');
			case 'Positive':
				var n = z.a;
				return A2($dwayne$elm_natural$Natural$toBaseBString, b, n);
			default:
				var n = z.a;
				return A2(
					$elm$core$Maybe$map,
					$elm$core$String$cons(
						_Utils_chr('-')),
					A2($dwayne$elm_natural$Natural$toBaseBString, b, n));
		}
	});
var $dwayne$elm_integer$Integer$toHexString = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_integer$Integer$toBaseBString(16),
	$elm$core$Maybe$withDefault(''));
var $dwayne$elm_integer$Integer$toInt = function (z) {
	switch (z.$) {
		case 'Zero':
			return 0;
		case 'Positive':
			var n = z.a;
			return $dwayne$elm_natural$Natural$toInt(n);
		default:
			var n = z.a;
			return -$dwayne$elm_natural$Natural$toInt(n);
	}
};
var $author$project$Cbor$Encode$Extra$integer = function (n) {
	if ($dwayne$elm_integer$Integer$isNonNegative(n)) {
		return $author$project$Cbor$Encode$Extra$natural(
			$dwayne$elm_integer$Integer$toNatural(n));
	} else {
		if ($author$project$Cbor$Encode$Extra$isSafeInt(n)) {
			return $elm_toulouse$cbor$Cbor$Encode$int(
				$dwayne$elm_integer$Integer$toInt(n));
		} else {
			if ($author$project$Cbor$Encode$Extra$isNegativeCborU64(n)) {
				var msbLsb = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2(
						$elm$core$Maybe$map,
						function (_v0) {
							var msb = _v0.a;
							var lsb = _v0.b;
							return _Utils_Tuple2(
								-$dwayne$elm_natural$Natural$toInt(msb),
								$dwayne$elm_natural$Natural$toInt(lsb));
						},
						A2(
							$dwayne$elm_natural$Natural$divModBy,
							$dwayne$elm_natural$Natural$fromSafeInt(
								A2($elm$core$Basics$pow, 2, 32)),
							$dwayne$elm_integer$Integer$toNatural(n))));
				return $elm_toulouse$cbor$Cbor$Encode$any(
					$elm_toulouse$cbor$Cbor$CborInt64(msbLsb));
			} else {
				var nAsBytes = $author$project$Bytes$Comparable$toBytes(
					$author$project$Bytes$Comparable$fromHexUnchecked(
						$author$project$Cbor$Encode$Extra$prependWith0IfOddLength(
							A2(
								$elm$core$String$dropLeft,
								1,
								$dwayne$elm_integer$Integer$toHexString(
									A2($dwayne$elm_integer$Integer$add, n, $dwayne$elm_integer$Integer$one))))));
				return A3($elm_toulouse$cbor$Cbor$Encode$tagged, $elm_toulouse$cbor$Cbor$Tag$NegativeBigNum, $elm_toulouse$cbor$Cbor$Encode$bytes, nAsBytes);
			}
		}
	}
};
var $author$project$Cardano$MultiAsset$mintToCbor = function (multiAsset) {
	return A2(
		$author$project$Bytes$Map$toCbor,
		$author$project$Bytes$Map$toCbor($author$project$Cbor$Encode$Extra$integer),
		multiAsset);
};
var $author$project$Cbor$Encode$Extra$nonEmptyField = F4(
	function (key, isEmpty, encode, extract) {
		return A3(
			$elm_toulouse$cbor$Cbor$Encode$optionalField,
			key,
			encode,
			A2(
				$elm$core$Basics$composeR,
				extract,
				function (xs) {
					return isEmpty(xs) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(xs);
				}));
	});
var $author$project$Cardano$Transaction$encodeTransactionBody = A2(
	$elm_toulouse$cbor$Cbor$Encode$record,
	$elm_toulouse$cbor$Cbor$Encode$int,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$fields,
		A2(
			$elm$core$Basics$composeR,
			A3(
				$elm_toulouse$cbor$Cbor$Encode$field,
				0,
				$author$project$Cardano$Transaction$encodeInputs,
				function ($) {
					return $.inputs;
				}),
			A2(
				$elm$core$Basics$composeR,
				A3(
					$elm_toulouse$cbor$Cbor$Encode$field,
					1,
					$author$project$Cardano$Transaction$encodeOutputs,
					function ($) {
						return $.outputs;
					}),
				A2(
					$elm$core$Basics$composeR,
					A3(
						$elm_toulouse$cbor$Cbor$Encode$field,
						2,
						$author$project$Cbor$Encode$Extra$natural,
						function ($) {
							return $.fee;
						}),
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							3,
							$author$project$Cbor$Encode$Extra$natural,
							function ($) {
								return $.ttl;
							}),
						A2(
							$elm$core$Basics$composeR,
							A4(
								$author$project$Cbor$Encode$Extra$nonEmptyField,
								4,
								$elm$core$List$isEmpty,
								$author$project$Cardano$Transaction$encodeCertificates,
								function ($) {
									return $.certificates;
								}),
							A2(
								$elm$core$Basics$composeR,
								A4(
									$author$project$Cbor$Encode$Extra$nonEmptyField,
									5,
									$elm$core$List$isEmpty,
									A2($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Address$stakeAddressToCbor, $author$project$Cbor$Encode$Extra$natural),
									function ($) {
										return $.withdrawals;
									}),
								A2(
									$elm$core$Basics$composeR,
									A3(
										$elm_toulouse$cbor$Cbor$Encode$optionalField,
										6,
										$author$project$Cardano$Transaction$encodeUpdate,
										function ($) {
											return $.update;
										}),
									A2(
										$elm$core$Basics$composeR,
										A3(
											$elm_toulouse$cbor$Cbor$Encode$optionalField,
											7,
											$author$project$Bytes$Comparable$toCbor,
											function ($) {
												return $.auxiliaryDataHash;
											}),
										A2(
											$elm$core$Basics$composeR,
											A3(
												$elm_toulouse$cbor$Cbor$Encode$optionalField,
												8,
												$elm_toulouse$cbor$Cbor$Encode$int,
												function ($) {
													return $.validityIntervalStart;
												}),
											A2(
												$elm$core$Basics$composeR,
												A4(
													$author$project$Cbor$Encode$Extra$nonEmptyField,
													9,
													$author$project$Cardano$MultiAsset$isEmpty,
													$author$project$Cardano$MultiAsset$mintToCbor,
													function ($) {
														return $.mint;
													}),
												A2(
													$elm$core$Basics$composeR,
													A3(
														$elm_toulouse$cbor$Cbor$Encode$optionalField,
														11,
														$author$project$Bytes$Comparable$toCbor,
														function ($) {
															return $.scriptDataHash;
														}),
													A2(
														$elm$core$Basics$composeR,
														A4(
															$author$project$Cbor$Encode$Extra$nonEmptyField,
															13,
															$elm$core$List$isEmpty,
															$author$project$Cardano$Transaction$encodeInputs,
															function ($) {
																return $.collateral;
															}),
														A2(
															$elm$core$Basics$composeR,
															A4(
																$author$project$Cbor$Encode$Extra$nonEmptyField,
																14,
																$elm$core$List$isEmpty,
																$author$project$Cardano$Transaction$encodeRequiredSigners,
																function ($) {
																	return $.requiredSigners;
																}),
															A2(
																$elm$core$Basics$composeR,
																A3(
																	$elm_toulouse$cbor$Cbor$Encode$optionalField,
																	15,
																	$author$project$Cardano$Address$encodeNetworkId,
																	function ($) {
																		return $.networkId;
																	}),
																A2(
																	$elm$core$Basics$composeR,
																	A3(
																		$elm_toulouse$cbor$Cbor$Encode$optionalField,
																		16,
																		$author$project$Cardano$Utxo$encodeOutput,
																		function ($) {
																			return $.collateralReturn;
																		}),
																	A2(
																		$elm$core$Basics$composeR,
																		A3(
																			$elm_toulouse$cbor$Cbor$Encode$optionalField,
																			17,
																			$elm_toulouse$cbor$Cbor$Encode$int,
																			function ($) {
																				return $.totalCollateral;
																			}),
																		A2(
																			$elm$core$Basics$composeR,
																			A4(
																				$author$project$Cbor$Encode$Extra$nonEmptyField,
																				18,
																				$elm$core$List$isEmpty,
																				$author$project$Cardano$Transaction$encodeInputs,
																				function ($) {
																					return $.referenceInputs;
																				}),
																			A2(
																				$elm$core$Basics$composeR,
																				A4(
																					$author$project$Cbor$Encode$Extra$nonEmptyField,
																					19,
																					$elm$core$List$isEmpty,
																					$author$project$Cardano$Transaction$encodeVotingProcedures,
																					function ($) {
																						return $.votingProcedures;
																					}),
																				A2(
																					$elm$core$Basics$composeR,
																					A4(
																						$author$project$Cbor$Encode$Extra$nonEmptyField,
																						20,
																						$elm$core$List$isEmpty,
																						$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Transaction$encodeProposalProcedure),
																						function ($) {
																							return $.proposalProcedures;
																						}),
																					A2(
																						$elm$core$Basics$composeR,
																						A3(
																							$elm_toulouse$cbor$Cbor$Encode$optionalField,
																							21,
																							$author$project$Cbor$Encode$Extra$natural,
																							function ($) {
																								return $.currentTreasuryValue;
																							}),
																						A3(
																							$elm_toulouse$cbor$Cbor$Encode$optionalField,
																							22,
																							$author$project$Cbor$Encode$Extra$natural,
																							function ($) {
																								return $.treasuryDonation;
																							})))))))))))))))))))))));
var $author$project$Cardano$Transaction$encodeBootstrapWitness = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.publicKey;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.signature;
				}))));
var $author$project$Cardano$Transaction$encodeBootstrapWitnesses = function (b) {
	return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Transaction$encodeBootstrapWitness, b);
};
var $author$project$Cardano$Script$encodeNativeScript = function (nativeScript) {
	return A2(
		$elm_toulouse$cbor$Cbor$Encode$list,
		$elm$core$Basics$identity,
		function () {
			switch (nativeScript.$) {
				case 'ScriptPubkey':
					var addrKeyHash = nativeScript.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(0),
							$author$project$Bytes$Comparable$toCbor(addrKeyHash)
						]);
				case 'ScriptAll':
					var nativeScripts = nativeScript.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(1),
							A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Script$encodeNativeScript, nativeScripts)
						]);
				case 'ScriptAny':
					var nativeScripts = nativeScript.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(2),
							A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Script$encodeNativeScript, nativeScripts)
						]);
				case 'ScriptNofK':
					var atLeast = nativeScript.a;
					var nativeScripts = nativeScript.b;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(3),
							$elm_toulouse$cbor$Cbor$Encode$int(atLeast),
							A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Script$encodeNativeScript, nativeScripts)
						]);
				case 'InvalidBefore':
					var start = nativeScript.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(4),
							$author$project$Cbor$Encode$Extra$natural(start)
						]);
				default:
					var end = nativeScript.a;
					return _List_fromArray(
						[
							$elm_toulouse$cbor$Cbor$Encode$int(5),
							$author$project$Cbor$Encode$Extra$natural(end)
						]);
			}
		}());
};
var $author$project$Cardano$Redeemer$encodeTag = function (redeemerTag) {
	return $elm_toulouse$cbor$Cbor$Encode$int(
		function () {
			switch (redeemerTag.$) {
				case 'Spend':
					return 0;
				case 'Mint':
					return 1;
				case 'Cert':
					return 2;
				case 'Reward':
					return 3;
				case 'Vote':
					return 4;
				default:
					return 5;
			}
		}());
};
var $elm_toulouse$cbor$Cbor$Encode$tBEGIN = 31;
var $elm_toulouse$cbor$Cbor$Encode$beginBytes = $elm_toulouse$cbor$Cbor$Encode$Encoder(
	A2($elm_toulouse$cbor$Cbor$Encode$majorType, 2, $elm_toulouse$cbor$Cbor$Encode$tBEGIN));
var $author$project$Cbor$Encode$Extra$beginBytes = $elm_toulouse$cbor$Cbor$Encode$beginBytes;
var $elm_toulouse$cbor$Cbor$Encode$tBREAK = 255;
var $elm_toulouse$cbor$Cbor$Encode$break = $elm_toulouse$cbor$Cbor$Encode$Encoder(
	$elm$bytes$Bytes$Encode$unsignedInt8($elm_toulouse$cbor$Cbor$Encode$tBREAK));
var $author$project$Bytes$Comparable$chunksOf = function (n) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Bytes$Comparable$toBytes,
		A2(
			$elm$core$Basics$composeR,
			function (bs) {
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$bytes$Bytes$Decode$decode,
						A2(
							$elm$bytes$Bytes$Decode$loop,
							_Utils_Tuple2(
								$elm$bytes$Bytes$width(bs),
								_List_Nil),
							function (_v0) {
								var w = _v0.a;
								var chunks = _v0.b;
								if (!w) {
									return $elm$bytes$Bytes$Decode$succeed(
										$elm$bytes$Bytes$Decode$Done(
											$elm$core$List$reverse(chunks)));
								} else {
									var len = A2($elm$core$Basics$min, w, n);
									return A2(
										$elm$bytes$Bytes$Decode$map,
										function (chunk) {
											return $elm$bytes$Bytes$Decode$Loop(
												_Utils_Tuple2(
													w - len,
													A2($elm$core$List$cons, chunk, chunks)));
										},
										$elm$bytes$Bytes$Decode$bytes(len));
								}
							}),
						bs));
			},
			$elm$core$List$map($author$project$Bytes$Comparable$fromBytes)));
};
var $elm_toulouse$cbor$Cbor$Encode$beginList = $elm_toulouse$cbor$Cbor$Encode$Encoder(
	A2($elm_toulouse$cbor$Cbor$Encode$majorType, 4, $elm_toulouse$cbor$Cbor$Encode$tBEGIN));
var $elm_toulouse$cbor$Cbor$Encode$indefiniteList = function (fn) {
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return A2(
						$elm$core$List$cons,
						fn(x),
						xs);
				}),
			_List_fromArray(
				[$elm_toulouse$cbor$Cbor$Encode$break])),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$cons($elm_toulouse$cbor$Cbor$Encode$beginList),
			$elm_toulouse$cbor$Cbor$Encode$sequence));
};
var $author$project$Cbor$Encode$Extra$indefiniteList = $elm_toulouse$cbor$Cbor$Encode$indefiniteList;
var $author$project$Bytes$Comparable$width = function (_v0) {
	var str = _v0.a;
	return ($elm$core$String$length(str) / 2) | 0;
};
var $author$project$Cardano$Data$toCbor = function (data) {
	switch (data.$) {
		case 'Constr':
			var ixNat = data.a;
			var fields = data.b;
			if (A2(
				$dwayne$elm_natural$Natural$isLessThan,
				$dwayne$elm_natural$Natural$fromSafeInt(128),
				ixNat)) {
				var ix = $dwayne$elm_natural$Natural$toInt(ixNat);
				return (ix < 7) ? A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown(121 + ix),
					$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Data$toCbor),
					fields) : A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown((1280 + ix) - 7),
					$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Data$toCbor),
					fields);
			} else {
				return A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown(102),
					$elm_toulouse$cbor$Cbor$Encode$tuple(
						A2(
							$elm$core$Basics$composeR,
							$elm_toulouse$cbor$Cbor$Encode$elems,
							A2(
								$elm$core$Basics$composeR,
								A2(
									$elm_toulouse$cbor$Cbor$Encode$elem,
									$author$project$Cbor$Encode$Extra$natural,
									function ($) {
										return $.ixNat;
									}),
								A2(
									$elm_toulouse$cbor$Cbor$Encode$elem,
									$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Data$toCbor),
									function ($) {
										return $.fields;
									})))),
					{fields: fields, ixNat: ixNat});
			}
		case 'Map':
			var xs = data.a;
			return A3($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Data$toCbor, $author$project$Cardano$Data$toCbor, xs);
		case 'List':
			var xs = data.a;
			return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Data$toCbor, xs);
		case 'Int':
			var i = data.a;
			return $author$project$Cbor$Encode$Extra$integer(i);
		default:
			var bytes = data.a;
			return ($author$project$Bytes$Comparable$width(bytes) <= 64) ? $elm_toulouse$cbor$Cbor$Encode$bytes(
				$author$project$Bytes$Comparable$toBytes(bytes)) : $elm_toulouse$cbor$Cbor$Encode$sequence(
				A2(
					$elm$core$List$cons,
					$author$project$Cbor$Encode$Extra$beginBytes,
					A3(
						$elm$core$List$foldr,
						F2(
							function (chunk, rest) {
								return A2(
									$elm$core$List$cons,
									$elm_toulouse$cbor$Cbor$Encode$bytes(
										$author$project$Bytes$Comparable$toBytes(chunk)),
									rest);
							}),
						_List_fromArray(
							[$elm_toulouse$cbor$Cbor$Encode$break]),
						A2($author$project$Bytes$Comparable$chunksOf, 64, bytes))));
	}
};
var $author$project$Cardano$Data$toCborUplc = function (data) {
	var encodeList = function (xs) {
		if (!xs.b) {
			return $elm_toulouse$cbor$Cbor$Encode$length(0);
		} else {
			return A2($author$project$Cbor$Encode$Extra$indefiniteList, $author$project$Cardano$Data$toCbor, xs);
		}
	};
	switch (data.$) {
		case 'Constr':
			var ixNat = data.a;
			var fields = data.b;
			if (A2(
				$dwayne$elm_natural$Natural$isLessThan,
				$dwayne$elm_natural$Natural$fromSafeInt(128),
				ixNat)) {
				var ix = $dwayne$elm_natural$Natural$toInt(ixNat);
				return (ix < 7) ? A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown(121 + ix),
					encodeList,
					fields) : A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown((1280 + ix) - 7),
					encodeList,
					fields);
			} else {
				return A3(
					$elm_toulouse$cbor$Cbor$Encode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown(102),
					$elm_toulouse$cbor$Cbor$Encode$tuple(
						A2(
							$elm$core$Basics$composeR,
							$elm_toulouse$cbor$Cbor$Encode$elems,
							A2(
								$elm$core$Basics$composeR,
								A2(
									$elm_toulouse$cbor$Cbor$Encode$elem,
									$author$project$Cbor$Encode$Extra$natural,
									function ($) {
										return $.ixNat;
									}),
								A2(
									$elm_toulouse$cbor$Cbor$Encode$elem,
									encodeList,
									function ($) {
										return $.fields;
									})))),
					{fields: fields, ixNat: ixNat});
			}
		case 'Map':
			var xs = data.a;
			return A3($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Data$toCbor, $author$project$Cardano$Data$toCbor, xs);
		case 'List':
			var xs = data.a;
			return encodeList(xs);
		case 'Int':
			var i = data.a;
			return $author$project$Cbor$Encode$Extra$integer(i);
		default:
			var bytes = data.a;
			return ($author$project$Bytes$Comparable$width(bytes) <= 64) ? $elm_toulouse$cbor$Cbor$Encode$bytes(
				$author$project$Bytes$Comparable$toBytes(bytes)) : $elm_toulouse$cbor$Cbor$Encode$sequence(
				A2(
					$elm$core$List$cons,
					$author$project$Cbor$Encode$Extra$beginBytes,
					A3(
						$elm$core$List$foldr,
						F2(
							function (chunk, rest) {
								return A2(
									$elm$core$List$cons,
									$elm_toulouse$cbor$Cbor$Encode$bytes(
										$author$project$Bytes$Comparable$toBytes(chunk)),
									rest);
							}),
						_List_fromArray(
							[$elm_toulouse$cbor$Cbor$Encode$break]),
						A2($author$project$Bytes$Comparable$chunksOf, 64, bytes))));
	}
};
var $author$project$Cardano$Transaction$encodeRedeemersAsMap = function (redeemers) {
	return A3(
		$author$project$Cbor$Encode$Extra$associativeList,
		$elm_toulouse$cbor$Cbor$Encode$tuple(
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Encode$elems,
				A2(
					$elm$core$Basics$composeR,
					A2($elm_toulouse$cbor$Cbor$Encode$elem, $author$project$Cardano$Redeemer$encodeTag, $elm$core$Tuple$first),
					A2($elm_toulouse$cbor$Cbor$Encode$elem, $elm_toulouse$cbor$Cbor$Encode$int, $elm$core$Tuple$second)))),
		$elm_toulouse$cbor$Cbor$Encode$tuple(
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Encode$elems,
				A2(
					$elm$core$Basics$composeR,
					A2($elm_toulouse$cbor$Cbor$Encode$elem, $author$project$Cardano$Data$toCborUplc, $elm$core$Tuple$first),
					A2($elm_toulouse$cbor$Cbor$Encode$elem, $author$project$Cardano$Redeemer$encodeExUnits, $elm$core$Tuple$second)))),
		A2(
			$elm$core$List$map,
			function (r) {
				return _Utils_Tuple2(
					_Utils_Tuple2(r.tag, r.index),
					_Utils_Tuple2(r.data, r.exUnits));
			},
			redeemers));
};
var $author$project$Cardano$Transaction$encodeVKeyWitness = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.vkey;
				}),
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Bytes$Comparable$toCbor,
				function ($) {
					return $.signature;
				}))));
var $author$project$Cardano$Transaction$encodeVKeyWitnesses = function (v) {
	return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Transaction$encodeVKeyWitness, v);
};
var $author$project$Cardano$Transaction$encodeWitnessSet = A2(
	$elm_toulouse$cbor$Cbor$Encode$record,
	$elm_toulouse$cbor$Cbor$Encode$int,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$fields,
		A2(
			$elm$core$Basics$composeR,
			A3(
				$elm_toulouse$cbor$Cbor$Encode$optionalField,
				0,
				$author$project$Cardano$Transaction$encodeVKeyWitnesses,
				function ($) {
					return $.vkeywitness;
				}),
			A2(
				$elm$core$Basics$composeR,
				A3(
					$elm_toulouse$cbor$Cbor$Encode$optionalField,
					1,
					$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Script$encodeNativeScript),
					function ($) {
						return $.nativeScripts;
					}),
				A2(
					$elm$core$Basics$composeR,
					A3(
						$elm_toulouse$cbor$Cbor$Encode$optionalField,
						2,
						$author$project$Cardano$Transaction$encodeBootstrapWitnesses,
						function ($) {
							return $.bootstrapWitness;
						}),
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							3,
							$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
							function ($) {
								return $.plutusV1Script;
							}),
						A2(
							$elm$core$Basics$composeR,
							A3(
								$elm_toulouse$cbor$Cbor$Encode$optionalField,
								4,
								$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Data$toCborUplc),
								function ($) {
									return $.plutusData;
								}),
							A2(
								$elm$core$Basics$composeR,
								A3(
									$elm_toulouse$cbor$Cbor$Encode$optionalField,
									5,
									$author$project$Cardano$Transaction$encodeRedeemersAsMap,
									function ($) {
										return $.redeemer;
									}),
								A2(
									$elm$core$Basics$composeR,
									A3(
										$elm_toulouse$cbor$Cbor$Encode$optionalField,
										6,
										$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
										function ($) {
											return $.plutusV2Script;
										}),
									A3(
										$elm_toulouse$cbor$Cbor$Encode$optionalField,
										7,
										$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
										function ($) {
											return $.plutusV3Script;
										}))))))))));
var $author$project$Cardano$AuxiliaryData$nonEmptyList = function (list) {
	return $elm$core$List$isEmpty(list) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(list);
};
var $author$project$Cardano$Metadatum$toCbor = function (metadatum) {
	switch (metadatum.$) {
		case 'Int':
			var n = metadatum.a;
			return $author$project$Cbor$Encode$Extra$integer(n);
		case 'Bytes':
			var bytes = metadatum.a;
			return $author$project$Bytes$Comparable$toCbor(bytes);
		case 'String':
			var str = metadatum.a;
			return $elm_toulouse$cbor$Cbor$Encode$string(str);
		case 'List':
			var metadatums = metadatum.a;
			return A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Cardano$Metadatum$toCbor, metadatums);
		default:
			var metadatums = metadatum.a;
			return A3($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cardano$Metadatum$toCbor, $author$project$Cardano$Metadatum$toCbor, metadatums);
	}
};
var $author$project$Cardano$AuxiliaryData$toCbor = function (data) {
	return A3(
		$elm_toulouse$cbor$Cbor$Encode$tagged,
		$elm_toulouse$cbor$Cbor$Tag$Unknown(259),
		A2(
			$elm_toulouse$cbor$Cbor$Encode$record,
			$elm_toulouse$cbor$Cbor$Encode$int,
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Encode$fields,
				A2(
					$elm$core$Basics$composeR,
					A3(
						$elm_toulouse$cbor$Cbor$Encode$optionalField,
						0,
						A2($author$project$Cbor$Encode$Extra$associativeList, $author$project$Cbor$Encode$Extra$natural, $author$project$Cardano$Metadatum$toCbor),
						A2(
							$elm$core$Basics$composeL,
							$author$project$Cardano$AuxiliaryData$nonEmptyList,
							function ($) {
								return $.labels;
							})),
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							1,
							$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Script$encodeNativeScript),
							A2(
								$elm$core$Basics$composeL,
								$author$project$Cardano$AuxiliaryData$nonEmptyList,
								function ($) {
									return $.nativeScripts;
								})),
						A2(
							$elm$core$Basics$composeR,
							A3(
								$elm_toulouse$cbor$Cbor$Encode$optionalField,
								2,
								$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
								A2(
									$elm$core$Basics$composeL,
									$author$project$Cardano$AuxiliaryData$nonEmptyList,
									function ($) {
										return $.plutusV1Scripts;
									})),
							A2(
								$elm$core$Basics$composeR,
								A3(
									$elm_toulouse$cbor$Cbor$Encode$optionalField,
									3,
									$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
									A2(
										$elm$core$Basics$composeL,
										$author$project$Cardano$AuxiliaryData$nonEmptyList,
										function ($) {
											return $.plutusV2Scripts;
										})),
								A3(
									$elm_toulouse$cbor$Cbor$Encode$optionalField,
									4,
									$elm_toulouse$cbor$Cbor$Encode$list($author$project$Bytes$Comparable$toCbor),
									A2(
										$elm$core$Basics$composeL,
										$author$project$Cardano$AuxiliaryData$nonEmptyList,
										function ($) {
											return $.plutusV3Scripts;
										})))))))),
		data);
};
var $author$project$Cardano$Transaction$encodeToCbor = $elm_toulouse$cbor$Cbor$Encode$tuple(
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Encode$elems,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Encode$elem,
				$author$project$Cardano$Transaction$encodeTransactionBody,
				function ($) {
					return $.body;
				}),
			A2(
				$elm$core$Basics$composeR,
				A2(
					$elm_toulouse$cbor$Cbor$Encode$elem,
					$author$project$Cardano$Transaction$encodeWitnessSet,
					function ($) {
						return $.witnessSet;
					}),
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm_toulouse$cbor$Cbor$Encode$elem,
						$elm_toulouse$cbor$Cbor$Encode$bool,
						function ($) {
							return $.isValid;
						}),
					A2(
						$elm_toulouse$cbor$Cbor$Encode$elem,
						$elm_toulouse$cbor$Cbor$Encode$maybe($author$project$Cardano$AuxiliaryData$toCbor),
						function ($) {
							return $.auxiliaryData;
						}))))));
var $author$project$Cardano$Transaction$serialize = A2(
	$elm$core$Basics$composeR,
	$author$project$Cardano$Transaction$encodeToCbor,
	A2($elm$core$Basics$composeR, $elm_toulouse$cbor$Cbor$Encode$encode, $author$project$Bytes$Comparable$fromBytes));
var $author$project$Cardano$Uplc$evalScriptsCosts = F3(
	function (vmConfig, localStateUtxos, tx) {
		var usedUtxos = A3(
			$turboMaCk$any_dict$Dict$Any$foldl,
			F3(
				function (ref, _v2, acc) {
					return A3(
						$turboMaCk$any_dict$Dict$Any$insert,
						ref,
						A2($turboMaCk$any_dict$Dict$Any$get, ref, localStateUtxos),
						acc);
				}),
			$author$project$Cardano$Utxo$emptyRefDict,
			$author$project$Cardano$Transaction$allInputs(tx));
		var missingUtxos = $turboMaCk$any_dict$Dict$Any$keys(
			A2(
				$turboMaCk$any_dict$Dict$Any$filter,
				F2(
					function (_v1, o) {
						return _Utils_eq(o, $elm$core$Maybe$Nothing);
					}),
				usedUtxos));
		return (!$elm$core$List$isEmpty(missingUtxos)) ? $elm$core$Result$Err(
			function (missing) {
				return 'Missing UTxOs in local state: ' + missing;
			}(
				A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$map, $author$project$Cardano$Utxo$refAsString, missingUtxos)))) : A3(
			$author$project$Cardano$Uplc$evalScriptsCostsRaw,
			vmConfig,
			A2(
				$turboMaCk$any_dict$Dict$Any$filterMap,
				function (_v0) {
					return $elm$core$Basics$identity;
				},
				usedUtxos),
			$author$project$Cardano$Transaction$serialize(tx));
	});
var $author$project$Cardano$CoinSelection$CollateralContext = F3(
	function (availableUtxos, allowedAddresses, targetAmount) {
		return {allowedAddresses: allowedAddresses, availableUtxos: availableUtxos, targetAmount: targetAmount};
	});
var $author$project$Cardano$TxIntent$CollateralSelectionError = function (a) {
	return {$: 'CollateralSelectionError', a: a};
};
var $author$project$Cardano$TxIntent$ManualFee = function (a) {
	return {$: 'ManualFee', a: a};
};
var $author$project$Cardano$TxIntent$UplcVmError = function (a) {
	return {$: 'UplcVmError', a: a};
};
var $author$project$Cardano$TxIntent$adjustExecutionCosts = F2(
	function (evalScriptsCosts, tx) {
		return A2(
			$elm$core$Result$map,
			function (redeemers) {
				if ($elm$core$List$isEmpty(redeemers)) {
					return tx;
				} else {
					var witnessSet = tx.witnessSet;
					return _Utils_update(
						tx,
						{
							witnessSet: _Utils_update(
								witnessSet,
								{
									redeemer: $elm$core$Maybe$Just(redeemers)
								})
						});
				}
			},
			A2(
				$elm$core$Result$mapError,
				$author$project$Cardano$TxIntent$UplcVmError,
				evalScriptsCosts(tx)));
	});
var $author$project$Cardano$Script$PlutusV1 = {$: 'PlutusV1'};
var $author$project$Cardano$Script$PlutusV2 = {$: 'PlutusV2'};
var $author$project$Cardano$Gov$VotingProcedure = F2(
	function (vote, anchor) {
		return {anchor: anchor, vote: vote};
	});
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $turboMaCk$any_dict$Dict$Any$diff = F2(
	function (_v0, _v1) {
		var inner = _v0.a;
		var dict = _v1.a.dict;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2($elm$core$Dict$diff, inner.dict, dict)
				}));
	});
var $author$project$Bytes$Comparable$fromText = function (str) {
	return $author$project$Bytes$Comparable$fromBytes(
		$elm$bytes$Bytes$Encode$encode(
			$elm$bytes$Bytes$Encode$string(str)));
};
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $author$project$Bytes$Comparable$dummy = F2(
	function (length, prefix) {
		var zeroSuffix = A2($elm$core$String$repeat, 2 * length, '0');
		return $author$project$Bytes$Comparable$fromHexUnchecked(
			A3(
				$elm$core$String$slice,
				0,
				2 * length,
				$author$project$Bytes$Comparable$toHex(
					$author$project$Bytes$Comparable$fromText(
						_Utils_ap(prefix, zeroSuffix)))));
	});
var $author$project$Bytes$Comparable$dummyWithPrefix = F2(
	function (length, bytesPrefix) {
		var zeroSuffix = A2($elm$core$String$repeat, 2 * length, '0');
		return $author$project$Bytes$Comparable$fromHexUnchecked(
			A3(
				$elm$core$String$slice,
				0,
				2 * length,
				_Utils_ap(
					$author$project$Bytes$Comparable$toHex(bytesPrefix),
					zeroSuffix)));
	});
var $author$project$Cardano$Address$extractCredentialKeyHash = function (cred) {
	if (cred.$ === 'VKeyHash') {
		var hash = cred.a;
		return $elm$core$Maybe$Just(hash);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$TxIntent$extractCertificateCred = function (cert) {
	switch (cert.$) {
		case 'StakeRegistrationCert':
			return _List_Nil;
		case 'StakeDeregistrationCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'StakeDelegationCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'PoolRegistrationCert':
			var operator = cert.a.operator;
			var poolOwners = cert.a.poolOwners;
			return A2($elm$core$List$cons, operator, poolOwners);
		case 'PoolRetirementCert':
			var poolId = cert.a.poolId;
			return _List_fromArray(
				[poolId]);
		case 'GenesisKeyDelegationCert':
			return _List_Nil;
		case 'MoveInstantaneousRewardsCert':
			return _List_Nil;
		case 'RegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'UnregCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'VoteDelegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'StakeVoteDelegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'StakeRegDelegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'VoteRegDelegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'StakeVoteRegDelegCert':
			var delegator = cert.a.delegator;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(delegator)
					]));
		case 'AuthCommitteeHotCert':
			return _Debug_todo(
				'Cardano.TxIntent',
				{
					start: {line: 2414, column: 13},
					end: {line: 2414, column: 23}
				})('How many signatures for AuthCommitteeHotCert?');
		case 'ResignCommitteeColdCert':
			return _Debug_todo(
				'Cardano.TxIntent',
				{
					start: {line: 2417, column: 13},
					end: {line: 2417, column: 23}
				})('How many signatures for ResignCommitteeColdCert?');
		case 'RegDrepCert':
			var drepCredential = cert.a.drepCredential;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(drepCredential)
					]));
		case 'UnregDrepCert':
			var drepCredential = cert.a.drepCredential;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(drepCredential)
					]));
		default:
			var drepCredential = cert.a.drepCredential;
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Cardano$Address$extractCredentialKeyHash(drepCredential)
					]));
	}
};
var $author$project$Cardano$Address$extractPubKeyHash = function (address) {
	if (address.$ === 'Shelley') {
		var paymentCredential = address.a.paymentCredential;
		if (paymentCredential.$ === 'VKeyHash') {
			var bytes = paymentCredential.a;
			return $elm$core$Maybe$Just(bytes);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$TxIntent$filterScriptVersion = function (v) {
	return $elm$core$List$filterMap(
		function (_v0) {
			var version = _v0.a;
			var script = _v0.b;
			return _Utils_eq(version, v) ? $elm$core$Maybe$Just(script) : $elm$core$Maybe$Nothing;
		});
};
var $author$project$Cardano$AuxiliaryData$fromJustLabels = function (labels) {
	return {labels: labels, nativeScripts: _List_Nil, plutusV1Scripts: _List_Nil, plutusV2Scripts: _List_Nil, plutusV3Scripts: _List_Nil};
};
var $author$project$Bytes$Map$BytesMap = function (a) {
	return {$: 'BytesMap', a: a};
};
var $author$project$Bytes$Map$empty = $author$project$Bytes$Map$BytesMap($elm$core$Dict$empty);
var $author$project$Bytes$Map$insert = F3(
	function (k, v, _v0) {
		var m = _v0.a;
		return $author$project$Bytes$Map$BytesMap(
			A3(
				$elm$core$Dict$insert,
				$author$project$Bytes$Comparable$toHex(k),
				v,
				m));
	});
var $author$project$Bytes$Map$fromList = A2(
	$elm$core$List$foldr,
	function (_v0) {
		var k = _v0.a;
		var v = _v0.b;
		return A2($author$project$Bytes$Map$insert, k, v);
	},
	$author$project$Bytes$Map$empty);
var $author$project$Cardano$MultiAsset$empty = $author$project$Bytes$Map$empty;
var $author$project$Cardano$Value$onlyLovelace = function (lovelace) {
	return {assets: $author$project$Cardano$MultiAsset$empty, lovelace: lovelace};
};
var $author$project$Cardano$Utxo$simpleOutput = F2(
	function (address, value) {
		return {address: address, amount: value, datumOption: $elm$core$Maybe$Nothing, referenceScript: $elm$core$Maybe$Nothing};
	});
var $author$project$Cardano$Utxo$fromLovelace = F2(
	function (address, amount) {
		return A2(
			$author$project$Cardano$Utxo$simpleOutput,
			address,
			$author$project$Cardano$Value$onlyLovelace(amount));
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Bytes$Map$keys = function (_v0) {
	var m = _v0.a;
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (k, _v1, ks) {
				return A2(
					$elm$core$List$cons,
					$author$project$Bytes$Comparable$fromHexUnchecked(k),
					ks);
			}),
		_List_Nil,
		m);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $turboMaCk$any_dict$Dict$Any$map = F2(
	function (f, _v0) {
		var toKey = _v0.a.toKey;
		var dict = _v0.a.dict;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: A2(
					$elm$core$Dict$map,
					F2(
						function (_v1, _v2) {
							var k = _v2.a;
							var v = _v2.b;
							return _Utils_Tuple2(
								k,
								A2(f, k, v));
						}),
					dict),
				toKey: toKey
			});
	});
var $author$project$Cardano$TxIntent$nothingIfEmptyList = function (list) {
	return $elm$core$List$isEmpty(list) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(list);
};
var $author$project$Bytes$Comparable$toText = function (bs) {
	return A2(
		$elm$bytes$Bytes$Decode$decode,
		$elm$bytes$Bytes$Decode$string(
			$author$project$Bytes$Comparable$width(bs)),
		$author$project$Bytes$Comparable$toBytes(bs));
};
var $author$project$Bytes$Comparable$pretty = function (b) {
	var _v0 = $author$project$Bytes$Comparable$toText(b);
	if (_v0.$ === 'Nothing') {
		return $author$project$Bytes$Comparable$toHex(b);
	} else {
		var text = _v0.a;
		var isLikelyAscii = function (_char) {
			return $elm$core$Char$toCode(_char) < 128;
		};
		return A2($elm$core$String$all, isLikelyAscii, text) ? text : $author$project$Bytes$Comparable$toHex(b);
	}
};
var $author$project$Cardano$Witness$sourceToResult = function (source) {
	if (source.$ === 'ByValue') {
		var value = source.a;
		return $elm$core$Result$Err(value);
	} else {
		var ref = source.a;
		return $elm$core$Result$Ok(ref);
	}
};
var $author$project$Cardano$TxIntent$split = F2(
	function (f, items) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (a, _v0) {
					var accErr = _v0.a;
					var accOk = _v0.b;
					var _v1 = f(a);
					if (_v1.$ === 'Err') {
						var err = _v1.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, err, accErr),
							accOk);
					} else {
						var ok = _v1.a;
						return _Utils_Tuple2(
							accErr,
							A2($elm$core$List$cons, ok, accOk));
					}
				}),
			_Utils_Tuple2(_List_Nil, _List_Nil),
			items);
	});
var $author$project$Cardano$TxIntent$splitScripts = function (scripts) {
	return A2(
		$author$project$Cardano$TxIntent$split,
		function (_v0) {
			var v = _v0.a;
			var source = _v0.b;
			return A2(
				$elm$core$Result$mapError,
				$elm$core$Tuple$pair(v),
				$author$project$Cardano$Witness$sourceToResult(source));
		},
		scripts);
};
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $turboMaCk$any_dict$Dict$Any$union = F2(
	function (_v0, _v1) {
		var inner = _v0.a;
		var dict = _v1.a.dict;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2($elm$core$Dict$union, inner.dict, dict)
				}));
	});
var $author$project$Bytes$Map$values = function (_v0) {
	var m = _v0.a;
	return $elm$core$Dict$values(m);
};
var $author$project$Cardano$Gov$voterKeyCred = function (voter) {
	_v0$3:
	while (true) {
		switch (voter.$) {
			case 'VoterCommitteeHotCred':
				if (voter.a.$ === 'VKeyHash') {
					var hash = voter.a.a;
					return $elm$core$Maybe$Just(hash);
				} else {
					break _v0$3;
				}
			case 'VoterDrepCred':
				if (voter.a.$ === 'VKeyHash') {
					var hash = voter.a.a;
					return $elm$core$Maybe$Just(hash);
				} else {
					break _v0$3;
				}
			default:
				var hash = voter.a;
				return $elm$core$Maybe$Just(hash);
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Cardano$Value$zero = {assets: $author$project$Cardano$MultiAsset$empty, lovelace: $dwayne$elm_natural$Natural$zero};
var $author$project$Cardano$TxIntent$buildTx = F5(
	function (feeAmount, collateralSelection, processedIntents, otherInfo, txContext) {
		var withdrawalsStakeCreds = A2(
			$elm$core$List$filterMap,
			function (stakeAddress) {
				return $author$project$Cardano$Address$extractCredentialKeyHash(stakeAddress.stakeCredential);
			},
			$turboMaCk$any_dict$Dict$Any$keys(processedIntents.withdrawals));
		var walletCredsInInputs = A2(
			$elm$core$List$filterMap,
			function (_v17) {
				var output = _v17.b;
				return $author$project$Cardano$Address$extractPubKeyHash(output.address);
			},
			txContext.inputs);
		var txAuxData = $elm$core$List$isEmpty(otherInfo.metadata) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			$author$project$Cardano$AuxiliaryData$fromJustLabels(
				A2(
					$elm$core$List$map,
					function (_v16) {
						var tag = _v16.tag;
						var metadata = _v16.metadata;
						return _Utils_Tuple2(tag, metadata);
					},
					otherInfo.metadata)));
		var sortedWithdrawals = A2(
			$elm$core$List$map,
			function (_v15) {
				var addr = _v15.a;
				var w = _v15.b;
				return _Utils_Tuple3(
					addr,
					w.amount,
					A2(
						$elm$core$Maybe$map,
						function (f) {
							return f(txContext);
						},
						w.redeemer));
			},
			$turboMaCk$any_dict$Dict$Any$toList(processedIntents.withdrawals));
		var sortedVotes = $turboMaCk$any_dict$Dict$Any$toList(processedIntents.votes);
		var votesCreds = A2(
			$elm$core$List$filterMap,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $author$project$Cardano$Gov$voterKeyCred),
			sortedVotes);
		var preSelected = A2(
			$turboMaCk$any_dict$Dict$Any$map,
			function (_v14) {
				return $elm$core$Maybe$map(
					function (f) {
						return f(txContext);
					});
			},
			processedIntents.preSelected.inputs);
		var makeRedeemer = F3(
			function (tag, id, data) {
				return {
					data: data,
					exUnits: {mem: 0, steps: 0},
					index: id,
					tag: tag
				};
			});
		var proposalRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, _v13) {
						var maybeData = _v13.b;
						return A2(
							$elm$core$Maybe$map,
							A2(makeRedeemer, $author$project$Cardano$Redeemer$Propose, id),
							maybeData);
					}),
				processedIntents.proposals));
		var sortedMintRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, maybeRedeemerF) {
						return A2(
							$elm$core$Maybe$map,
							function (redeemerF) {
								return A3(
									makeRedeemer,
									$author$project$Cardano$Redeemer$Mint,
									id,
									redeemerF(txContext));
							},
							maybeRedeemerF);
					}),
				$author$project$Bytes$Map$values(processedIntents.mintRedeemers)));
		var sortedWithdrawalsRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, _v12) {
						var maybeDatum = _v12.c;
						return A2(
							$elm$core$Maybe$map,
							A2(makeRedeemer, $author$project$Cardano$Redeemer$Reward, id),
							maybeDatum);
					}),
				sortedWithdrawals));
		var voteRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, _v11) {
						var redeemer = _v11.b.redeemer;
						return A2(
							$elm$core$Maybe$map,
							function (redeemerF) {
								return A3(
									makeRedeemer,
									$author$project$Cardano$Redeemer$Vote,
									id,
									redeemerF(txContext));
							},
							redeemer);
					}),
				sortedVotes));
		var collateralReturnAmount = A2($elm$core$Maybe$withDefault, $author$project$Cardano$Value$zero, collateralSelection.change).lovelace;
		var totalCollateral = $elm$core$List$isEmpty(collateralSelection.selectedUtxos) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			$dwayne$elm_natural$Natural$toInt(
				function (sumCollateralInputs) {
					return A2($dwayne$elm_natural$Natural$sub, sumCollateralInputs, collateralReturnAmount);
				}(
					A3(
						$elm$core$List$foldl,
						function (_v10) {
							var o = _v10.b;
							return $dwayne$elm_natural$Natural$add(o.amount.lovelace);
						},
						$dwayne$elm_natural$Natural$zero,
						collateralSelection.selectedUtxos))));
		var collateralReturn = A2(
			$elm$core$Maybe$map,
			function (_v9) {
				var output = _v9.b;
				return A2($author$project$Cardano$Utxo$fromLovelace, output.address, collateralReturnAmount);
			},
			$elm$core$List$head(collateralSelection.selectedUtxos));
		var certificatesCreds = A2(
			$elm$core$List$concatMap,
			$author$project$Cardano$TxIntent$extractCertificateCred,
			A2($elm$core$List$map, $elm$core$Tuple$first, processedIntents.certificates));
		var certRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, _v8) {
						var maybeRedeemerF = _v8.b;
						return A2(
							$elm$core$Maybe$map,
							function (redeemerF) {
								return A3(
									makeRedeemer,
									$author$project$Cardano$Redeemer$Cert,
									id,
									redeemerF(txContext));
							},
							maybeRedeemerF);
					}),
				processedIntents.certificates));
		var allExpectedSignatures = $author$project$Bytes$Map$keys(
			$author$project$Bytes$Map$fromList(
				A2(
					$elm$core$List$map,
					function (cred) {
						return _Utils_Tuple2(
							cred,
							{});
					},
					$elm$core$List$concat(
						_List_fromArray(
							[processedIntents.requiredSigners, processedIntents.expectedSigners, walletCredsInInputs, withdrawalsStakeCreds, certificatesCreds, votesCreds])))));
		var placeholderVKeyWitness = A2(
			$elm$core$List$map,
			function (cred) {
				var credStr = $author$project$Bytes$Comparable$pretty(cred);
				return _Utils_eq(
					credStr,
					$author$project$Bytes$Comparable$toHex(cred)) ? {
					signature: A2($author$project$Bytes$Comparable$dummyWithPrefix, 64, cred),
					vkey: A2($author$project$Bytes$Comparable$dummyWithPrefix, 32, cred)
				} : {
					signature: A2($author$project$Bytes$Comparable$dummy, 64, 'SIGNATURE' + credStr),
					vkey: A2($author$project$Bytes$Comparable$dummy, 32, 'VKEY' + credStr)
				};
			},
			allExpectedSignatures);
		var algoSelected = function (allSpent) {
			return A2($turboMaCk$any_dict$Dict$Any$diff, allSpent, preSelected);
		}(
			$author$project$Cardano$Utxo$refDictFromList(
				A2(
					$elm$core$List$map,
					function (_v7) {
						var ref = _v7.a;
						return _Utils_Tuple2(ref, $elm$core$Maybe$Nothing);
					},
					txContext.inputs)));
		var sortedSpendRedeemers = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (id, _v6) {
						var maybeDatum = _v6.b;
						return A2(
							$elm$core$Maybe$map,
							A2(makeRedeemer, $author$project$Cardano$Redeemer$Spend, id),
							maybeDatum);
					}),
				$turboMaCk$any_dict$Dict$Any$toList(
					A2($turboMaCk$any_dict$Dict$Any$union, preSelected, algoSelected))));
		var _v0 = $author$project$Cardano$TxIntent$splitScripts(processedIntents.plutusScriptSources);
		var plutusScripts = _v0.a;
		var plutusScriptRefs = _v0.b;
		var _v1 = A2($author$project$Cardano$TxIntent$split, $author$project$Cardano$Witness$sourceToResult, processedIntents.nativeScriptSources);
		var nativeScripts = _v1.a;
		var nativeScriptRefs = _v1.b;
		var _v2 = A2($author$project$Cardano$TxIntent$split, $author$project$Cardano$Witness$sourceToResult, processedIntents.datumSources);
		var datumWitnessValues = _v2.a;
		var datumWitnessRefs = _v2.b;
		var allReferenceInputs = $turboMaCk$any_dict$Dict$Any$keys(
			$author$project$Cardano$Utxo$refDictFromList(
				A2(
					$elm$core$List$map,
					function (ref) {
						return _Utils_Tuple2(ref, _Utils_Tuple0);
					},
					$elm$core$List$concat(
						_List_fromArray(
							[
								A2($elm$core$List$map, $elm$core$Tuple$first, txContext.referenceInputs),
								otherInfo.referenceInputs,
								nativeScriptRefs,
								plutusScriptRefs,
								datumWitnessRefs
							])))));
		var txWitnessSet = {
			bootstrapWitness: $elm$core$Maybe$Nothing,
			nativeScripts: $author$project$Cardano$TxIntent$nothingIfEmptyList(nativeScripts),
			plutusData: $author$project$Cardano$TxIntent$nothingIfEmptyList(datumWitnessValues),
			plutusV1Script: $author$project$Cardano$TxIntent$nothingIfEmptyList(
				A2($author$project$Cardano$TxIntent$filterScriptVersion, $author$project$Cardano$Script$PlutusV1, plutusScripts)),
			plutusV2Script: $author$project$Cardano$TxIntent$nothingIfEmptyList(
				A2($author$project$Cardano$TxIntent$filterScriptVersion, $author$project$Cardano$Script$PlutusV2, plutusScripts)),
			plutusV3Script: $author$project$Cardano$TxIntent$nothingIfEmptyList(
				A2($author$project$Cardano$TxIntent$filterScriptVersion, $author$project$Cardano$Script$PlutusV3, plutusScripts)),
			redeemer: $author$project$Cardano$TxIntent$nothingIfEmptyList(
				$elm$core$List$concat(
					_List_fromArray(
						[sortedSpendRedeemers, sortedMintRedeemers, certRedeemers, sortedWithdrawalsRedeemers, voteRedeemers, proposalRedeemers]))),
			vkeywitness: $author$project$Cardano$TxIntent$nothingIfEmptyList(placeholderVKeyWitness)
		};
		var updatedTxBody = {
			auxiliaryDataHash: $elm$core$List$isEmpty(otherInfo.metadata) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2($author$project$Bytes$Comparable$dummy, 32, 'AuxDataHash')),
			certificates: A2($elm$core$List$map, $elm$core$Tuple$first, processedIntents.certificates),
			collateral: A2($elm$core$List$map, $elm$core$Tuple$first, collateralSelection.selectedUtxos),
			collateralReturn: collateralReturn,
			currentTreasuryValue: $elm$core$Maybe$Nothing,
			fee: feeAmount,
			inputs: A2($elm$core$List$map, $elm$core$Tuple$first, txContext.inputs),
			mint: processedIntents.totalMinted,
			networkId: $elm$core$Maybe$Nothing,
			outputs: txContext.outputs,
			proposalProcedures: A2($elm$core$List$map, $elm$core$Tuple$first, processedIntents.proposals),
			referenceInputs: allReferenceInputs,
			requiredSigners: processedIntents.requiredSigners,
			scriptDataHash: (_Utils_eq(txWitnessSet.redeemer, $elm$core$Maybe$Nothing) && _Utils_eq(txWitnessSet.plutusData, $elm$core$Maybe$Nothing)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2($author$project$Bytes$Comparable$dummy, 32, 'ScriptDataHash')),
			totalCollateral: totalCollateral,
			treasuryDonation: $elm$core$Maybe$Nothing,
			ttl: A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.end;
				},
				otherInfo.timeValidityRange),
			update: $elm$core$Maybe$Nothing,
			validityIntervalStart: A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.start;
				},
				otherInfo.timeValidityRange),
			votingProcedures: A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v3) {
						var votes = _v3.votes;
						return A2(
							$elm$core$List$map,
							function (_v4) {
								var actionId = _v4.actionId;
								var vote = _v4.vote;
								var rationale = _v4.rationale;
								return _Utils_Tuple2(
									actionId,
									A2($author$project$Cardano$Gov$VotingProcedure, vote, rationale));
							},
							votes);
					}),
				sortedVotes),
			withdrawals: A2(
				$elm$core$List$map,
				function (_v5) {
					var addr = _v5.a;
					var amount = _v5.b;
					return _Utils_Tuple2(addr, amount);
				},
				sortedWithdrawals)
		};
		return {
			expectedSignatures: allExpectedSignatures,
			tx: {auxiliaryData: txAuxData, body: updatedTxBody, isValid: true, witnessSet: txWitnessSet}
		};
	});
var $author$project$Cardano$TxIntent$InsufficientManualFee = function (a) {
	return {$: 'InsufficientManualFee', a: a};
};
var $dwayne$elm_natural$Natural$divBy = function (divisor) {
	return A2(
		$elm$core$Basics$composeR,
		$dwayne$elm_natural$Natural$divModBy(divisor),
		$elm$core$Maybe$map($elm$core$Tuple$first));
};
var $author$project$RationalNat$floor = function (r) {
	return A2($dwayne$elm_natural$Natural$divBy, r.denom, r.num);
};
var $author$project$RationalNat$fromSafeInt = function (_int) {
	return {
		denom: $dwayne$elm_natural$Natural$one,
		num: $dwayne$elm_natural$Natural$fromSafeInt(_int)
	};
};
var $author$project$RationalNat$RationalNat = F2(
	function (num, denom) {
		return {denom: denom, num: num};
	});
var $author$project$RationalNat$add = F2(
	function (r1, r2) {
		return {
			denom: A2($dwayne$elm_natural$Natural$mul, r1.denom, r2.denom),
			num: A2(
				$dwayne$elm_natural$Natural$add,
				A2($dwayne$elm_natural$Natural$mul, r1.num, r2.denom),
				A2($dwayne$elm_natural$Natural$mul, r2.num, r1.denom))
		};
	});
var $author$project$RationalNat$mul = F2(
	function (r1, r2) {
		return {
			denom: A2($dwayne$elm_natural$Natural$mul, r1.denom, r2.denom),
			num: A2($dwayne$elm_natural$Natural$mul, r1.num, r2.num)
		};
	});
var $author$project$Cardano$Transaction$refScriptFeeHelper = F3(
	function (p, _v0, costAccum) {
		refScriptFeeHelper:
		while (true) {
			var bytesLeft = _v0.bytesLeft;
			var tierPricePerByte = _v0.tierPricePerByte;
			if (_Utils_cmp(bytesLeft, p.sizeIncrement) < 1) {
				return A2(
					$author$project$RationalNat$add,
					costAccum,
					A2(
						$author$project$RationalNat$mul,
						tierPricePerByte,
						$author$project$RationalNat$fromSafeInt(bytesLeft)));
			} else {
				var newCostAccum = A2(
					$author$project$RationalNat$add,
					costAccum,
					A2(
						$author$project$RationalNat$mul,
						tierPricePerByte,
						$author$project$RationalNat$fromSafeInt(p.sizeIncrement)));
				var multip = A2(
					$author$project$RationalNat$RationalNat,
					$dwayne$elm_natural$Natural$fromSafeInt(p.multiplier.numerator),
					$dwayne$elm_natural$Natural$fromSafeInt(p.multiplier.denominator));
				var $temp$p = p,
					$temp$_v0 = {
					bytesLeft: bytesLeft - p.sizeIncrement,
					tierPricePerByte: A2($author$project$RationalNat$mul, multip, tierPricePerByte)
				},
					$temp$costAccum = newCostAccum;
				p = $temp$p;
				_v0 = $temp$_v0;
				costAccum = $temp$costAccum;
				continue refScriptFeeHelper;
			}
		}
	});
var $author$project$RationalNat$zero = $author$project$RationalNat$fromSafeInt(0);
var $author$project$Cardano$Transaction$computeRefScriptFee = F2(
	function (p, refScriptBytes) {
		var minFeeRefScriptCostPerByte = p.minFeeRefScriptCostPerByte;
		var baseTierPricePerByte = $author$project$RationalNat$fromSafeInt(minFeeRefScriptCostPerByte);
		return A2(
			$elm$core$Maybe$withDefault,
			$dwayne$elm_natural$Natural$zero,
			$author$project$RationalNat$floor(
				A3(
					$author$project$Cardano$Transaction$refScriptFeeHelper,
					p,
					{bytesLeft: refScriptBytes, tierPricePerByte: baseTierPricePerByte},
					$author$project$RationalNat$zero)));
	});
var $author$project$Cardano$Transaction$computeScriptExecFee = F2(
	function (_v0, tx) {
		var stepPrice = _v0.stepPrice;
		var memPrice = _v0.memPrice;
		var _v1 = A3(
			$elm$core$List$foldl,
			F2(
				function (r, _v2) {
					var steps = _v2.a;
					var mem = _v2.b;
					return _Utils_Tuple2(
						A2(
							$dwayne$elm_natural$Natural$add,
							steps,
							$dwayne$elm_natural$Natural$fromSafeInt(r.exUnits.steps)),
						A2(
							$dwayne$elm_natural$Natural$add,
							mem,
							$dwayne$elm_natural$Natural$fromSafeInt(r.exUnits.mem)));
				}),
			_Utils_Tuple2($dwayne$elm_natural$Natural$zero, $dwayne$elm_natural$Natural$zero),
			A2($elm$core$Maybe$withDefault, _List_Nil, tx.witnessSet.redeemer));
		var totalSteps = _v1.a;
		var totalMem = _v1.b;
		var totalMemCost = A2(
			$elm$core$Maybe$withDefault,
			$dwayne$elm_natural$Natural$zero,
			A2(
				$dwayne$elm_natural$Natural$divBy,
				$dwayne$elm_natural$Natural$fromSafeInt(memPrice.denominator),
				A2(
					$dwayne$elm_natural$Natural$mul,
					totalMem,
					$dwayne$elm_natural$Natural$fromSafeInt(memPrice.numerator))));
		var totalStepsCost = A2(
			$elm$core$Maybe$withDefault,
			$dwayne$elm_natural$Natural$zero,
			A2(
				$dwayne$elm_natural$Natural$divBy,
				$dwayne$elm_natural$Natural$fromSafeInt(stepPrice.denominator),
				A2(
					$dwayne$elm_natural$Natural$mul,
					totalSteps,
					$dwayne$elm_natural$Natural$fromSafeInt(stepPrice.numerator))));
		return A2($dwayne$elm_natural$Natural$add, totalStepsCost, totalMemCost);
	});
var $author$project$Cardano$Transaction$computeTxSizeFee = F2(
	function (_v0, tx) {
		var baseFee = _v0.baseFee;
		var feePerByte = _v0.feePerByte;
		return $dwayne$elm_natural$Natural$fromSafeInt(
			baseFee + (feePerByte * $author$project$Bytes$Comparable$width(
				$author$project$Cardano$Transaction$serialize(tx))));
	});
var $author$project$Cardano$Transaction$computeFees = F3(
	function (feeParams, _v0, tx) {
		var scriptExUnitPrice = feeParams.scriptExUnitPrice;
		var refScriptFeeParams = feeParams.refScriptFeeParams;
		var refScriptBytes = _v0.refScriptBytes;
		return {
			refScriptSizeFee: A2($author$project$Cardano$Transaction$computeRefScriptFee, refScriptFeeParams, refScriptBytes),
			scriptExecFee: A2($author$project$Cardano$Transaction$computeScriptExecFee, scriptExUnitPrice, tx),
			txSizeFee: A2($author$project$Cardano$Transaction$computeTxSizeFee, feeParams, tx)
		};
	});
var $author$project$Cardano$Transaction$defaultTxFeeParams = {
	baseFee: 155381,
	feePerByte: 44,
	refScriptFeeParams: {
		minFeeRefScriptCostPerByte: 15,
		multiplier: {denominator: 10, numerator: 12},
		sizeIncrement: 25600
	},
	scriptExUnitPrice: {
		memPrice: {denominator: 10000, numerator: 577},
		stepPrice: {denominator: 10000000, numerator: 721}
	}
};
var $author$project$Cardano$TxIntent$checkInsufficientFee = F3(
	function (refSize, fee, tx) {
		var declaredFee = tx.body.fee;
		var computedFee = function (_v1) {
			var txSizeFee = _v1.txSizeFee;
			var scriptExecFee = _v1.scriptExecFee;
			var refScriptSizeFee = _v1.refScriptSizeFee;
			return A2(
				$dwayne$elm_natural$Natural$add,
				refScriptSizeFee,
				A2($dwayne$elm_natural$Natural$add, txSizeFee, scriptExecFee));
		}(
			A3($author$project$Cardano$Transaction$computeFees, $author$project$Cardano$Transaction$defaultTxFeeParams, refSize, tx));
		if (A2($dwayne$elm_natural$Natural$isLessThan, computedFee, declaredFee)) {
			if (fee.$ === 'ManualFee') {
				return $elm$core$Result$Err(
					$author$project$Cardano$TxIntent$InsufficientManualFee(
						{computed: computedFee, declared: declaredFee}));
			} else {
				return $elm$core$Result$Err(
					$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('Insufficient AutoFee. Maybe we need another buildTx round?'));
			}
		} else {
			return $elm$core$Result$Ok(tx);
		}
	});
var $author$project$Cardano$Utxo$bytesWidth = function (output) {
	return $elm$bytes$Bytes$width(
		$elm_toulouse$cbor$Cbor$Encode$encode(
			$author$project$Cardano$Utxo$encodeOutput(output)));
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $author$project$Cardano$Utxo$minAda = function (output) {
	var amount = output.amount;
	var updatedOutput = A2(
		$dwayne$elm_natural$Natural$isLessThan,
		$dwayne$elm_natural$Natural$fromSafeInt(
			A2($elm$core$Basics$pow, 2, 16)),
		amount.lovelace) ? _Utils_update(
		output,
		{
			amount: _Utils_update(
				amount,
				{
					lovelace: $dwayne$elm_natural$Natural$fromSafeInt(
						A2($elm$core$Basics$pow, 2, 16))
				})
		}) : output;
	return $dwayne$elm_natural$Natural$fromSafeInt(
		(160 + $author$project$Cardano$Utxo$bytesWidth(updatedOutput)) * 4310);
};
var $author$project$Cardano$Utxo$freeAda = function (output) {
	return A2(
		$dwayne$elm_natural$Natural$sub,
		output.amount.lovelace,
		$author$project$Cardano$Utxo$minAda(output));
};
var $author$project$Cardano$CoinSelection$MaximumInputCountExceeded = {$: 'MaximumInputCountExceeded'};
var $author$project$Cardano$CoinSelection$UTxOBalanceInsufficient = function (a) {
	return {$: 'UTxOBalanceInsufficient', a: a};
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $author$project$Bytes$Map$merge = F5(
	function (whenLeft, whenBoth, whenRight, _v0, _v1) {
		var left = _v0.a;
		var right = _v1.a;
		return A5(
			$elm$core$Dict$merge,
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromHexUnchecked, whenLeft),
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromHexUnchecked, whenBoth),
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromHexUnchecked, whenRight),
			left,
			right);
	});
var $author$project$Cardano$MultiAsset$map2Assets = F4(
	function (f, _default, a1, a2) {
		var whenRight = F3(
			function (name, amount, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					name,
					A2(f, _default, amount),
					accum);
			});
		var whenLeft = F3(
			function (name, amount, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					name,
					A2(f, amount, _default),
					accum);
			});
		var whenBoth = F4(
			function (name, amount1, amount2, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					name,
					A2(f, amount1, amount2),
					accum);
			});
		return A6($author$project$Bytes$Map$merge, whenLeft, whenBoth, whenRight, a1, a2, $author$project$Bytes$Map$empty);
	});
var $author$project$Cardano$MultiAsset$map2 = F4(
	function (f, _default, m1, m2) {
		var whenRight = F3(
			function (policyId, assets, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					policyId,
					A4($author$project$Cardano$MultiAsset$map2Assets, f, _default, $author$project$Bytes$Map$empty, assets),
					accum);
			});
		var whenLeft = F3(
			function (policyId, assets, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					policyId,
					A4($author$project$Cardano$MultiAsset$map2Assets, f, _default, assets, $author$project$Bytes$Map$empty),
					accum);
			});
		var whenBoth = F4(
			function (policyId, a1, a2, accum) {
				return A3(
					$author$project$Bytes$Map$insert,
					policyId,
					A4($author$project$Cardano$MultiAsset$map2Assets, f, _default, a1, a2),
					accum);
			});
		return A6($author$project$Bytes$Map$merge, whenLeft, whenBoth, whenRight, m1, m2, $author$project$Cardano$MultiAsset$empty);
	});
var $author$project$Cardano$Value$add = F2(
	function (v1, v2) {
		return {
			assets: A4($author$project$Cardano$MultiAsset$map2, $dwayne$elm_natural$Natural$add, $dwayne$elm_natural$Natural$zero, v1.assets, v2.assets),
			lovelace: A2($dwayne$elm_natural$Natural$add, v1.lovelace, v2.lovelace)
		};
	});
var $author$project$Bytes$Map$filter = F2(
	function (f, _v0) {
		var m = _v0.a;
		return $author$project$Bytes$Map$BytesMap(
			A2(
				$elm$core$Dict$filter,
				$elm$core$Basics$always(f),
				m));
	});
var $author$project$Bytes$Map$map = F2(
	function (f, _v0) {
		var m = _v0.a;
		return $author$project$Bytes$Map$BytesMap(
			A2(
				$elm$core$Dict$map,
				$elm$core$Basics$always(f),
				m));
	});
var $author$project$Cardano$MultiAsset$normalize = F2(
	function (deletionCheck, multiAsset) {
		return A2(
			$author$project$Bytes$Map$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Bytes$Map$isEmpty),
			A2(
				$author$project$Bytes$Map$map,
				$author$project$Bytes$Map$filter(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, deletionCheck)),
				multiAsset));
	});
var $author$project$Cardano$Value$normalize = function (v) {
	return {
		assets: A2($author$project$Cardano$MultiAsset$normalize, $dwayne$elm_natural$Natural$isZero, v.assets),
		lovelace: v.lovelace
	};
};
var $author$project$Cardano$Value$subtract = F2(
	function (v1, v2) {
		return {
			assets: A4($author$project$Cardano$MultiAsset$map2, $dwayne$elm_natural$Natural$sub, $dwayne$elm_natural$Natural$zero, v1.assets, v2.assets),
			lovelace: A2($dwayne$elm_natural$Natural$sub, v1.lovelace, v2.lovelace)
		};
	});
var $author$project$Cardano$Value$atLeast = F2(
	function (minimum, v) {
		return _Utils_eq(
			$author$project$Cardano$Value$normalize(
				A2($author$project$Cardano$Value$subtract, minimum, v)),
			$author$project$Cardano$Value$zero);
	});
var $author$project$Cardano$CoinSelection$accumOutputsUntilDone = function (state) {
	accumOutputsUntilDone:
	while (true) {
		var maxInputCount = state.maxInputCount;
		var selectedInputCount = state.selectedInputCount;
		var accumulatedAmount = state.accumulatedAmount;
		var targetAmount = state.targetAmount;
		var availableOutputs = state.availableOutputs;
		var selectedOutputs = state.selectedOutputs;
		if (_Utils_cmp(selectedInputCount, maxInputCount) > 0) {
			return $elm$core$Result$Err($author$project$Cardano$CoinSelection$MaximumInputCountExceeded);
		} else {
			if (!A2($author$project$Cardano$Value$atLeast, targetAmount, accumulatedAmount)) {
				if (!availableOutputs.b) {
					return $elm$core$Result$Err(
						$author$project$Cardano$CoinSelection$UTxOBalanceInsufficient(
							{
								missingValue: $author$project$Cardano$Value$normalize(
									A2($author$project$Cardano$Value$subtract, targetAmount, accumulatedAmount)),
								selectedUtxos: selectedOutputs
							}));
				} else {
					var utxo = availableOutputs.a;
					var utxos = availableOutputs.b;
					var $temp$state = {
						accumulatedAmount: A2($author$project$Cardano$Value$add, utxo.b.amount, accumulatedAmount),
						availableOutputs: utxos,
						maxInputCount: maxInputCount,
						selectedInputCount: selectedInputCount + 1,
						selectedOutputs: A2($elm$core$List$cons, utxo, selectedOutputs),
						targetAmount: targetAmount
					};
					state = $temp$state;
					continue accumOutputsUntilDone;
				}
			} else {
				return $elm$core$Result$Ok(state);
			}
		}
	}
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $author$project$Bytes$Map$singleton = F2(
	function (k, v) {
		return $author$project$Bytes$Map$BytesMap(
			A2(
				$elm$core$Dict$singleton,
				$author$project$Bytes$Comparable$toHex(k),
				v));
	});
var $author$project$Cardano$MultiAsset$onlyToken = F3(
	function (policy, name, amount) {
		return A2(
			$author$project$Bytes$Map$singleton,
			policy,
			A2($author$project$Bytes$Map$singleton, name, amount));
	});
var $author$project$Cardano$Value$onlyToken = F3(
	function (policy, name, amount) {
		return {
			assets: A3($author$project$Cardano$MultiAsset$onlyToken, policy, name, amount),
			lovelace: $dwayne$elm_natural$Natural$zero
		};
	});
var $author$project$Cardano$CoinSelection$inOrderedListIter = F2(
	function (targets, stateResult) {
		inOrderedListIter:
		while (true) {
			var _v0 = _Utils_Tuple2(stateResult, targets);
			if (_v0.a.$ === 'Err') {
				return stateResult;
			} else {
				if (!_v0.b.b) {
					return stateResult;
				} else {
					var state = _v0.a.a;
					var _v1 = _v0.b;
					var _v2 = _v1.a;
					var policyId = _v2.a;
					var name = _v2.b;
					var amount = _v2.c;
					var others = _v1.b;
					var newState = _Utils_update(
						state,
						{
							targetAmount: A3($author$project$Cardano$Value$onlyToken, policyId, name, amount)
						});
					var $temp$targets = others,
						$temp$stateResult = $author$project$Cardano$CoinSelection$accumOutputsUntilDone(newState);
					targets = $temp$targets;
					stateResult = $temp$stateResult;
					continue inOrderedListIter;
				}
			}
		}
	});
var $author$project$Bytes$Map$foldrWithKeys = F3(
	function (f, zero, _v0) {
		var m = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromHexUnchecked, f),
			zero,
			m);
	});
var $author$project$Cardano$MultiAsset$split = function (multiAsset) {
	var processAsset = F4(
		function (policyId, asset, amount, accum) {
			return A2(
				$elm$core$List$cons,
				_Utils_Tuple3(policyId, asset, amount),
				accum);
		});
	var processPolicyId = F3(
		function (policyId, assets, accum) {
			return A3(
				$author$project$Bytes$Map$foldrWithKeys,
				processAsset(policyId),
				accum,
				assets);
		});
	return A3($author$project$Bytes$Map$foldrWithKeys, processPolicyId, _List_Nil, multiAsset);
};
var $author$project$Cardano$Value$sum = function (allValues) {
	return A3($elm$core$List$foldl, $author$project$Cardano$Value$add, $author$project$Cardano$Value$zero, allValues);
};
var $author$project$Cardano$CoinSelection$inOrderedList = F2(
	function (maxInputCount, context) {
		var targetLovelace = $author$project$Cardano$Value$onlyLovelace(context.targetAmount.lovelace);
		var targetAssets = $author$project$Cardano$MultiAsset$split(context.targetAmount.assets);
		return A2(
			$elm$core$Result$map,
			function (state) {
				return {
					change: _Utils_eq(state.accumulatedAmount, context.targetAmount) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
						$author$project$Cardano$Value$normalize(
							A2($author$project$Cardano$Value$subtract, state.accumulatedAmount, context.targetAmount))),
					selectedUtxos: state.selectedOutputs
				};
			},
			A2(
				$author$project$Cardano$CoinSelection$inOrderedListIter,
				targetAssets,
				$author$project$Cardano$CoinSelection$accumOutputsUntilDone(
					{
						accumulatedAmount: $author$project$Cardano$Value$sum(
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									function ($) {
										return $.amount;
									}),
								context.alreadySelectedUtxos)),
						availableOutputs: context.availableUtxos,
						maxInputCount: maxInputCount,
						selectedInputCount: $elm$core$List$length(context.alreadySelectedUtxos),
						selectedOutputs: context.alreadySelectedUtxos,
						targetAmount: targetLovelace
					})));
	});
var $author$project$Cardano$Utxo$isAdaOnly = function (_v0) {
	var amount = _v0.amount;
	var datumOption = _v0.datumOption;
	var referenceScript = _v0.referenceScript;
	return _Utils_eq(amount.assets, $author$project$Cardano$MultiAsset$empty) && (_Utils_eq(datumOption, $elm$core$Maybe$Nothing) && _Utils_eq(referenceScript, $elm$core$Maybe$Nothing));
};
var $author$project$Cardano$Utxo$isAssetsOnly = function (_v0) {
	var datumOption = _v0.datumOption;
	var referenceScript = _v0.referenceScript;
	return _Utils_eq(datumOption, $elm$core$Maybe$Nothing) && _Utils_eq(referenceScript, $elm$core$Maybe$Nothing);
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $turboMaCk$any_dict$Dict$Any$member = F2(
	function (k, _v0) {
		var toKey = _v0.a.toKey;
		var dict = _v0.a.dict;
		return A2(
			$elm$core$Dict$member,
			toKey(k),
			dict);
	});
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Cardano$CoinSelection$collateral = function (_v0) {
	var availableUtxos = _v0.availableUtxos;
	var allowedAddresses = _v0.allowedAddresses;
	var targetAmount = _v0.targetAmount;
	var utxosInAllowedAddresses = A2(
		$elm$core$List$filter,
		function (_v10) {
			var output = _v10.b;
			return A2($turboMaCk$any_dict$Dict$Any$member, output.address, allowedAddresses);
		},
		availableUtxos);
	var maxInputCount = 3;
	var adaOnlyThreshold = A2(
		$dwayne$elm_natural$Natural$add,
		targetAmount,
		$dwayne$elm_natural$Natural$fromSafeInt(1000000));
	var adaComparableAmount = function (lovelace) {
		return $dwayne$elm_natural$Natural$toInt(
			A2(
				$elm$core$Maybe$withDefault,
				$dwayne$elm_natural$Natural$zero,
				A2(
					$dwayne$elm_natural$Natural$divBy,
					$dwayne$elm_natural$Natural$fromSafeInt(100000),
					lovelace)));
	};
	var _v1 = A2(
		$elm$core$List$partition,
		function (_v2) {
			var output = _v2.b;
			return $author$project$Cardano$Utxo$isAdaOnly(output);
		},
		utxosInAllowedAddresses);
	var adaOnly = _v1.a;
	var notAdaOnly = _v1.b;
	var _v3 = A2(
		$elm$core$List$partition,
		function (_v4) {
			var output = _v4.b;
			return $author$project$Cardano$Utxo$isAssetsOnly(output);
		},
		notAdaOnly);
	var assetsOnly = _v3.a;
	var notAssetsOnly = _v3.b;
	var _v5 = A2(
		$elm$core$List$partition,
		function (_v6) {
			var amount = _v6.b.amount;
			return A2($dwayne$elm_natural$Natural$isGreaterThan, adaOnlyThreshold, amount.lovelace);
		},
		adaOnly);
	var highAdaOnly = _v5.a;
	var lowAdaOnly = _v5.b;
	var highAdaOnlyCount = $elm$core$List$length(highAdaOnly);
	var highAdaOnlySorted = A2(
		$elm$core$List$sortBy,
		function (_v9) {
			var amount = _v9.b.amount;
			return adaComparableAmount(amount.lovelace);
		},
		highAdaOnly);
	var viableUtxos = function () {
		if (_Utils_cmp(highAdaOnlyCount, maxInputCount) > -1) {
			return highAdaOnlySorted;
		} else {
			var assetOnlyThreshold = A2(
				$dwayne$elm_natural$Natural$add,
				adaOnlyThreshold,
				$dwayne$elm_natural$Natural$fromSafeInt(1000000));
			var _v7 = A2(
				$elm$core$List$partition,
				function (_v8) {
					var amount = _v8.b.amount;
					return A2($dwayne$elm_natural$Natural$isGreaterThan, assetOnlyThreshold, amount.lovelace);
				},
				assetsOnly);
			var highAssetsOnly = _v7.a;
			var lowAssetsOnly = _v7.b;
			var highAssetsOnlyCount = $elm$core$List$length(highAssetsOnly);
			var highAssetsOnlySorted = A2(
				$elm$core$List$sortBy,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Cardano$Utxo$bytesWidth),
				highAssetsOnly);
			if (_Utils_cmp(highAdaOnlyCount + highAssetsOnlyCount, maxInputCount) > -1) {
				return $elm$core$List$concat(
					_List_fromArray(
						[highAdaOnlySorted, highAssetsOnlySorted]));
			} else {
				var freeAdaComparable = function (output) {
					return adaComparableAmount(
						$author$project$Cardano$Utxo$freeAda(output));
				};
				var allOtherUtxos = $elm$core$List$concat(
					_List_fromArray(
						[lowAdaOnly, lowAssetsOnly, notAssetsOnly]));
				var allOtherUtxosSorted = A2(
					$elm$core$List$sortBy,
					A2($elm$core$Basics$composeR, $elm$core$Tuple$second, freeAdaComparable),
					allOtherUtxos);
				return $elm$core$List$concat(
					_List_fromArray(
						[highAdaOnlySorted, highAssetsOnlySorted, allOtherUtxosSorted]));
			}
		}
	}();
	return A2(
		$author$project$Cardano$CoinSelection$inOrderedList,
		maxInputCount,
		{
			alreadySelectedUtxos: _List_Nil,
			availableUtxos: viableUtxos,
			targetAmount: $author$project$Cardano$Value$onlyLovelace(targetAmount)
		});
};
var $author$project$Cardano$Address$Byron = function (a) {
	return {$: 'Byron', a: a};
};
var $author$project$Cardano$TxIntent$FailedToPerformCoinSelection = function (a) {
	return {$: 'FailedToPerformCoinSelection', a: a};
};
var $author$project$Cardano$TxIntent$NotEnoughMinAda = function (a) {
	return {$: 'NotEnoughMinAda', a: a};
};
var $author$project$Cardano$Utxo$Output = F4(
	function (address, amount, datumOption, referenceScript) {
		return {address: address, amount: amount, datumOption: datumOption, referenceScript: referenceScript};
	});
var $dwayne$elm_natural$Natural$isGreaterThanOrEqual = F2(
	function (b, a) {
		return !A2($dwayne$elm_natural$Natural$isLessThan, b, a);
	});
var $author$project$Cardano$Utxo$lovelace = function (output) {
	return output.amount.lovelace;
};
var $elm$core$Debug$toString = _Debug_toString;
var $dwayne$elm_natural$Natural$toDecimalString = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_natural$Natural$toBaseBString(10),
	$elm$core$Maybe$withDefault(''));
var $dwayne$elm_natural$Natural$toString = $dwayne$elm_natural$Natural$toDecimalString;
var $author$project$Cardano$Utxo$checkMinAda = function (output) {
	var outputMinAda = $author$project$Cardano$Utxo$minAda(output);
	return A2(
		$dwayne$elm_natural$Natural$isGreaterThanOrEqual,
		outputMinAda,
		$author$project$Cardano$Utxo$lovelace(output)) ? $elm$core$Result$Ok(output) : $elm$core$Result$Err(
		'Output has less ada than its required min ada (' + ($dwayne$elm_natural$Natural$toString(outputMinAda) + ('):\n' + $elm$core$Debug$toString(output))));
};
var $author$project$Cardano$TxIntent$defaultAutoFee = $dwayne$elm_natural$Natural$fromSafeInt(500000);
var $author$project$Bytes$Comparable$empty = $author$project$Bytes$Comparable$fromHexUnchecked('');
var $author$project$Cardano$Address$emptyDict = $turboMaCk$any_dict$Dict$Any$empty(
	A2(
		$elm$core$Basics$composeR,
		$author$project$Cardano$Address$toCbor,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Encode$encode,
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromBytes, $author$project$Bytes$Comparable$toHex))));
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $turboMaCk$any_dict$Dict$Any$merge = F5(
	function (f, g, h, _v0, _v1) {
		var inner = _v0.a;
		var dict = _v1.a.dict;
		var l = F3(
			function (fc, _v5, _v6) {
				var k = _v6.a;
				var v = _v6.b;
				return A2(fc, k, v);
			});
		return A5(
			$elm$core$Dict$merge,
			l(f),
			F3(
				function (_v2, _v3, _v4) {
					var k = _v3.a;
					var a = _v3.b;
					var b = _v4.b;
					return A3(g, k, a, b);
				}),
			l(h),
			inner.dict,
			dict);
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$Cardano$CoinSelection$resultDictJoin = function (dict) {
	return A3(
		$turboMaCk$any_dict$Dict$Any$foldl,
		function (key) {
			return $elm$core$Result$map2(
				$turboMaCk$any_dict$Dict$Any$insert(key));
		},
		$elm$core$Result$Ok(
			$turboMaCk$any_dict$Dict$Any$removeAll(dict)),
		dict);
};
var $author$project$Cardano$CoinSelection$perAddress = F2(
	function (perAddressConfig, perAddressContext) {
		var maxInputCount = 10;
		var handleAddress = F2(
			function (addr, _v6) {
				var availableUtxos = _v6.availableUtxos;
				var alreadySelectedUtxos = _v6.alreadySelectedUtxos;
				var targetValue = _v6.targetValue;
				var alreadyOwed = _v6.alreadyOwed;
				var context = function (iterationTargetValue) {
					return {alreadySelectedUtxos: alreadySelectedUtxos, availableUtxos: availableUtxos, targetAmount: iterationTargetValue};
				};
				var _v0 = perAddressConfig(addr);
				var selectionAlgo = _v0.selectionAlgo;
				var normalizationAlgo = _v0.normalizationAlgo;
				var changeAlgo = _v0.changeAlgo;
				var _v1 = normalizationAlgo(
					{owed: alreadyOwed, target: targetValue});
				var normalizedTarget = _v1.normalizedTarget;
				var normalizedOwed = _v1.normalizedOwed;
				var isOwed = !_Utils_eq(normalizedOwed, $author$project$Cardano$Value$zero);
				var makeChangeOutput = function (selection) {
					var _v3 = _Utils_Tuple2(selection.change, isOwed);
					if ((_v3.a.$ === 'Nothing') && (!_v3.b)) {
						var _v4 = _v3.a;
						return $elm$core$Result$Ok(
							{changeOutputs: _List_Nil, selectedUtxos: selection.selectedUtxos});
					} else {
						var totalChange = A2(
							$author$project$Cardano$Value$add,
							A2($elm$core$Maybe$withDefault, $author$project$Cardano$Value$zero, selection.change),
							normalizedOwed);
						var splitChange = changeAlgo(totalChange);
						var changeOutputs = A2(
							$elm$core$List$map,
							function (value) {
								return A4($author$project$Cardano$Utxo$Output, addr, value, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
							},
							splitChange);
						var _v5 = $elm_community$result_extra$Result$Extra$combine(
							A2($elm$core$List$map, $author$project$Cardano$Utxo$checkMinAda, changeOutputs));
						if (_v5.$ === 'Ok') {
							return $elm$core$Result$Ok(
								{changeOutputs: changeOutputs, selectedUtxos: selection.selectedUtxos});
						} else {
							var missingMinAda = function (output) {
								return A2(
									$dwayne$elm_natural$Natural$sub,
									$author$project$Cardano$Utxo$minAda(output),
									output.amount.lovelace);
							};
							var totalMissingAda = A3(
								$elm$core$List$foldl,
								$dwayne$elm_natural$Natural$add,
								$dwayne$elm_natural$Natural$zero,
								A2($elm$core$List$map, missingMinAda, changeOutputs));
							return $elm$core$Result$Err(
								$author$project$Cardano$CoinSelection$UTxOBalanceInsufficient(
									{
										missingValue: $author$project$Cardano$Value$onlyLovelace(totalMissingAda),
										selectedUtxos: selection.selectedUtxos
									}));
						}
					}
				};
				var coinSelectIter = function (iterationTargetValue) {
					return A2(
						$elm$core$Result$andThen,
						makeChangeOutput,
						A2(
							selectionAlgo,
							maxInputCount,
							context(iterationTargetValue)));
				};
				var _v2 = coinSelectIter(normalizedTarget);
				if ((_v2.$ === 'Err') && (_v2.a.$ === 'UTxOBalanceInsufficient')) {
					var err = _v2;
					var err1 = err.a.a;
					return $author$project$Cardano$MultiAsset$isEmpty(err1.missingValue.assets) ? coinSelectIter(
						A2($author$project$Cardano$Value$add, normalizedTarget, err1.missingValue)) : err;
				} else {
					var selectionResult = _v2;
					return selectionResult;
				}
			});
		return $author$project$Cardano$CoinSelection$resultDictJoin(
			A2($turboMaCk$any_dict$Dict$Any$map, handleAddress, perAddressContext));
	});
var $author$project$Cardano$TxIntent$resultDictJoin = function (dict) {
	return A3(
		$turboMaCk$any_dict$Dict$Any$foldl,
		function (key) {
			return $elm$core$Result$map2(
				$turboMaCk$any_dict$Dict$Any$insert(key));
		},
		$elm$core$Result$Ok(
			$turboMaCk$any_dict$Dict$Any$removeAll(dict)),
		dict);
};
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $turboMaCk$any_dict$Dict$Any$update = F3(
	function (k, f, _v0) {
		var inner = _v0.a;
		var updateDict = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$Maybe$map(
					function (b) {
						return _Utils_Tuple2(k, b);
					}),
				f),
			$elm$core$Maybe$map($elm$core$Tuple$second));
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						$elm$core$Dict$update,
						inner.toKey(k),
						updateDict,
						inner.dict)
				}));
	});
var $author$project$Cardano$TxIntent$computeCoinSelection = F4(
	function (localStateUtxos, fee, processedIntents, coinSelectionAlgo) {
		var perAddressConfig = function (_v5) {
			return {
				changeAlgo: function (value) {
					return _List_fromArray(
						[value]);
				},
				normalizationAlgo: function (_v4) {
					var target = _v4.target;
					var owed = _v4.owed;
					return {normalizedOwed: owed, normalizedTarget: target};
				},
				selectionAlgo: coinSelectionAlgo
			};
		};
		var addFee = F3(
			function (addr, amount, dict) {
				return A3(
					$turboMaCk$any_dict$Dict$Any$update,
					addr,
					A2(
						$elm$core$Basics$composeL,
						A2(
							$elm$core$Basics$composeL,
							$elm$core$Maybe$Just,
							$author$project$Cardano$Value$add(
								$author$project$Cardano$Value$onlyLovelace(amount))),
						$elm$core$Maybe$withDefault($author$project$Cardano$Value$zero)),
					dict);
			});
		var freeInputsWithFee = function () {
			if (fee.$ === 'ManualFee') {
				var perAddressFee = fee.a;
				return A3(
					$elm$core$List$foldl,
					function (_v3) {
						var paymentSource = _v3.paymentSource;
						var exactFeeAmount = _v3.exactFeeAmount;
						return A2(addFee, paymentSource, exactFeeAmount);
					},
					processedIntents.freeInputs,
					perAddressFee);
			} else {
				var paymentSource = fee.a.paymentSource;
				return A3(addFee, paymentSource, $author$project$Cardano$TxIntent$defaultAutoFee, processedIntents.freeInputs);
			}
		}();
		var independentFreeOutputValues = A2($turboMaCk$any_dict$Dict$Any$diff, processedIntents.freeOutputs, freeInputsWithFee);
		var validIndependentFreeOutputs = A2(
			$elm$core$Result$mapError,
			$author$project$Cardano$TxIntent$NotEnoughMinAda,
			$author$project$Cardano$TxIntent$resultDictJoin(
				A2(
					$turboMaCk$any_dict$Dict$Any$map,
					F2(
						function (addr, output) {
							return $author$project$Cardano$Utxo$checkMinAda(
								A2($author$project$Cardano$Utxo$simpleOutput, addr, output));
						}),
					independentFreeOutputValues)));
		var perAddressContext = function () {
			var relatedFreeOutputValues = A2($turboMaCk$any_dict$Dict$Any$diff, processedIntents.freeOutputs, independentFreeOutputValues);
			var insertInUtxoListDict = F2(
				function (ref, output) {
					return A2(
						$turboMaCk$any_dict$Dict$Any$update,
						output.address,
						A2(
							$elm$core$Basics$composeL,
							A2(
								$elm$core$Basics$composeL,
								$elm$core$Maybe$Just,
								$elm$core$List$cons(
									_Utils_Tuple2(ref, output))),
							$elm$core$Maybe$withDefault(_List_Nil)));
				});
			var guarantedUtxosPerAddress = A3($turboMaCk$any_dict$Dict$Any$foldl, insertInUtxoListDict, $author$project$Cardano$Address$emptyDict, processedIntents.guaranteedUtxos);
			var dummyOutput = A4(
				$author$project$Cardano$Utxo$Output,
				$author$project$Cardano$Address$Byron($author$project$Bytes$Comparable$empty),
				$author$project$Cardano$Value$zero,
				$elm$core$Maybe$Nothing,
				$elm$core$Maybe$Nothing);
			var notAvailableUtxos = A2(
				$turboMaCk$any_dict$Dict$Any$union,
				processedIntents.guaranteedUtxos,
				A2(
					$turboMaCk$any_dict$Dict$Any$map,
					F2(
						function (_v0, _v1) {
							return dummyOutput;
						}),
					processedIntents.preSelected.inputs));
			var availableUtxos = A3(
				$turboMaCk$any_dict$Dict$Any$foldl,
				insertInUtxoListDict,
				$author$project$Cardano$Address$emptyDict,
				A2($turboMaCk$any_dict$Dict$Any$diff, localStateUtxos, notAvailableUtxos));
			var context = F3(
				function (addr, targetValue, alreadyOwed) {
					return {
						alreadyOwed: alreadyOwed,
						alreadySelectedUtxos: A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2($turboMaCk$any_dict$Dict$Any$get, addr, guarantedUtxosPerAddress)),
						availableUtxos: A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2($turboMaCk$any_dict$Dict$Any$get, addr, availableUtxos)),
						targetValue: targetValue
					};
				});
			var whenBoth = F3(
				function (addr, input, output) {
					return A2(
						$turboMaCk$any_dict$Dict$Any$insert,
						addr,
						A3(context, addr, input, output));
				});
			var whenInput = F2(
				function (addr, v) {
					return A2(
						$turboMaCk$any_dict$Dict$Any$insert,
						addr,
						A3(context, addr, v, $author$project$Cardano$Value$zero));
				});
			var whenOutput = F2(
				function (addr, v) {
					return A2(
						$turboMaCk$any_dict$Dict$Any$insert,
						addr,
						A3(context, addr, $author$project$Cardano$Value$zero, v));
				});
			return A6($turboMaCk$any_dict$Dict$Any$merge, whenInput, whenBoth, whenOutput, freeInputsWithFee, relatedFreeOutputValues, $author$project$Cardano$Address$emptyDict);
		}();
		var coinSelectionAndChangeOutputs = A2(
			$elm$core$Result$mapError,
			$author$project$Cardano$TxIntent$FailedToPerformCoinSelection,
			A2($author$project$Cardano$CoinSelection$perAddress, perAddressConfig, perAddressContext));
		return A3(
			$elm$core$Result$map2,
			$turboMaCk$any_dict$Dict$Any$foldl(
				F2(
					function (addr, output) {
						return A2(
							$turboMaCk$any_dict$Dict$Any$insert,
							addr,
							{
								changeOutputs: _List_fromArray(
									[output]),
								selectedUtxos: _List_Nil
							});
					})),
			coinSelectionAndChangeOutputs,
			validIndependentFreeOutputs);
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$Cardano$TxIntent$computeRefScriptBytes = F2(
	function (localStateUtxos, references) {
		return $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				function (scriptRef) {
					return $author$project$Bytes$Comparable$width(
						$author$project$Cardano$Script$refBytes(scriptRef));
				},
				A2(
					$elm$core$List$filterMap,
					function (ref) {
						return A2(
							$elm$core$Maybe$andThen,
							function ($) {
								return $.referenceScript;
							},
							A2($turboMaCk$any_dict$Dict$Any$get, ref, localStateUtxos));
					},
					$turboMaCk$any_dict$Dict$Any$keys(
						$author$project$Cardano$Utxo$refDictFromList(
							A2(
								$elm$core$List$map,
								function (r) {
									return _Utils_Tuple2(r, _Utils_Tuple0);
								},
								references))))));
	});
var $author$project$Cardano$Address$dictFromList = $turboMaCk$any_dict$Dict$Any$fromList(
	A2(
		$elm$core$Basics$composeR,
		$author$project$Cardano$Address$toCbor,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Encode$encode,
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromBytes, $author$project$Bytes$Comparable$toHex))));
var $author$project$Cardano$TxContext$fromTx = F2(
	function (utxos, _v0) {
		var body = _v0.body;
		var witnessSet = _v0.witnessSet;
		var refsToUtxos = function (refs) {
			return A2(
				$elm$core$List$filterMap,
				function (ref) {
					return A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$pair(ref),
						A2($turboMaCk$any_dict$Dict$Any$get, ref, utxos));
				},
				refs);
		};
		return {
			certificates: body.certificates,
			currentTreasuryValue: body.currentTreasuryValue,
			fee: body.fee,
			inputs: refsToUtxos(body.inputs),
			mint: body.mint,
			outputs: body.outputs,
			proposals: body.proposalProcedures,
			redeemers: A2($elm$core$Maybe$withDefault, _List_Nil, witnessSet.redeemer),
			referenceInputs: refsToUtxos(body.referenceInputs),
			requiredSigners: body.requiredSigners,
			treasuryDonation: body.treasuryDonation,
			validityRange: {end: body.ttl, start: body.validityIntervalStart},
			votes: body.votingProcedures,
			withdrawals: body.withdrawals
		};
	});
var $author$project$Cardano$Address$isShelleyWallet = function (address) {
	return !_Utils_eq(
		$author$project$Cardano$Address$extractPubKeyHash(address),
		$elm$core$Maybe$Nothing);
};
var $dwayne$elm_natural$Natural$min = F2(
	function (a, b) {
		return A2($dwayne$elm_natural$Natural$isLessThanOrEqual, b, a) ? a : b;
	});
var $author$project$Cardano$TxContext$new = {
	certificates: _List_Nil,
	currentTreasuryValue: $elm$core$Maybe$Nothing,
	fee: $dwayne$elm_natural$Natural$zero,
	inputs: _List_Nil,
	mint: $author$project$Cardano$MultiAsset$empty,
	outputs: _List_Nil,
	proposals: _List_Nil,
	redeemers: _List_Nil,
	referenceInputs: _List_Nil,
	requiredSigners: _List_Nil,
	treasuryDonation: $elm$core$Maybe$Nothing,
	validityRange: {end: $elm$core$Maybe$Nothing, start: $elm$core$Maybe$Nothing},
	votes: _List_Nil,
	withdrawals: _List_Nil
};
var $author$project$Cardano$Witness$ReferenceOutputsMissingFromLocalState = function (a) {
	return {$: 'ReferenceOutputsMissingFromLocalState', a: a};
};
var $author$project$Cardano$TxIntent$UnbalancedIntents = F2(
	function (a, b) {
		return {$: 'UnbalancedIntents', a: a, b: b};
	});
var $author$project$Cardano$TxIntent$WitnessError = function (a) {
	return {$: 'WitnessError', a: a};
};
var $author$project$Cardano$TxIntent$addPreSelectedInput = F4(
	function (ref, value, maybeRedeemer, _v0) {
		var sum = _v0.sum;
		var inputs = _v0.inputs;
		return {
			inputs: A3($turboMaCk$any_dict$Dict$Any$insert, ref, maybeRedeemer, inputs),
			sum: A2($author$project$Cardano$Value$add, value, sum)
		};
	});
var $author$project$Cardano$Value$addTokens = F2(
	function (tokens, v) {
		return A2(
			$author$project$Cardano$Value$add,
			{assets: tokens, lovelace: $dwayne$elm_natural$Natural$zero},
			v);
	});
var $author$project$Bytes$Map$foldlWithKeys = F3(
	function (f, zero, _v0) {
		var m = _v0.a;
		return A3(
			$elm$core$Dict$foldl,
			A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromHexUnchecked, f),
			zero,
			m);
	});
var $author$project$Bytes$Map$update = F3(
	function (k, f, _v0) {
		var m = _v0.a;
		return $author$project$Bytes$Map$BytesMap(
			A3(
				$elm$core$Dict$update,
				$author$project$Bytes$Comparable$toHex(k),
				f,
				m));
	});
var $author$project$Cardano$MultiAsset$balance = function (assets) {
	var initBalance = {burned: $author$project$Bytes$Map$empty, minted: $author$project$Bytes$Map$empty};
	var increase = F2(
		function (amount, maybePreviousAmount) {
			return $elm$core$Maybe$Just(
				A2(
					$dwayne$elm_natural$Natural$add,
					amount,
					A2($elm$core$Maybe$withDefault, $dwayne$elm_natural$Natural$zero, maybePreviousAmount)));
		});
	var processAsset = F3(
		function (name, amount, _v0) {
			var minted = _v0.minted;
			var burned = _v0.burned;
			return $dwayne$elm_integer$Integer$isNonNegative(amount) ? {
				burned: burned,
				minted: A3(
					$author$project$Bytes$Map$update,
					name,
					increase(
						$dwayne$elm_integer$Integer$toNatural(amount)),
					minted)
			} : {
				burned: A3(
					$author$project$Bytes$Map$update,
					name,
					increase(
						$dwayne$elm_integer$Integer$toNatural(amount)),
					burned),
				minted: minted
			};
		});
	return A3($author$project$Bytes$Map$foldlWithKeys, processAsset, initBalance, assets);
};
var $author$project$Cardano$Witness$extractRef = function (source) {
	if (source.$ === 'ByValue') {
		return $elm$core$Maybe$Nothing;
	} else {
		var ref = source.a;
		return $elm$core$Maybe$Just(ref);
	}
};
var $turboMaCk$any_dict$Dict$Any$isEmpty = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$isEmpty(dict);
};
var $author$project$Cardano$Gov$AlwaysAbstain = {$: 'AlwaysAbstain'};
var $author$project$Cardano$Gov$AlwaysNoConfidence = {$: 'AlwaysNoConfidence'};
var $author$project$Cardano$Gov$DrepCredential = function (a) {
	return {$: 'DrepCredential', a: a};
};
var $author$project$Cardano$Transaction$PoolRegistrationCert = function (a) {
	return {$: 'PoolRegistrationCert', a: a};
};
var $author$project$Cardano$Transaction$PoolRetirementCert = function (a) {
	return {$: 'PoolRetirementCert', a: a};
};
var $author$project$Cardano$Transaction$RegCert = function (a) {
	return {$: 'RegCert', a: a};
};
var $author$project$Cardano$Transaction$RegDrepCert = function (a) {
	return {$: 'RegDrepCert', a: a};
};
var $author$project$Cardano$Address$ScriptHash = function (a) {
	return {$: 'ScriptHash', a: a};
};
var $author$project$Cardano$Transaction$StakeDelegationCert = function (a) {
	return {$: 'StakeDelegationCert', a: a};
};
var $author$project$Cardano$Transaction$UnregCert = function (a) {
	return {$: 'UnregCert', a: a};
};
var $author$project$Cardano$Transaction$UnregDrepCert = function (a) {
	return {$: 'UnregDrepCert', a: a};
};
var $author$project$Cardano$Address$VKeyHash = function (a) {
	return {$: 'VKeyHash', a: a};
};
var $author$project$Cardano$Transaction$VoteDelegCert = function (a) {
	return {$: 'VoteDelegCert', a: a};
};
var $author$project$Cardano$Gov$VoterCommitteeHotCred = function (a) {
	return {$: 'VoterCommitteeHotCred', a: a};
};
var $author$project$Cardano$Gov$VoterDrepCred = function (a) {
	return {$: 'VoterDrepCred', a: a};
};
var $author$project$Cardano$Gov$VoterPoolId = function (a) {
	return {$: 'VoterPoolId', a: a};
};
var $author$project$Cardano$TxIntent$noIntent = {
	certificates: _List_Nil,
	datumSources: _List_Nil,
	expectedSigners: _List_Nil,
	freeInputs: $author$project$Cardano$Address$emptyDict,
	freeOutputs: $author$project$Cardano$Address$emptyDict,
	guaranteedUtxos: _List_Nil,
	mints: _List_Nil,
	nativeScriptSources: _List_Nil,
	plutusScriptSources: _List_Nil,
	preCreated: function (_v0) {
		return {outputs: _List_Nil, sum: $author$project$Cardano$Value$zero};
	},
	preSelected: _List_Nil,
	proposalIntents: _List_Nil,
	requiredSigners: _List_Nil,
	totalDeposit: $dwayne$elm_natural$Natural$zero,
	totalRefund: $dwayne$elm_natural$Natural$zero,
	votes: _List_Nil,
	withdrawals: _List_Nil
};
var $author$project$Cardano$TxIntent$preprocessCert = F5(
	function (certWithKeyF, certWithScriptF, _v0, cred, preProcessedIntents) {
		var deposit = _v0.deposit;
		var refund = _v0.refund;
		if (cred.$ === 'WithKey') {
			var keyCred = cred.a;
			return _Utils_update(
				preProcessedIntents,
				{
					certificates: A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							certWithKeyF(keyCred),
							$elm$core$Maybe$Nothing),
						preProcessedIntents.certificates),
					totalDeposit: A2($dwayne$elm_natural$Natural$add, deposit, preProcessedIntents.totalDeposit),
					totalRefund: A2($dwayne$elm_natural$Natural$add, refund, preProcessedIntents.totalRefund)
				});
		} else {
			if (cred.b.$ === 'Native') {
				var scriptHash = cred.a;
				var script = cred.b.a.script;
				var expectedSigners = cred.b.a.expectedSigners;
				return _Utils_update(
					preProcessedIntents,
					{
						certificates: A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								certWithScriptF(scriptHash),
								$elm$core$Maybe$Nothing),
							preProcessedIntents.certificates),
						expectedSigners: A2($elm$core$List$cons, expectedSigners, preProcessedIntents.expectedSigners),
						nativeScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.nativeScriptSources),
						totalDeposit: A2($dwayne$elm_natural$Natural$add, deposit, preProcessedIntents.totalDeposit),
						totalRefund: A2($dwayne$elm_natural$Natural$add, refund, preProcessedIntents.totalRefund)
					});
			} else {
				var scriptHash = cred.a;
				var script = cred.b.a.script;
				var redeemerData = cred.b.a.redeemerData;
				var requiredSigners = cred.b.a.requiredSigners;
				return _Utils_update(
					preProcessedIntents,
					{
						certificates: A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								certWithScriptF(scriptHash),
								$elm$core$Maybe$Just(redeemerData)),
							preProcessedIntents.certificates),
						plutusScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.plutusScriptSources),
						requiredSigners: A2($elm$core$List$cons, requiredSigners, preProcessedIntents.requiredSigners),
						totalDeposit: A2($dwayne$elm_natural$Natural$add, deposit, preProcessedIntents.totalDeposit),
						totalRefund: A2($dwayne$elm_natural$Natural$add, refund, preProcessedIntents.totalRefund)
					});
			}
		}
	});
var $author$project$Cardano$TxIntent$preProcessIntents = function (txIntents) {
	var freeValueAdd = F3(
		function (addr, v, freeValue) {
			return A3(
				$turboMaCk$any_dict$Dict$Any$update,
				addr,
				A2(
					$elm$core$Basics$composeL,
					A2(
						$elm$core$Basics$composeL,
						$elm$core$Maybe$Just,
						$author$project$Cardano$Value$add(v)),
					$elm$core$Maybe$withDefault($author$project$Cardano$Value$zero)),
				freeValue);
		});
	var stepIntent = F2(
		function (txIntent, preProcessedIntents) {
			switch (txIntent.$) {
				case 'SendTo':
					var addr = txIntent.a;
					var v = txIntent.b;
					return _Utils_update(
						preProcessedIntents,
						{
							freeOutputs: A3(freeValueAdd, addr, v, preProcessedIntents.freeOutputs)
						});
				case 'SendToOutput':
					var newOutput = txIntent.a;
					var newPreCreated = function (txContext) {
						var _v1 = preProcessedIntents.preCreated(txContext);
						var sum = _v1.sum;
						var outputs = _v1.outputs;
						return {
							outputs: A2($elm$core$List$cons, newOutput, outputs),
							sum: A2($author$project$Cardano$Value$add, sum, newOutput.amount)
						};
					};
					return _Utils_update(
						preProcessedIntents,
						{preCreated: newPreCreated});
				case 'SendToOutputAdvanced':
					var f = txIntent.a;
					var newPreCreated = function (txContext) {
						var newOutput = f(txContext);
						var _v2 = preProcessedIntents.preCreated(txContext);
						var sum = _v2.sum;
						var outputs = _v2.outputs;
						return {
							outputs: A2($elm$core$List$cons, newOutput, outputs),
							sum: A2($author$project$Cardano$Value$add, sum, newOutput.amount)
						};
					};
					return _Utils_update(
						preProcessedIntents,
						{preCreated: newPreCreated});
				case 'Spend':
					switch (txIntent.a.$) {
						case 'FromWallet':
							var address = txIntent.a.a.address;
							var value = txIntent.a.a.value;
							var guaranteedUtxos = txIntent.a.a.guaranteedUtxos;
							return _Utils_update(
								preProcessedIntents,
								{
									freeInputs: A3(freeValueAdd, address, value, preProcessedIntents.freeInputs),
									guaranteedUtxos: _Utils_ap(guaranteedUtxos, preProcessedIntents.guaranteedUtxos)
								});
						case 'FromNativeScript':
							var spentInput = txIntent.a.a.spentInput;
							var nativeScriptWitness = txIntent.a.a.nativeScriptWitness;
							return _Utils_update(
								preProcessedIntents,
								{
									expectedSigners: A2($elm$core$List$cons, nativeScriptWitness.expectedSigners, preProcessedIntents.expectedSigners),
									nativeScriptSources: A2($elm$core$List$cons, nativeScriptWitness.script, preProcessedIntents.nativeScriptSources),
									preSelected: A2(
										$elm$core$List$cons,
										{input: spentInput, redeemer: $elm$core$Maybe$Nothing},
										preProcessedIntents.preSelected)
								});
						default:
							var spentInput = txIntent.a.a.spentInput;
							var datumWitness = txIntent.a.a.datumWitness;
							var plutusScriptWitness = txIntent.a.a.plutusScriptWitness;
							var newDatumSources = function () {
								if (datumWitness.$ === 'Nothing') {
									return preProcessedIntents.datumSources;
								} else {
									var datumSource = datumWitness.a;
									return A2($elm$core$List$cons, datumSource, preProcessedIntents.datumSources);
								}
							}();
							return _Utils_update(
								preProcessedIntents,
								{
									datumSources: newDatumSources,
									plutusScriptSources: A2($elm$core$List$cons, plutusScriptWitness.script, preProcessedIntents.plutusScriptSources),
									preSelected: A2(
										$elm$core$List$cons,
										{
											input: spentInput,
											redeemer: $elm$core$Maybe$Just(plutusScriptWitness.redeemerData)
										},
										preProcessedIntents.preSelected),
									requiredSigners: A2($elm$core$List$cons, plutusScriptWitness.requiredSigners, preProcessedIntents.requiredSigners)
								});
					}
				case 'MintBurn':
					var policyId = txIntent.a.policyId;
					var assets = txIntent.a.assets;
					var scriptWitness = txIntent.a.scriptWitness;
					if (scriptWitness.$ === 'Native') {
						var script = scriptWitness.a.script;
						var expectedSigners = scriptWitness.a.expectedSigners;
						return _Utils_update(
							preProcessedIntents,
							{
								expectedSigners: A2($elm$core$List$cons, expectedSigners, preProcessedIntents.expectedSigners),
								mints: A2(
									$elm$core$List$cons,
									{assets: assets, policyId: policyId, redeemer: $elm$core$Maybe$Nothing},
									preProcessedIntents.mints),
								nativeScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.nativeScriptSources)
							});
					} else {
						var script = scriptWitness.a.script;
						var redeemerData = scriptWitness.a.redeemerData;
						var requiredSigners = scriptWitness.a.requiredSigners;
						return _Utils_update(
							preProcessedIntents,
							{
								mints: A2(
									$elm$core$List$cons,
									{
										assets: assets,
										policyId: policyId,
										redeemer: $elm$core$Maybe$Just(redeemerData)
									},
									preProcessedIntents.mints),
								plutusScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.plutusScriptSources),
								requiredSigners: A2($elm$core$List$cons, requiredSigners, preProcessedIntents.requiredSigners)
							});
					}
				case 'WithdrawRewards':
					var stakeCredential = txIntent.a.stakeCredential;
					var amount = txIntent.a.amount;
					var scriptWitness = txIntent.a.scriptWitness;
					if (scriptWitness.$ === 'Nothing') {
						return _Utils_update(
							preProcessedIntents,
							{
								withdrawals: A2(
									$elm$core$List$cons,
									{amount: amount, redeemer: $elm$core$Maybe$Nothing, stakeAddress: stakeCredential},
									preProcessedIntents.withdrawals)
							});
					} else {
						if (scriptWitness.a.$ === 'Native') {
							var script = scriptWitness.a.a.script;
							var expectedSigners = scriptWitness.a.a.expectedSigners;
							return _Utils_update(
								preProcessedIntents,
								{
									expectedSigners: A2($elm$core$List$cons, expectedSigners, preProcessedIntents.expectedSigners),
									nativeScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.nativeScriptSources),
									withdrawals: A2(
										$elm$core$List$cons,
										{amount: amount, redeemer: $elm$core$Maybe$Nothing, stakeAddress: stakeCredential},
										preProcessedIntents.withdrawals)
								});
						} else {
							var script = scriptWitness.a.a.script;
							var redeemerData = scriptWitness.a.a.redeemerData;
							var requiredSigners = scriptWitness.a.a.requiredSigners;
							return _Utils_update(
								preProcessedIntents,
								{
									plutusScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.plutusScriptSources),
									requiredSigners: A2($elm$core$List$cons, requiredSigners, preProcessedIntents.requiredSigners),
									withdrawals: A2(
										$elm$core$List$cons,
										{
											amount: amount,
											redeemer: $elm$core$Maybe$Just(redeemerData),
											stakeAddress: stakeCredential
										},
										preProcessedIntents.withdrawals)
								});
						}
					}
				case 'IssueCertificate':
					switch (txIntent.a.$) {
						case 'RegisterStake':
							var delegator = txIntent.a.a.delegator;
							var deposit = txIntent.a.a.deposit;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$RegCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											deposit: deposit
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$RegCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											deposit: deposit
										});
								},
								{deposit: deposit, refund: $dwayne$elm_natural$Natural$zero},
								delegator,
								preProcessedIntents);
						case 'UnregisterStake':
							var delegator = txIntent.a.a.delegator;
							var refund = txIntent.a.a.refund;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$UnregCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											refund: refund
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$UnregCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											refund: refund
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: refund},
								delegator,
								preProcessedIntents);
						case 'DelegateStake':
							var delegator = txIntent.a.a.delegator;
							var poolId = txIntent.a.a.poolId;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$StakeDelegationCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											poolId: poolId
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$StakeDelegationCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											poolId: poolId
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: $dwayne$elm_natural$Natural$zero},
								delegator,
								preProcessedIntents);
						case 'RegisterDrep':
							var drep = txIntent.a.a.drep;
							var deposit = txIntent.a.a.deposit;
							var info = txIntent.a.a.info;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$RegDrepCert(
										{
											anchor: info,
											deposit: deposit,
											drepCredential: $author$project$Cardano$Address$VKeyHash(keyCred)
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$RegDrepCert(
										{
											anchor: info,
											deposit: deposit,
											drepCredential: $author$project$Cardano$Address$ScriptHash(scriptHash)
										});
								},
								{deposit: deposit, refund: $dwayne$elm_natural$Natural$zero},
								drep,
								preProcessedIntents);
						case 'UnregisterDrep':
							var drep = txIntent.a.a.drep;
							var refund = txIntent.a.a.refund;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$UnregDrepCert(
										{
											drepCredential: $author$project$Cardano$Address$VKeyHash(keyCred),
											refund: refund
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$UnregDrepCert(
										{
											drepCredential: $author$project$Cardano$Address$ScriptHash(scriptHash),
											refund: refund
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: refund},
								drep,
								preProcessedIntents);
						case 'VoteAlwaysAbstain':
							var delegator = txIntent.a.a.delegator;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											drep: $author$project$Cardano$Gov$AlwaysAbstain
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											drep: $author$project$Cardano$Gov$AlwaysAbstain
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: $dwayne$elm_natural$Natural$zero},
								delegator,
								preProcessedIntents);
						case 'VoteAlwaysNoConfidence':
							var delegator = txIntent.a.a.delegator;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											drep: $author$project$Cardano$Gov$AlwaysNoConfidence
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											drep: $author$project$Cardano$Gov$AlwaysNoConfidence
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: $dwayne$elm_natural$Natural$zero},
								delegator,
								preProcessedIntents);
						case 'DelegateVotes':
							var delegator = txIntent.a.a.delegator;
							var drep = txIntent.a.a.drep;
							return A5(
								$author$project$Cardano$TxIntent$preprocessCert,
								function (keyCred) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$VKeyHash(keyCred),
											drep: $author$project$Cardano$Gov$DrepCredential(drep)
										});
								},
								function (scriptHash) {
									return $author$project$Cardano$Transaction$VoteDelegCert(
										{
											delegator: $author$project$Cardano$Address$ScriptHash(scriptHash),
											drep: $author$project$Cardano$Gov$DrepCredential(drep)
										});
								},
								{deposit: $dwayne$elm_natural$Natural$zero, refund: $dwayne$elm_natural$Natural$zero},
								delegator,
								preProcessedIntents);
						case 'RegisterPool':
							var _v6 = txIntent.a;
							var deposit = _v6.a.deposit;
							var poolParams = _v6.b;
							return _Utils_update(
								preProcessedIntents,
								{
									certificates: A2(
										$elm$core$List$cons,
										_Utils_Tuple2(
											$author$project$Cardano$Transaction$PoolRegistrationCert(poolParams),
											$elm$core$Maybe$Nothing),
										preProcessedIntents.certificates),
									totalDeposit: A2($dwayne$elm_natural$Natural$add, deposit, preProcessedIntents.totalDeposit)
								});
						default:
							var poolId = txIntent.a.a.poolId;
							var epoch = txIntent.a.a.epoch;
							return _Utils_update(
								preProcessedIntents,
								{
									certificates: A2(
										$elm$core$List$cons,
										_Utils_Tuple2(
											$author$project$Cardano$Transaction$PoolRetirementCert(
												{epoch: epoch, poolId: poolId}),
											$elm$core$Maybe$Nothing),
										preProcessedIntents.certificates)
								});
					}
				case 'Vote':
					switch (txIntent.a.$) {
						case 'WithCommitteeHotCred':
							if (txIntent.a.a.$ === 'WithKey') {
								var cred = txIntent.a.a.a;
								var votes = txIntent.b;
								return _Utils_update(
									preProcessedIntents,
									{
										votes: A2(
											$elm$core$List$cons,
											{
												redeemer: $elm$core$Maybe$Nothing,
												voter: $author$project$Cardano$Gov$VoterCommitteeHotCred(
													$author$project$Cardano$Address$VKeyHash(cred)),
												votes: votes
											},
											preProcessedIntents.votes)
									});
							} else {
								if (txIntent.a.a.b.$ === 'Native') {
									var _v7 = txIntent.a.a;
									var cred = _v7.a;
									var script = _v7.b.a.script;
									var expectedSigners = _v7.b.a.expectedSigners;
									var votes = txIntent.b;
									return _Utils_update(
										preProcessedIntents,
										{
											expectedSigners: A2($elm$core$List$cons, expectedSigners, preProcessedIntents.expectedSigners),
											nativeScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.nativeScriptSources),
											votes: A2(
												$elm$core$List$cons,
												{
													redeemer: $elm$core$Maybe$Nothing,
													voter: $author$project$Cardano$Gov$VoterCommitteeHotCred(
														$author$project$Cardano$Address$ScriptHash(cred)),
													votes: votes
												},
												preProcessedIntents.votes)
										});
								} else {
									var _v8 = txIntent.a.a;
									var cred = _v8.a;
									var script = _v8.b.a.script;
									var redeemerData = _v8.b.a.redeemerData;
									var requiredSigners = _v8.b.a.requiredSigners;
									var votes = txIntent.b;
									return _Utils_update(
										preProcessedIntents,
										{
											plutusScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.plutusScriptSources),
											requiredSigners: A2($elm$core$List$cons, requiredSigners, preProcessedIntents.requiredSigners),
											votes: A2(
												$elm$core$List$cons,
												{
													redeemer: $elm$core$Maybe$Just(redeemerData),
													voter: $author$project$Cardano$Gov$VoterCommitteeHotCred(
														$author$project$Cardano$Address$ScriptHash(cred)),
													votes: votes
												},
												preProcessedIntents.votes)
										});
								}
							}
						case 'WithDrepCred':
							if (txIntent.a.a.$ === 'WithKey') {
								var cred = txIntent.a.a.a;
								var votes = txIntent.b;
								return _Utils_update(
									preProcessedIntents,
									{
										votes: A2(
											$elm$core$List$cons,
											{
												redeemer: $elm$core$Maybe$Nothing,
												voter: $author$project$Cardano$Gov$VoterDrepCred(
													$author$project$Cardano$Address$VKeyHash(cred)),
												votes: votes
											},
											preProcessedIntents.votes)
									});
							} else {
								if (txIntent.a.a.b.$ === 'Native') {
									var _v9 = txIntent.a.a;
									var cred = _v9.a;
									var script = _v9.b.a.script;
									var expectedSigners = _v9.b.a.expectedSigners;
									var votes = txIntent.b;
									return _Utils_update(
										preProcessedIntents,
										{
											expectedSigners: A2($elm$core$List$cons, expectedSigners, preProcessedIntents.expectedSigners),
											nativeScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.nativeScriptSources),
											votes: A2(
												$elm$core$List$cons,
												{
													redeemer: $elm$core$Maybe$Nothing,
													voter: $author$project$Cardano$Gov$VoterDrepCred(
														$author$project$Cardano$Address$ScriptHash(cred)),
													votes: votes
												},
												preProcessedIntents.votes)
										});
								} else {
									var _v10 = txIntent.a.a;
									var cred = _v10.a;
									var script = _v10.b.a.script;
									var redeemerData = _v10.b.a.redeemerData;
									var requiredSigners = _v10.b.a.requiredSigners;
									var votes = txIntent.b;
									return _Utils_update(
										preProcessedIntents,
										{
											plutusScriptSources: A2($elm$core$List$cons, script, preProcessedIntents.plutusScriptSources),
											requiredSigners: A2($elm$core$List$cons, requiredSigners, preProcessedIntents.requiredSigners),
											votes: A2(
												$elm$core$List$cons,
												{
													redeemer: $elm$core$Maybe$Just(redeemerData),
													voter: $author$project$Cardano$Gov$VoterDrepCred(
														$author$project$Cardano$Address$ScriptHash(cred)),
													votes: votes
												},
												preProcessedIntents.votes)
										});
								}
							}
						default:
							var cred = txIntent.a.a;
							var votes = txIntent.b;
							return _Utils_update(
								preProcessedIntents,
								{
									votes: A2(
										$elm$core$List$cons,
										{
											redeemer: $elm$core$Maybe$Nothing,
											voter: $author$project$Cardano$Gov$VoterPoolId(cred),
											votes: votes
										},
										preProcessedIntents.votes)
								});
					}
				default:
					var proposal = txIntent.a;
					var deposit = proposal.deposit;
					return _Utils_update(
						preProcessedIntents,
						{
							proposalIntents: A2($elm$core$List$cons, proposal, preProcessedIntents.proposalIntents),
							totalDeposit: A2($dwayne$elm_natural$Natural$add, deposit, preProcessedIntents.totalDeposit)
						});
			}
		});
	return A3($elm$core$List$foldr, stepIntent, $author$project$Cardano$TxIntent$noIntent, txIntents);
};
var $author$project$Cardano$MultiAsset$toMultilineString = F2(
	function (toStr, multiAsset) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var policyId = _v0.a;
				var assets = _v0.b;
				return A2(
					$elm$core$List$map,
					function (_v1) {
						var name = _v1.a;
						var amount = _v1.b;
						return A2(
							$elm$core$String$join,
							' ',
							_List_fromArray(
								[
									$author$project$Bytes$Comparable$pretty(policyId),
									$author$project$Bytes$Comparable$pretty(name),
									toStr(amount)
								]));
					},
					$author$project$Bytes$Map$toList(assets));
			},
			$author$project$Bytes$Map$toList(multiAsset));
	});
var $author$project$Cardano$Value$toMultilineString = function (_v0) {
	var lovelace = _v0.lovelace;
	var assets = _v0.assets;
	var indent = F2(
		function (spaces, str) {
			return _Utils_ap(
				A2($elm$core$String$repeat, spaces, ' '),
				str);
		});
	return $author$project$Cardano$MultiAsset$isEmpty(assets) ? _List_fromArray(
		[
			'₳ ' + $dwayne$elm_natural$Natural$toString(lovelace)
		]) : A2(
		$elm$core$List$cons,
		'with native assets:',
		A2(
			$elm$core$List$cons,
			'   ₳ ' + $dwayne$elm_natural$Natural$toString(lovelace),
			A2(
				$elm$core$List$map,
				indent(3),
				A2($author$project$Cardano$MultiAsset$toMultilineString, $dwayne$elm_natural$Natural$toString, assets))));
};
var $author$project$Cardano$TxIntent$checkBalance = F2(
	function (localStateUtxos, txIntents) {
		var preProcessedIntents = $author$project$Cardano$TxIntent$preProcessIntents(txIntents);
		var splitMintsBurns = A2(
			$elm$core$List$map,
			function (m) {
				return _Utils_Tuple2(
					m.policyId,
					$author$project$Cardano$MultiAsset$balance(m.assets));
			},
			preProcessedIntents.mints);
		var totalBurnedValue = A3(
			$elm$core$List$foldl,
			function (_v9) {
				var p = _v9.a;
				var burned = _v9.b.burned;
				return $author$project$Cardano$Value$addTokens(
					A2($author$project$Bytes$Map$singleton, p, burned));
			},
			$author$project$Cardano$Value$zero,
			splitMintsBurns);
		var totalMintedValue = A3(
			$elm$core$List$foldl,
			function (_v8) {
				var p = _v8.a;
				var minted = _v8.b.minted;
				return $author$project$Cardano$Value$addTokens(
					A2($author$project$Bytes$Map$singleton, p, minted));
			},
			$author$project$Cardano$Value$zero,
			splitMintsBurns);
		var totalWithdrawalAmount = A3(
			$elm$core$List$foldl,
			F2(
				function (w, acc) {
					return A2($dwayne$elm_natural$Natural$add, w.amount, acc);
				}),
			$dwayne$elm_natural$Natural$zero,
			preProcessedIntents.withdrawals);
		var preCreated = function (txContext) {
			var _v7 = preProcessedIntents.preCreated(txContext);
			var sum = _v7.sum;
			var outputs = _v7.outputs;
			return {
				outputs: outputs,
				sum: A2($author$project$Cardano$Value$add, sum, totalBurnedValue)
			};
		};
		var preCreatedOutputs = preCreated($author$project$Cardano$TxContext$new);
		var totalOutput = A2(
			$author$project$Cardano$Value$add,
			$author$project$Cardano$Value$onlyLovelace(preProcessedIntents.totalDeposit),
			A3(
				$turboMaCk$any_dict$Dict$Any$foldl,
				function (_v6) {
					return $author$project$Cardano$Value$add;
				},
				preCreatedOutputs.sum,
				preProcessedIntents.freeOutputs));
		var getValueFromRef = function (ref) {
			return A2(
				$elm$core$Maybe$withDefault,
				$author$project$Cardano$Value$zero,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.amount;
					},
					A2($turboMaCk$any_dict$Dict$Any$get, ref, localStateUtxos)));
		};
		var preSelected = A3(
			$elm$core$List$foldl,
			function (s) {
				return A3(
					$author$project$Cardano$TxIntent$addPreSelectedInput,
					s.input,
					getValueFromRef(s.input),
					s.redeemer);
			},
			{
				inputs: $author$project$Cardano$Utxo$emptyRefDict,
				sum: A2(
					$author$project$Cardano$Value$add,
					totalMintedValue,
					$author$project$Cardano$Value$onlyLovelace(totalWithdrawalAmount))
			},
			preProcessedIntents.preSelected);
		var totalInput = A2(
			$author$project$Cardano$Value$add,
			$author$project$Cardano$Value$onlyLovelace(preProcessedIntents.totalRefund),
			A3(
				$turboMaCk$any_dict$Dict$Any$foldl,
				function (_v5) {
					return $author$project$Cardano$Value$add;
				},
				preSelected.sum,
				preProcessedIntents.freeInputs));
		var allOutputReferencesInIntents = $author$project$Cardano$Utxo$refDictFromList(
			A2(
				$elm$core$List$map,
				function (ref) {
					return _Utils_Tuple2(ref, _Utils_Tuple0);
				},
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							function ($) {
								return $.input;
							},
							preProcessedIntents.preSelected),
							preProcessedIntents.guaranteedUtxos,
							A2($elm$core$List$filterMap, $author$project$Cardano$Witness$extractRef, preProcessedIntents.nativeScriptSources),
							A2(
							$elm$core$List$filterMap,
							$author$project$Cardano$Witness$extractRef,
							A2(
								$elm$core$List$map,
								function (_v4) {
									var source = _v4.b;
									return source;
								},
								preProcessedIntents.plutusScriptSources)),
							A2($elm$core$List$filterMap, $author$project$Cardano$Witness$extractRef, preProcessedIntents.datumSources)
						]))));
		var absentOutputReferencesInLocalState = A2(
			$turboMaCk$any_dict$Dict$Any$diff,
			allOutputReferencesInIntents,
			A2(
				$turboMaCk$any_dict$Dict$Any$map,
				F2(
					function (_v2, _v3) {
						return _Utils_Tuple0;
					}),
				localStateUtxos));
		if (!$turboMaCk$any_dict$Dict$Any$isEmpty(absentOutputReferencesInLocalState)) {
			return $elm$core$Result$Err(
				$author$project$Cardano$TxIntent$WitnessError(
					$author$project$Cardano$Witness$ReferenceOutputsMissingFromLocalState(
						$turboMaCk$any_dict$Dict$Any$keys(absentOutputReferencesInLocalState))));
		} else {
			if (!_Utils_eq(totalInput, totalOutput)) {
				var extraneousOutput = A2($author$project$Cardano$Value$subtract, totalOutput, totalInput);
				var extraneousInput = A2($author$project$Cardano$Value$subtract, totalInput, totalOutput);
				var errorMessage = function () {
					var indent = F2(
						function (spaces, str) {
							return _Utils_ap(
								A2($elm$core$String$repeat, spaces, ' '),
								str);
						});
					var missingInputMsg = function () {
						var _v1 = $author$project$Cardano$Value$toMultilineString(extraneousOutput);
						if (_v1.b && (!_v1.b.b)) {
							var adaStr = _v1.a;
							return 'Missing lovelace input: ' + adaStr;
						} else {
							var multilineValue = _v1;
							return 'Missing value input:\n' + A2(
								$elm$core$String$join,
								'\n',
								A2(
									$elm$core$List$map,
									indent(3),
									multilineValue));
						}
					}();
					var missingOutputMsg = function () {
						var _v0 = $author$project$Cardano$Value$toMultilineString(extraneousInput);
						if (_v0.b && (!_v0.b.b)) {
							var adaStr = _v0.a;
							return 'Missing lovelace output: ' + adaStr;
						} else {
							var multilineValue = _v0;
							return 'Missing value output:\n' + A2(
								$elm$core$String$join,
								'\n',
								A2(
									$elm$core$List$map,
									indent(3),
									multilineValue));
						}
					}();
					return _Utils_eq(extraneousOutput, $author$project$Cardano$Value$zero) ? missingOutputMsg : (_Utils_eq(extraneousInput, $author$project$Cardano$Value$zero) ? missingInputMsg : A2(
						$elm$core$String$join,
						'\n',
						_List_fromArray(
							[missingInputMsg, missingOutputMsg])));
				}();
				return $elm$core$Result$Err(
					A2(
						$author$project$Cardano$TxIntent$UnbalancedIntents,
						{extraneousInput: extraneousInput, extraneousOutput: extraneousOutput, inputTotal: totalInput, outputTotal: totalOutput},
						errorMessage));
			} else {
				return $elm$core$Result$Ok(
					{preCreated: preCreated, preProcessedIntents: preProcessedIntents, preSelected: preSelected});
			}
		}
	});
var $author$project$Cardano$Gov$HardForkInitiation = function (a) {
	return {$: 'HardForkInitiation', a: a};
};
var $author$project$Cardano$Gov$Info = {$: 'Info'};
var $author$project$Cardano$Gov$NewConstitution = function (a) {
	return {$: 'NewConstitution', a: a};
};
var $author$project$Cardano$Gov$NoConfidence = function (a) {
	return {$: 'NoConfidence', a: a};
};
var $author$project$Cardano$Gov$ParameterChange = function (a) {
	return {$: 'ParameterChange', a: a};
};
var $author$project$Cardano$Gov$TreasuryWithdrawals = function (a) {
	return {$: 'TreasuryWithdrawals', a: a};
};
var $author$project$Cardano$Gov$UpdateCommittee = function (a) {
	return {$: 'UpdateCommittee', a: a};
};
var $author$project$Cardano$TxIntent$actionFromIntent = F2(
	function (govState, actionIntent) {
		switch (actionIntent.$) {
			case 'ParameterChange':
				var protocolParamUpdate = actionIntent.a;
				return $author$project$Cardano$Gov$ParameterChange(
					{
						guardrailsPolicy: A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.policyId;
							},
							govState.guardrailsScript),
						latestEnacted: govState.lastEnactedProtocolParamUpdateAction,
						protocolParamUpdate: protocolParamUpdate
					});
			case 'HardForkInitiation':
				var protocolVersion = actionIntent.a;
				return $author$project$Cardano$Gov$HardForkInitiation(
					{latestEnacted: govState.lastEnactedHardForkAction, protocolVersion: protocolVersion});
			case 'TreasuryWithdrawals':
				var withdrawals = actionIntent.a;
				return $author$project$Cardano$Gov$TreasuryWithdrawals(
					{
						guardrailsPolicy: A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.policyId;
							},
							govState.guardrailsScript),
						withdrawals: A2(
							$elm$core$List$map,
							function (w) {
								return _Utils_Tuple2(w.destination, w.amount);
							},
							withdrawals)
					});
			case 'NoConfidence':
				return $author$project$Cardano$Gov$NoConfidence(
					{latestEnacted: govState.lastEnactedCommitteeAction});
			case 'UpdateCommittee':
				var updateInfo = actionIntent.a;
				return $author$project$Cardano$Gov$UpdateCommittee(
					{addedMembers: updateInfo.addMembers, latestEnacted: govState.lastEnactedCommitteeAction, quorumThreshold: updateInfo.quorumThreshold, removedMembers: updateInfo.removeMembers});
			case 'NewConstitution':
				var constitution = actionIntent.a;
				return $author$project$Cardano$Gov$NewConstitution(
					{constitution: constitution, latestEnacted: govState.lastEnactedConstitutionAction});
			default:
				return $author$project$Cardano$Gov$Info;
		}
	});
var $dwayne$elm_integer$Integer$isZero = $elm$core$Basics$eq($dwayne$elm_integer$Integer$zero);
var $author$project$Cardano$MultiAsset$mintAdd = F2(
	function (m1, m2) {
		return A4($author$project$Cardano$MultiAsset$map2, $dwayne$elm_integer$Integer$add, $dwayne$elm_integer$Integer$zero, m1, m2);
	});
var $author$project$Cardano$TxIntent$proposalRedeemer = function (govAction) {
	switch (govAction.$) {
		case 'ParameterChange':
			return $elm$core$Maybe$Just(
				$author$project$Cardano$Data$Int($dwayne$elm_integer$Integer$zero));
		case 'TreasuryWithdrawals':
			return $elm$core$Maybe$Just(
				$author$project$Cardano$Data$Int($dwayne$elm_integer$Integer$zero));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$Address$credentialToHaskellOrderComparable = function (cred) {
	if (cred.$ === 'ScriptHash') {
		var hash = cred.a;
		return _Utils_Tuple2(
			0,
			$author$project$Bytes$Comparable$toHex(hash));
	} else {
		var hash = cred.a;
		return _Utils_Tuple2(
			1,
			$author$project$Bytes$Comparable$toHex(hash));
	}
};
var $author$project$Cardano$Address$stakeDictFromList = $turboMaCk$any_dict$Dict$Any$fromList(
	function (s) {
		return $author$project$Cardano$Address$credentialToHaskellOrderComparable(s.stakeCredential);
	});
var $author$project$Cardano$Witness$encodeSource = F2(
	function (encode, witnessSource) {
		if (witnessSource.$ === 'ByValue') {
			var a = witnessSource.a;
			return encode(a);
		} else {
			var ref = witnessSource.a;
			return $author$project$Cardano$Utxo$encodeOutputReference(ref);
		}
	});
var $author$project$Cardano$Witness$toHex = F2(
	function (encoder, source) {
		return $author$project$Bytes$Comparable$toHex(
			$author$project$Bytes$Comparable$fromBytes(
				$elm_toulouse$cbor$Cbor$Encode$encode(
					A2($author$project$Cardano$Witness$encodeSource, encoder, source))));
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
	});
var $author$project$Cardano$TxIntent$validMinAdaPerOutput = function (outputs) {
	validMinAdaPerOutput:
	while (true) {
		if (!outputs.b) {
			return $elm$core$Result$Ok(_Utils_Tuple0);
		} else {
			var output = outputs.a;
			var rest = outputs.b;
			var _v1 = $author$project$Cardano$Utxo$checkMinAda(output);
			if (_v1.$ === 'Ok') {
				var $temp$outputs = rest;
				outputs = $temp$outputs;
				continue validMinAdaPerOutput;
			} else {
				var err = _v1.a;
				return $elm$core$Result$Err(err);
			}
		}
	}
};
var $author$project$Cardano$Witness$InvalidScriptRef = F3(
	function (a, b, c) {
		return {$: 'InvalidScriptRef', a: a, b: b, c: c};
	});
var $author$project$Cardano$Script$Plutus = function (a) {
	return {$: 'Plutus', a: a};
};
var $author$project$Cardano$Witness$ScriptHashMismatch = F2(
	function (a, b) {
		return {$: 'ScriptHashMismatch', a: a, b: b};
	});
var $author$project$Cardano$Witness$checkScriptMatch = function (hashes) {
	return _Utils_eq(hashes.expected, hashes.witness) ? $elm$core$Result$Ok(_Utils_Tuple0) : $elm$core$Result$Err(
		A2($author$project$Cardano$Witness$ScriptHashMismatch, hashes, 'Provided witness has wrong script hash'));
};
var $author$project$Cardano$Witness$MissingReferenceScript = function (a) {
	return {$: 'MissingReferenceScript', a: a};
};
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Cardano$Witness$getUtxo = F2(
	function (utxos, ref) {
		return A2(
			$elm$core$Result$fromMaybe,
			$author$project$Cardano$Witness$ReferenceOutputsMissingFromLocalState(
				_List_fromArray(
					[ref])),
			A2($turboMaCk$any_dict$Dict$Any$get, ref, utxos));
	});
var $author$project$Cardano$Witness$getRefScript = F2(
	function (localStateUtxos, ref) {
		return A2(
			$elm$core$Result$andThen,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.referenceScript;
				},
				$elm$core$Result$fromMaybe(
					$author$project$Cardano$Witness$MissingReferenceScript(ref))),
			A2($author$project$Cardano$Witness$getUtxo, localStateUtxos, ref));
	});
var $author$project$Blake2b$Int128$Int128 = F2(
	function (a, b) {
		return {$: 'Int128', a: a, b: b};
	});
var $MartinSStewart$elm_uint64$UInt64$UInt64 = function (a) {
	return {$: 'UInt64', a: a};
};
var $MartinSStewart$elm_uint64$UInt64$limit24 = 16777216;
var $MartinSStewart$elm_uint64$UInt64$max16 = 65535;
var $MartinSStewart$elm_uint64$UInt64$max24 = 16777215;
var $MartinSStewart$elm_uint64$UInt64$add = F2(
	function (_v0, _v2) {
		var _v1 = _v0.a;
		var highA = _v1.a;
		var midA = _v1.b;
		var lowA = _v1.c;
		var _v3 = _v2.a;
		var highB = _v3.a;
		var midB = _v3.b;
		var lowB = _v3.c;
		var low = lowA + lowB;
		var mid = (_Utils_cmp(low, $MartinSStewart$elm_uint64$UInt64$limit24) < 0) ? (midA + midB) : ((midA + midB) + 1);
		var high = (_Utils_cmp(mid, $MartinSStewart$elm_uint64$UInt64$limit24) < 0) ? (highA + highB) : ((highA + highB) + 1);
		return $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & high, $MartinSStewart$elm_uint64$UInt64$max24 & mid, $MartinSStewart$elm_uint64$UInt64$max24 & low));
	});
var $MartinSStewart$elm_uint64$UInt64$fromInt24s = F3(
	function (high, mid, low) {
		return $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & high, $MartinSStewart$elm_uint64$UInt64$max24 & mid, $MartinSStewart$elm_uint64$UInt64$max24 & low));
	});
var $author$project$Blake2b$blake2bIV = _List_fromArray(
	[
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 27145, 15099891, 12372232),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 47975, 11437444, 13281083),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 15470, 15954686, 9762859),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 42319, 16071263, 1914609),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 20750, 5406637, 15106769),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 39685, 6851627, 4090911),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 8067, 14265339, 4308331),
		A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 23520, 13441299, 8266105)
	]);
var $elm_community$list_extra$List$Extra$greedyGroupsOfWithStep = F3(
	function (size, step, list) {
		if ((size <= 0) || (step <= 0)) {
			return _List_Nil;
		} else {
			var go = F2(
				function (xs, acc) {
					go:
					while (true) {
						if ($elm$core$List$isEmpty(xs)) {
							return $elm$core$List$reverse(acc);
						} else {
							var $temp$xs = A2($elm$core$List$drop, step, xs),
								$temp$acc = A2(
								$elm$core$List$cons,
								A2($elm$core$List$take, size, xs),
								acc);
							xs = $temp$xs;
							acc = $temp$acc;
							continue go;
						}
					}
				});
			return A2(go, list, _List_Nil);
		}
	});
var $elm_community$list_extra$List$Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3($elm_community$list_extra$List$Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var $author$project$List$ExtraBis$chunksOf = $elm_community$list_extra$List$Extra$greedyGroupsOf;
var $MartinSStewart$elm_uint64$UInt64$compare = F2(
	function (_v0, _v2) {
		var _v1 = _v0.a;
		var highA = _v1.a;
		var midA = _v1.b;
		var lowA = _v1.c;
		var _v3 = _v2.a;
		var highB = _v3.a;
		var midB = _v3.b;
		var lowB = _v3.c;
		var _v4 = A2($elm$core$Basics$compare, highA, highB);
		if (_v4.$ === 'EQ') {
			var _v5 = A2($elm$core$Basics$compare, midA, midB);
			if (_v5.$ === 'EQ') {
				return A2($elm$core$Basics$compare, lowA, lowB);
			} else {
				var midNotEq = _v5;
				return midNotEq;
			}
		} else {
			var highNotEq = _v4;
			return highNotEq;
		}
	});
var $MartinSStewart$elm_uint64$UInt64$zero = $MartinSStewart$elm_uint64$UInt64$UInt64(
	_Utils_Tuple3(0, 0, 0));
var $MartinSStewart$elm_uint64$UInt64$fromBigEndianBytes = function (bytes) {
	var to24 = F3(
		function (x, y, z) {
			return (((255 & x) << 16) + ((255 & y) << 8)) + (255 & z);
		});
	var to16 = F2(
		function (x, y) {
			return ((255 & x) << 8) + (255 & y);
		});
	if (!bytes.b) {
		return $MartinSStewart$elm_uint64$UInt64$zero;
	} else {
		if (!bytes.b.b) {
			var b0 = bytes.a;
			return $MartinSStewart$elm_uint64$UInt64$UInt64(
				_Utils_Tuple3(
					0,
					0,
					A3(to24, 0, 0, b0)));
		} else {
			if (!bytes.b.b.b) {
				var b1 = bytes.a;
				var _v1 = bytes.b;
				var b0 = _v1.a;
				return $MartinSStewart$elm_uint64$UInt64$UInt64(
					_Utils_Tuple3(
						0,
						0,
						A3(to24, 0, b1, b0)));
			} else {
				if (!bytes.b.b.b.b) {
					var b2 = bytes.a;
					var _v2 = bytes.b;
					var b1 = _v2.a;
					var _v3 = _v2.b;
					var b0 = _v3.a;
					return $MartinSStewart$elm_uint64$UInt64$UInt64(
						_Utils_Tuple3(
							0,
							0,
							A3(to24, b2, b1, b0)));
				} else {
					if (!bytes.b.b.b.b.b) {
						var b3 = bytes.a;
						var _v4 = bytes.b;
						var b2 = _v4.a;
						var _v5 = _v4.b;
						var b1 = _v5.a;
						var _v6 = _v5.b;
						var b0 = _v6.a;
						return $MartinSStewart$elm_uint64$UInt64$UInt64(
							_Utils_Tuple3(
								0,
								A3(to24, 0, 0, b3),
								A3(to24, b2, b1, b0)));
					} else {
						if (!bytes.b.b.b.b.b.b) {
							var b4 = bytes.a;
							var _v7 = bytes.b;
							var b3 = _v7.a;
							var _v8 = _v7.b;
							var b2 = _v8.a;
							var _v9 = _v8.b;
							var b1 = _v9.a;
							var _v10 = _v9.b;
							var b0 = _v10.a;
							return $MartinSStewart$elm_uint64$UInt64$UInt64(
								_Utils_Tuple3(
									0,
									A3(to24, 0, b4, b3),
									A3(to24, b2, b1, b0)));
						} else {
							if (!bytes.b.b.b.b.b.b.b) {
								var b5 = bytes.a;
								var _v11 = bytes.b;
								var b4 = _v11.a;
								var _v12 = _v11.b;
								var b3 = _v12.a;
								var _v13 = _v12.b;
								var b2 = _v13.a;
								var _v14 = _v13.b;
								var b1 = _v14.a;
								var _v15 = _v14.b;
								var b0 = _v15.a;
								return $MartinSStewart$elm_uint64$UInt64$UInt64(
									_Utils_Tuple3(
										0,
										A3(to24, b5, b4, b3),
										A3(to24, b2, b1, b0)));
							} else {
								if (!bytes.b.b.b.b.b.b.b.b) {
									var b6 = bytes.a;
									var _v16 = bytes.b;
									var b5 = _v16.a;
									var _v17 = _v16.b;
									var b4 = _v17.a;
									var _v18 = _v17.b;
									var b3 = _v18.a;
									var _v19 = _v18.b;
									var b2 = _v19.a;
									var _v20 = _v19.b;
									var b1 = _v20.a;
									var _v21 = _v20.b;
									var b0 = _v21.a;
									return $MartinSStewart$elm_uint64$UInt64$UInt64(
										_Utils_Tuple3(
											A2(to16, 0, b6),
											A3(to24, b5, b4, b3),
											A3(to24, b2, b1, b0)));
								} else {
									if (!bytes.b.b.b.b.b.b.b.b.b) {
										var b7 = bytes.a;
										var _v22 = bytes.b;
										var b6 = _v22.a;
										var _v23 = _v22.b;
										var b5 = _v23.a;
										var _v24 = _v23.b;
										var b4 = _v24.a;
										var _v25 = _v24.b;
										var b3 = _v25.a;
										var _v26 = _v25.b;
										var b2 = _v26.a;
										var _v27 = _v26.b;
										var b1 = _v27.a;
										var _v28 = _v27.b;
										var b0 = _v28.a;
										return $MartinSStewart$elm_uint64$UInt64$UInt64(
											_Utils_Tuple3(
												A2(to16, b7, b6),
												A3(to24, b5, b4, b3),
												A3(to24, b2, b1, b0)));
									} else {
										var tooManyBytes = bytes;
										return $MartinSStewart$elm_uint64$UInt64$fromBigEndianBytes(
											A2(
												$elm$core$List$drop,
												$elm$core$List$length(tooManyBytes) - 8,
												tooManyBytes));
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var $author$project$Blake2b$UInt64$fromLittleEndianBytes = A2($elm$core$Basics$composeL, $MartinSStewart$elm_uint64$UInt64$fromBigEndianBytes, $elm$core$List$reverse);
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $MartinSStewart$elm_uint64$UInt64$toInt31 = function (_v0) {
	var _v1 = _v0.a;
	var high = _v1.a;
	var mid = _v1.b;
	var low = _v1.c;
	return ((mid <= 127) && (!high)) ? $elm$core$Maybe$Just((mid << 24) | low) : $elm$core$Maybe$Nothing;
};
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $MartinSStewart$elm_uint64$UInt64$toInt32s = function (_v0) {
	var _v1 = _v0.a;
	var high = _v1.a;
	var mid = _v1.b;
	var low = _v1.c;
	return _Utils_Tuple2(((high << 16) | (mid >>> 8)) >>> 0, ((mid << 24) | low) >>> 0);
};
var $author$project$List$ExtraBis$get64 = F2(
	function (u64, list) {
		var _v0 = $MartinSStewart$elm_uint64$UInt64$toInt31(u64);
		if (_v0.$ === 'Just') {
			var u31 = _v0.a;
			return A2($elm_community$list_extra$List$Extra$getAt, u31, list);
		} else {
			var chunked = A2($author$project$List$ExtraBis$chunksOf, 4294967295, list);
			var _v1 = $MartinSStewart$elm_uint64$UInt64$toInt32s(u64);
			var iMS = _v1.a;
			var iLS = _v1.b;
			return A2(
				$elm$core$Maybe$andThen,
				$elm_community$list_extra$List$Extra$getAt(iLS),
				A2($elm_community$list_extra$List$Extra$getAt, iMS, chunked));
		}
	});
var $MartinSStewart$elm_uint64$UInt64$one = $MartinSStewart$elm_uint64$UInt64$UInt64(
	_Utils_Tuple3(0, 0, 1));
var $author$project$List$ExtraBis$indexedMap64 = F2(
	function (fn, list) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (x, _v0) {
					var acc = _v0.a;
					var i = _v0.b;
					return _Utils_Tuple2(
						_Utils_ap(
							acc,
							_List_fromArray(
								[
									A2(fn, i, x)
								])),
						A2($MartinSStewart$elm_uint64$UInt64$add, i, $MartinSStewart$elm_uint64$UInt64$one));
				}),
			_Utils_Tuple2(_List_Nil, $MartinSStewart$elm_uint64$UInt64$zero),
			list).a;
	});
var $elm$core$List$map3 = _List_map3;
var $MartinSStewart$elm_uint64$UInt64$maxValue = $MartinSStewart$elm_uint64$UInt64$UInt64(
	_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16, $MartinSStewart$elm_uint64$UInt64$max24, $MartinSStewart$elm_uint64$UInt64$max24));
var $author$project$Blake2b$Quadruple64 = F4(
	function (a, b, c, d) {
		return {a: a, b: b, c: c, d: d};
	});
var $MartinSStewart$elm_uint64$UInt64$rotateRightBy = F2(
	function (givenShift, _v0) {
		var _v1 = _v0.a;
		var high = _v1.a;
		var mid = _v1.b;
		var low = _v1.c;
		var n = 63 & givenShift;
		return (n < 16) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & ((high >>> n) | (low << (16 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((mid >>> n) | (high << (24 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((low >>> n) | (mid << (24 - n))))) : ((n < 24) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & (low >>> (n - 16)), $MartinSStewart$elm_uint64$UInt64$max24 & (((mid >>> n) + (high << (24 - n))) + (low << (40 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((low >>> n) | (mid << (24 - n))))) : ((n < 40) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & ((low >>> (n - 16)) | (mid << (40 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((high >>> (n - 24)) | (low << (40 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((mid >>> (n - 24)) | (high << (48 - n))))) : ((n < 48) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & (mid >>> (n - 40)), $MartinSStewart$elm_uint64$UInt64$max24 & ((low >>> (n - 40)) | (mid << (64 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & (((mid >>> (n - 24)) + (high << (48 - n))) + (low << (64 - n))))) : $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & ((mid >>> (n - 40)) | (high << (64 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((low >>> (n - 40)) | (mid << (64 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((high >>> (n - 48)) | (low << (64 - n))))))));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $MartinSStewart$elm_uint64$UInt64$xor = F2(
	function (_v0, _v2) {
		var _v1 = _v0.a;
		var highA = _v1.a;
		var midA = _v1.b;
		var lowA = _v1.c;
		var _v3 = _v2.a;
		var highB = _v3.a;
		var midB = _v3.b;
		var lowB = _v3.c;
		return $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3(highA ^ highB, midA ^ midB, lowA ^ lowB));
	});
var $author$project$Blake2b$mixing = F6(
	function (va, vb, vc, vd, x, y) {
		var vaTemp = A2(
			$MartinSStewart$elm_uint64$UInt64$add,
			x,
			A2($MartinSStewart$elm_uint64$UInt64$add, va, vb));
		var vdTemp = A2(
			$MartinSStewart$elm_uint64$UInt64$rotateRightBy,
			32,
			A2($MartinSStewart$elm_uint64$UInt64$xor, vd, vaTemp));
		var vcTemp = A2($MartinSStewart$elm_uint64$UInt64$add, vc, vdTemp);
		var vbTemp = A2(
			$MartinSStewart$elm_uint64$UInt64$rotateRightBy,
			24,
			A2($MartinSStewart$elm_uint64$UInt64$xor, vb, vcTemp));
		var vaNew = A2(
			$MartinSStewart$elm_uint64$UInt64$add,
			y,
			A2($MartinSStewart$elm_uint64$UInt64$add, vaTemp, vbTemp));
		var vdNew = A2(
			$MartinSStewart$elm_uint64$UInt64$rotateRightBy,
			16,
			A2($MartinSStewart$elm_uint64$UInt64$xor, vdTemp, vaNew));
		var vcNew = A2($MartinSStewart$elm_uint64$UInt64$add, vcTemp, vdNew);
		var vbNew = A2(
			$MartinSStewart$elm_uint64$UInt64$rotateRightBy,
			63,
			A2($MartinSStewart$elm_uint64$UInt64$xor, vbTemp, vcNew));
		return A4($author$project$Blake2b$Quadruple64, vaNew, vbNew, vcNew, vdNew);
	});
var $MartinSStewart$elm_uint64$UInt64$limit48 = 281474976710656;
var $MartinSStewart$elm_uint64$UInt64$maxSafeHighPart = 31;
var $MartinSStewart$elm_uint64$UInt64$maxSafe = $MartinSStewart$elm_uint64$UInt64$UInt64(
	_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$maxSafeHighPart, $MartinSStewart$elm_uint64$UInt64$max24, $MartinSStewart$elm_uint64$UInt64$max24));
var $MartinSStewart$elm_uint64$UInt64$maxSafeInt = 9007199254740991;
var $MartinSStewart$elm_uint64$UInt64$fromInt = function (x) {
	if (x <= 0) {
		return $MartinSStewart$elm_uint64$UInt64$zero;
	} else {
		if (_Utils_cmp(x, $MartinSStewart$elm_uint64$UInt64$maxSafeInt) < 1) {
			var high = $elm$core$Basics$floor(x / $MartinSStewart$elm_uint64$UInt64$limit48);
			var midLow = x - ($MartinSStewart$elm_uint64$UInt64$limit48 * high);
			var mid = $elm$core$Basics$floor(midLow / $MartinSStewart$elm_uint64$UInt64$limit24);
			var low = midLow - ($MartinSStewart$elm_uint64$UInt64$limit24 * mid);
			return $MartinSStewart$elm_uint64$UInt64$UInt64(
				_Utils_Tuple3(high, mid, low));
		} else {
			return $MartinSStewart$elm_uint64$UInt64$maxSafe;
		}
	}
};
var $author$project$Blake2b$q64FromInts = F4(
	function (a, b, c, d) {
		return A4(
			$author$project$Blake2b$Quadruple64,
			$MartinSStewart$elm_uint64$UInt64$fromInt(a),
			$MartinSStewart$elm_uint64$UInt64$fromInt(b),
			$MartinSStewart$elm_uint64$UInt64$fromInt(c),
			$MartinSStewart$elm_uint64$UInt64$fromInt(d));
	});
var $author$project$Blake2b$SigmaRound = function (i00) {
	return function (i01) {
		return function (i02) {
			return function (i03) {
				return function (i04) {
					return function (i05) {
						return function (i06) {
							return function (i07) {
								return function (i08) {
									return function (i09) {
										return function (i10) {
											return function (i11) {
												return function (i12) {
													return function (i13) {
														return function (i14) {
															return function (i15) {
																return {i00: i00, i01: i01, i02: i02, i03: i03, i04: i04, i05: i05, i06: i06, i07: i07, i08: i08, i09: i09, i10: i10, i11: i11, i12: i12, i13: i13, i14: i14, i15: i15};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Blake2b$intsToSigmaRound = function (i00) {
	return function (i01) {
		return function (i02) {
			return function (i03) {
				return function (i04) {
					return function (i05) {
						return function (i06) {
							return function (i07) {
								return function (i08) {
									return function (i09) {
										return function (i10) {
											return function (i11) {
												return function (i12) {
													return function (i13) {
														return function (i14) {
															return function (i15) {
																return $author$project$Blake2b$SigmaRound(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i00))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i01))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i02))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i03))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i04))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i05))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i06))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i07))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i08))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i09))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i10))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i11))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i12))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i13))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i14))(
																	$MartinSStewart$elm_uint64$UInt64$fromInt(i15));
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Blake2b$sigmaRound = function (round) {
	sigmaRound:
	while (true) {
		var _v0 = round >>> 0;
		switch (_v0) {
			case 0:
				return $author$project$Blake2b$intsToSigmaRound(0)(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)(15);
			case 1:
				return $author$project$Blake2b$intsToSigmaRound(14)(10)(4)(8)(9)(15)(13)(6)(1)(12)(0)(2)(11)(7)(5)(3);
			case 2:
				return $author$project$Blake2b$intsToSigmaRound(11)(8)(12)(0)(5)(2)(15)(13)(10)(14)(3)(6)(7)(1)(9)(4);
			case 3:
				return $author$project$Blake2b$intsToSigmaRound(7)(9)(3)(1)(13)(12)(11)(14)(2)(6)(5)(10)(4)(0)(15)(8);
			case 4:
				return $author$project$Blake2b$intsToSigmaRound(9)(0)(5)(7)(2)(4)(10)(15)(14)(1)(11)(12)(6)(8)(3)(13);
			case 5:
				return $author$project$Blake2b$intsToSigmaRound(2)(12)(6)(10)(0)(11)(8)(3)(4)(13)(7)(5)(15)(14)(1)(9);
			case 6:
				return $author$project$Blake2b$intsToSigmaRound(12)(5)(1)(15)(14)(13)(4)(10)(0)(7)(6)(3)(9)(2)(8)(11);
			case 7:
				return $author$project$Blake2b$intsToSigmaRound(13)(11)(7)(14)(12)(1)(3)(9)(5)(0)(15)(4)(8)(6)(2)(10);
			case 8:
				return $author$project$Blake2b$intsToSigmaRound(6)(15)(14)(9)(11)(3)(0)(8)(12)(2)(13)(7)(1)(4)(10)(5);
			case 9:
				return $author$project$Blake2b$intsToSigmaRound(10)(2)(8)(4)(7)(6)(1)(5)(15)(11)(9)(14)(3)(12)(13)(0);
			default:
				var $temp$round = A2($elm$core$Basics$modBy, 10, round);
				round = $temp$round;
				continue sigmaRound;
		}
	}
};
var $author$project$List$ExtraBis$sublist = F2(
	function (start, length) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$drop(start),
			$elm$core$List$take(length));
	});
var $author$project$Blake2b$compress = F4(
	function (state, block, _v0, finalBlockFlag) {
		var ctrHigh = _v0.a;
		var ctrLow = _v0.b;
		var vInit = A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, word) {
					return (i === 12) ? A2($MartinSStewart$elm_uint64$UInt64$xor, word, ctrLow) : ((i === 13) ? A2($MartinSStewart$elm_uint64$UInt64$xor, word, ctrHigh) : ((i === 14) ? (finalBlockFlag ? A2($MartinSStewart$elm_uint64$UInt64$xor, word, $MartinSStewart$elm_uint64$UInt64$maxValue) : word) : word));
				}),
			_Utils_ap(state, $author$project$Blake2b$blake2bIV));
		var blockWords = A2(
			$elm$core$List$map,
			$author$project$Blake2b$UInt64$fromLittleEndianBytes,
			A2(
				$author$project$List$ExtraBis$chunksOf,
				8,
				_Utils_ap(
					block,
					A2(
						$elm$core$List$repeat,
						128 - $elm$core$List$length(block),
						0))));
		var sigmaMixingStep = F4(
			function (_v1, si, sj, v) {
				var a = _v1.a;
				var b = _v1.b;
				var c = _v1.c;
				var d = _v1.d;
				var y = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, sj, blockWords));
				var x = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, si, blockWords));
				var vd = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, d, v));
				var vc = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, c, v));
				var vb = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, b, v));
				var va = A2(
					$elm$core$Maybe$withDefault,
					$MartinSStewart$elm_uint64$UInt64$zero,
					A2($author$project$List$ExtraBis$get64, a, v));
				var newVsQuad = A6($author$project$Blake2b$mixing, va, vb, vc, vd, x, y);
				return A2(
					$author$project$List$ExtraBis$indexedMap64,
					F2(
						function (i, v0) {
							return _Utils_eq(i, a) ? newVsQuad.a : (_Utils_eq(i, b) ? newVsQuad.b : (_Utils_eq(i, c) ? newVsQuad.c : (_Utils_eq(i, d) ? newVsQuad.d : v0)));
						}),
					v);
			});
		var sigmaMixingRound = F2(
			function (round, v) {
				var s = $author$project$Blake2b$sigmaRound(round);
				return A4(
					sigmaMixingStep,
					A4($author$project$Blake2b$q64FromInts, 3, 4, 9, 14),
					s.i14,
					s.i15,
					A4(
						sigmaMixingStep,
						A4($author$project$Blake2b$q64FromInts, 2, 7, 8, 13),
						s.i12,
						s.i13,
						A4(
							sigmaMixingStep,
							A4($author$project$Blake2b$q64FromInts, 1, 6, 11, 12),
							s.i10,
							s.i11,
							A4(
								sigmaMixingStep,
								A4($author$project$Blake2b$q64FromInts, 0, 5, 10, 15),
								s.i08,
								s.i09,
								A4(
									sigmaMixingStep,
									A4($author$project$Blake2b$q64FromInts, 3, 7, 11, 15),
									s.i06,
									s.i07,
									A4(
										sigmaMixingStep,
										A4($author$project$Blake2b$q64FromInts, 2, 6, 10, 14),
										s.i04,
										s.i05,
										A4(
											sigmaMixingStep,
											A4($author$project$Blake2b$q64FromInts, 1, 5, 9, 13),
											s.i02,
											s.i03,
											A4(
												sigmaMixingStep,
												A4($author$project$Blake2b$q64FromInts, 0, 4, 8, 12),
												s.i00,
												s.i01,
												v))))))));
			});
		var newV = A2(
			sigmaMixingRound,
			11,
			A2(
				sigmaMixingRound,
				10,
				A2(
					sigmaMixingRound,
					9,
					A2(
						sigmaMixingRound,
						8,
						A2(
							sigmaMixingRound,
							7,
							A2(
								sigmaMixingRound,
								6,
								A2(
									sigmaMixingRound,
									5,
									A2(
										sigmaMixingRound,
										4,
										A2(
											sigmaMixingRound,
											3,
											A2(
												sigmaMixingRound,
												2,
												A2(
													sigmaMixingRound,
													1,
													A2(sigmaMixingRound, 0, vInit))))))))))));
		return A4(
			$elm$core$List$map3,
			F3(
				function (hi, vi, vii) {
					return A2(
						$MartinSStewart$elm_uint64$UInt64$xor,
						vii,
						A2($MartinSStewart$elm_uint64$UInt64$xor, hi, vi));
				}),
			state,
			A3($author$project$List$ExtraBis$sublist, 0, 8, newV),
			A3($author$project$List$ExtraBis$sublist, 8, 8, newV));
	});
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $MartinSStewart$elm_uint64$UInt64$mul = F2(
	function (_v0, _v2) {
		var _v1 = _v0.a;
		var highA = _v1.a;
		var midA = _v1.b;
		var lowA = _v1.c;
		var _v3 = _v2.a;
		var highB = _v3.a;
		var midB = _v3.b;
		var lowB = _v3.c;
		var lowFull = lowA * lowB;
		var lowCarry = $elm$core$Basics$floor(lowFull / $MartinSStewart$elm_uint64$UInt64$limit24);
		var midFull = (lowCarry + (lowA * midB)) + (midA * lowB);
		var midCarry = $elm$core$Basics$floor(midFull / $MartinSStewart$elm_uint64$UInt64$limit24);
		var mid = midFull - (midCarry * $MartinSStewart$elm_uint64$UInt64$limit24);
		var low = lowFull - (lowCarry * $MartinSStewart$elm_uint64$UInt64$limit24);
		var high = $MartinSStewart$elm_uint64$UInt64$max16 & (((midCarry + (lowA * highB)) + (midA * midB)) + (highA * lowB));
		return $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3(high, mid, low));
	});
var $MartinSStewart$elm_uint64$UInt64$toInt24s = function (_v0) {
	var tuple = _v0.a;
	return tuple;
};
var $author$project$Blake2b$Int128$mul = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(
			$MartinSStewart$elm_uint64$UInt64$toInt31(a),
			$MartinSStewart$elm_uint64$UInt64$toInt31(b));
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var a0 = _v0.a.a;
			var b0 = _v0.b.a;
			return A2(
				$author$project$Blake2b$Int128$Int128,
				$MartinSStewart$elm_uint64$UInt64$zero,
				$MartinSStewart$elm_uint64$UInt64$fromInt(a0 * b0));
		} else {
			var findCarryOver = F2(
				function (sm, mx) {
					return (_Utils_cmp(sm, mx) > 0) ? 1 : 0;
				});
			var _v1 = $MartinSStewart$elm_uint64$UInt64$toInt24s(b);
			var bHigh = _v1.a;
			var bMid = _v1.b;
			var bLow = _v1.c;
			var bH = $MartinSStewart$elm_uint64$UInt64$fromInt(bHigh);
			var bL = $MartinSStewart$elm_uint64$UInt64$fromInt(bLow);
			var bM = $MartinSStewart$elm_uint64$UInt64$fromInt(bMid);
			var _v2 = $MartinSStewart$elm_uint64$UInt64$toInt24s(a);
			var aHigh = _v2.a;
			var aMid = _v2.b;
			var aLow = _v2.c;
			var aH = $MartinSStewart$elm_uint64$UInt64$fromInt(aHigh);
			var z4 = A2($MartinSStewart$elm_uint64$UInt64$mul, aH, bH);
			var _v3 = $MartinSStewart$elm_uint64$UInt64$toInt24s(z4);
			var m4 = _v3.b;
			var l4 = _v3.c;
			var aL = $MartinSStewart$elm_uint64$UInt64$fromInt(aLow);
			var z0 = A2($MartinSStewart$elm_uint64$UInt64$mul, aL, bL);
			var _v4 = $MartinSStewart$elm_uint64$UInt64$toInt24s(z0);
			var m0 = _v4.b;
			var l0 = _v4.c;
			var x0 = l0;
			var aM = $MartinSStewart$elm_uint64$UInt64$fromInt(aMid);
			var z1 = A2(
				$MartinSStewart$elm_uint64$UInt64$add,
				A2($MartinSStewart$elm_uint64$UInt64$mul, aM, bL),
				A2($MartinSStewart$elm_uint64$UInt64$mul, aL, bM));
			var _v5 = $MartinSStewart$elm_uint64$UInt64$toInt24s(z1);
			var h1 = _v5.a;
			var m1 = _v5.b;
			var l1 = _v5.c;
			var x1 = m0 + l1;
			var z2 = A2(
				$MartinSStewart$elm_uint64$UInt64$add,
				A2($MartinSStewart$elm_uint64$UInt64$mul, aH, bL),
				A2(
					$MartinSStewart$elm_uint64$UInt64$add,
					A2($MartinSStewart$elm_uint64$UInt64$mul, aM, bM),
					A2($MartinSStewart$elm_uint64$UInt64$mul, aL, bH)));
			var _v6 = $MartinSStewart$elm_uint64$UInt64$toInt24s(z2);
			var h2 = _v6.a;
			var m2 = _v6.b;
			var l2 = _v6.c;
			var x2 = ((65535 & m1) + (65535 & l2)) + A2(findCarryOver, x1, 16777215);
			var lsb = A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 65535 & x2, 16777215 & x1, 16777215 & x0);
			var z3 = A2(
				$MartinSStewart$elm_uint64$UInt64$add,
				A2($MartinSStewart$elm_uint64$UInt64$mul, aH, bM),
				A2($MartinSStewart$elm_uint64$UInt64$mul, aM, bH));
			var _v7 = $MartinSStewart$elm_uint64$UInt64$toInt24s(z3);
			var m3 = _v7.b;
			var l3 = _v7.c;
			var x3 = (((((h1 << 8) + (m1 >>> 16)) + (l2 >>> 16)) + ((65535 & m2) << 8)) + ((65535 & l3) << 8)) + A2(findCarryOver, x2, 65535);
			var x4 = (((((h2 << 8) + (m2 >>> 16)) + (l3 >>> 16)) + ((65535 & m3) << 8)) + ((65535 & l4) << 8)) + A2(findCarryOver, x3, 16777215);
			var x5 = (((l4 >>> 16) + (m4 << 8)) + (m3 >>> 16)) + A2(findCarryOver, x4, 16777215);
			var msb = A3($MartinSStewart$elm_uint64$UInt64$fromInt24s, 65535 & x5, 16777215 & x4, 16777215 & x3);
			return A2($author$project$Blake2b$Int128$Int128, msb, lsb);
		}
	});
var $MartinSStewart$elm_uint64$UInt64$shiftLeftBy = F2(
	function (givenShift, _v0) {
		var _v1 = _v0.a;
		var high = _v1.a;
		var mid = _v1.b;
		var low = _v1.c;
		var n = 63 & givenShift;
		return (n < 24) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & ((high << n) | (mid >>> (24 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & ((mid << n) | (low >>> (24 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & (low << n))) : ((n < 48) ? $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & ((mid << (n - 24)) | (low >>> (48 - n))), $MartinSStewart$elm_uint64$UInt64$max24 & (low << (n - 24)), 0)) : $MartinSStewart$elm_uint64$UInt64$UInt64(
			_Utils_Tuple3($MartinSStewart$elm_uint64$UInt64$max16 & (low << (n - 48)), 0, 0)));
	});
var $author$project$List$ExtraBis$take64 = F2(
	function (u64, list) {
		var _v0 = $MartinSStewart$elm_uint64$UInt64$toInt31(u64);
		if (_v0.$ === 'Just') {
			var u31 = _v0.a;
			return A2($elm$core$List$take, u31, list);
		} else {
			var chunked = A2($author$project$List$ExtraBis$chunksOf, 4294967295, list);
			var _v1 = $MartinSStewart$elm_uint64$UInt64$toInt32s(u64);
			var iMS = _v1.a;
			var iLS = _v1.b;
			return A2(
				$elm$core$List$take,
				iLS,
				$elm$core$List$concat(
					A2($elm$core$List$take, iMS, chunked)));
		}
	});
var $MartinSStewart$elm_uint64$UInt64$toBigEndianBytes = function (_v0) {
	var _v1 = _v0.a;
	var high = _v1.a;
	var mid = _v1.b;
	var low = _v1.c;
	return _List_fromArray(
		[high >>> 8, 255 & high, mid >>> 16, 255 & (mid >>> 8), 255 & mid, low >>> 16, 255 & (low >>> 8), 255 & low]);
};
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, list),
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $author$project$Blake2b$blake2b = F3(
	function (mKey, hashBytesLength, input) {
		var ll = $elm$core$List$length(input);
		var endPad = A2(
			$elm$core$List$repeat,
			A2(
				$elm$core$Basics$modBy,
				128,
				128 - A2($elm$core$Basics$modBy, 128, ll)),
			0);
		var _v0 = function () {
			var _v1 = _Utils_Tuple2(mKey, input);
			if (_v1.a.$ === 'Nothing') {
				if (!_v1.b.b) {
					var _v2 = _v1.a;
					return _Utils_Tuple2(
						A2($elm$core$List$repeat, 128, 0),
						$MartinSStewart$elm_uint64$UInt64$zero);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(
						_Utils_ap(input, endPad),
						$MartinSStewart$elm_uint64$UInt64$zero);
				}
			} else {
				var key = _v1.a.a;
				var keyLen = $elm$core$List$length(key);
				var keyBlock = _Utils_ap(
					key,
					A2($elm$core$List$repeat, 128 - keyLen, 0));
				return _Utils_Tuple2(
					$elm$core$List$concat(
						_List_fromArray(
							[keyBlock, input, endPad])),
					$MartinSStewart$elm_uint64$UInt64$fromInt(keyLen));
			}
		}();
		var preprocessedInput = _v0.a;
		var kk = _v0.b;
		var initialState = A3(
			$elm_community$list_extra$List$Extra$updateAt,
			0,
			function (w) {
				return A2(
					$MartinSStewart$elm_uint64$UInt64$xor,
					hashBytesLength,
					A2(
						$MartinSStewart$elm_uint64$UInt64$xor,
						A2($MartinSStewart$elm_uint64$UInt64$shiftLeftBy, 8, kk),
						A2(
							$MartinSStewart$elm_uint64$UInt64$xor,
							w,
							$MartinSStewart$elm_uint64$UInt64$fromInt(16842752))));
			},
			$author$project$Blake2b$blake2bIV);
		var lastCtr = function () {
			var _v5 = A2($MartinSStewart$elm_uint64$UInt64$compare, kk, $MartinSStewart$elm_uint64$UInt64$zero);
			if (_v5.$ === 'EQ') {
				return A2(
					$author$project$Blake2b$Int128$Int128,
					$MartinSStewart$elm_uint64$UInt64$zero,
					$MartinSStewart$elm_uint64$UInt64$fromInt(ll));
			} else {
				return A2(
					$author$project$Blake2b$Int128$Int128,
					$MartinSStewart$elm_uint64$UInt64$zero,
					$MartinSStewart$elm_uint64$UInt64$fromInt(ll + 128));
			}
		}();
		var inputBlocks = A2($author$project$List$ExtraBis$chunksOf, 128, preprocessedInput);
		var lastBlock = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$elm_community$list_extra$List$Extra$last(inputBlocks));
		var updatedState = A3(
			$elm$core$List$foldl,
			F2(
				function (block, _v4) {
					var state = _v4.a;
					var i = _v4.b;
					var ctr = A2(
						$author$project$Blake2b$Int128$mul,
						A2($MartinSStewart$elm_uint64$UInt64$add, i, $MartinSStewart$elm_uint64$UInt64$one),
						$MartinSStewart$elm_uint64$UInt64$fromInt(128));
					return _Utils_Tuple2(
						A4($author$project$Blake2b$compress, state, block, ctr, false),
						A2($MartinSStewart$elm_uint64$UInt64$add, i, $MartinSStewart$elm_uint64$UInt64$one));
				}),
			_Utils_Tuple2(initialState, $MartinSStewart$elm_uint64$UInt64$zero),
			A2(
				$elm$core$List$take,
				$elm$core$List$length(inputBlocks) - 1,
				inputBlocks)).a;
		return A2(
			$author$project$List$ExtraBis$take64,
			hashBytesLength,
			A2(
				$elm$core$List$concatMap,
				A2($elm$core$Basics$composeR, $MartinSStewart$elm_uint64$UInt64$toBigEndianBytes, $elm$core$List$reverse),
				A4($author$project$Blake2b$compress, updatedState, lastBlock, lastCtr, true)));
	});
var $author$project$Blake2b$blake2b224 = function (mKey) {
	return A2(
		$author$project$Blake2b$blake2b,
		mKey,
		$MartinSStewart$elm_uint64$UInt64$fromInt(28));
};
var $author$project$Bytes$Comparable$fromU8 = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$map($elm$bytes$Bytes$Encode$unsignedInt8),
	A2(
		$elm$core$Basics$composeR,
		$elm$bytes$Bytes$Encode$sequence,
		A2($elm$core$Basics$composeR, $elm$bytes$Bytes$Encode$encode, $author$project$Bytes$Comparable$fromBytes)));
var $author$project$Bytes$Comparable$splitStep = function (_v0) {
	var size = _v0.a;
	var u8s = _v0.b;
	return (size <= 0) ? $elm$bytes$Bytes$Decode$succeed(
		$elm$bytes$Bytes$Decode$Done(
			$elm$core$List$reverse(u8s))) : A2(
		$elm$bytes$Bytes$Decode$map,
		function (u8) {
			return $elm$bytes$Bytes$Decode$Loop(
				_Utils_Tuple2(
					size - 1,
					A2($elm$core$List$cons, u8, u8s)));
		},
		$elm$bytes$Bytes$Decode$unsignedInt8);
};
var $author$project$Bytes$Comparable$bytesToU8 = F2(
	function (size, bs) {
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$bytes$Bytes$Decode$decode,
				A2(
					$elm$bytes$Bytes$Decode$loop,
					_Utils_Tuple2(size, _List_Nil),
					$author$project$Bytes$Comparable$splitStep),
				bs));
	});
var $author$project$Bytes$Comparable$toU8 = function (bs) {
	return A2(
		$author$project$Bytes$Comparable$bytesToU8,
		$author$project$Bytes$Comparable$width(bs),
		$author$project$Bytes$Comparable$toBytes(bs));
};
var $author$project$Bytes$Comparable$hash = F2(
	function (hashFunction, bs) {
		return $author$project$Bytes$Comparable$fromU8(
			hashFunction(
				$author$project$Bytes$Comparable$toU8(bs)));
	});
var $author$project$Bytes$Comparable$blake2b224 = function (bs) {
	return A2(
		$author$project$Bytes$Comparable$hash,
		$author$project$Blake2b$blake2b224($elm$core$Maybe$Nothing),
		bs);
};
var $author$project$Cardano$Script$encodePlutusVersion = function (version) {
	return $elm_toulouse$cbor$Cbor$Encode$int(
		function () {
			switch (version.$) {
				case 'PlutusV1':
					return 1;
				case 'PlutusV2':
					return 2;
				default:
					return 3;
			}
		}());
};
var $author$project$Cardano$Script$hash = function (script) {
	var hashEncoder = function () {
		if (script.$ === 'Native') {
			var nativeScript = script.a;
			return $elm_toulouse$cbor$Cbor$Encode$sequence(
				_List_fromArray(
					[
						$elm_toulouse$cbor$Cbor$Encode$int(0),
						$author$project$Cardano$Script$encodeNativeScript(nativeScript)
					]));
		} else {
			var plutusScript = script.a.a;
			return $elm_toulouse$cbor$Cbor$Encode$sequence(
				_List_fromArray(
					[
						$author$project$Cardano$Script$encodePlutusVersion(plutusScript.version),
						$elm_toulouse$cbor$Cbor$Encode$bytes(
						$author$project$Bytes$Comparable$toBytes(plutusScript.flatBytes))
					]));
		}
	}();
	return $author$project$Bytes$Comparable$blake2b224(
		$author$project$Bytes$Comparable$fromBytes(
			$elm_toulouse$cbor$Cbor$Encode$encode(hashEncoder)));
};
var $author$project$Cardano$Script$PlutusScript = function (a) {
	return {$: 'PlutusScript', a: a};
};
var $author$project$Cardano$Script$plutusScriptFromBytes = F2(
	function (version, bytes) {
		var _v0 = A2(
			$elm_toulouse$cbor$Cbor$Decode$decode,
			$elm_toulouse$cbor$Cbor$Decode$bytes,
			$author$project$Bytes$Comparable$toBytes(bytes));
		if (_v0.$ === 'Nothing') {
			return $author$project$Cardano$Script$PlutusScript(
				{
					flatBytes: $author$project$Bytes$Comparable$fromHexUnchecked(
						$author$project$Bytes$Comparable$toHex(bytes)),
					version: version
				});
		} else {
			var wrappedBytes = _v0.a;
			var _v1 = A2($elm_toulouse$cbor$Cbor$Decode$decode, $elm_toulouse$cbor$Cbor$Decode$bytes, wrappedBytes);
			if (_v1.$ === 'Nothing') {
				return $author$project$Cardano$Script$PlutusScript(
					{
						flatBytes: $author$project$Bytes$Comparable$fromBytes(wrappedBytes),
						version: version
					});
			} else {
				var flatBytes = _v1.a;
				return $author$project$Cardano$Script$PlutusScript(
					{
						flatBytes: $author$project$Bytes$Comparable$fromBytes(flatBytes),
						version: version
					});
			}
		}
	});
var $author$project$Cardano$Script$refHash = function (_v0) {
	var scriptHash = _v0.a.scriptHash;
	return scriptHash;
};
var $author$project$Cardano$Script$Native = function (a) {
	return {$: 'Native', a: a};
};
var $author$project$Cardano$Script$InvalidBefore = function (a) {
	return {$: 'InvalidBefore', a: a};
};
var $author$project$Cardano$Script$InvalidHereafter = function (a) {
	return {$: 'InvalidHereafter', a: a};
};
var $author$project$Cardano$Script$ScriptAll = function (a) {
	return {$: 'ScriptAll', a: a};
};
var $author$project$Cardano$Script$ScriptAny = function (a) {
	return {$: 'ScriptAny', a: a};
};
var $author$project$Cardano$Script$ScriptNofK = F2(
	function (a, b) {
		return {$: 'ScriptNofK', a: a, b: b};
	});
var $author$project$Cardano$Script$ScriptPubkey = function (a) {
	return {$: 'ScriptPubkey', a: a};
};
var $elm_toulouse$cbor$Cbor$Decode$ignoreThen = F2(
	function (a, ignored) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$andThen,
			$elm$core$Basics$always(a),
			ignored);
	});
var $elm_toulouse$cbor$Cbor$Decode$definiteLength = function (majorType) {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$consumeNextMajor,
		majorType,
		function (a) {
			return _Utils_eq(a, $elm_toulouse$cbor$Cbor$Decode$tBEGIN) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$fail : $elm_toulouse$cbor$Cbor$Decode$unsigned(a);
		});
};
var $elm_toulouse$cbor$Cbor$Decode$length = $elm_toulouse$cbor$Cbor$Decode$definiteLength(4);
var $elm_toulouse$cbor$Cbor$Decode$map2 = F3(
	function (fn, _v0, b) {
		var consumeNext = _v0.a;
		var processNext = _v0.b;
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$Decoder,
			consumeNext,
			A2(
				$elm$core$Basics$composeR,
				processNext,
				function (a) {
					return A3(
						$elm_toulouse$cbor$Bytes$Decode$Branchable$map2,
						fn,
						a,
						$elm_toulouse$cbor$Cbor$Decode$runDecoder(b));
				}));
	});
var $author$project$Cbor$Decode$Extra$natural = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (_v0) {
		var sign = _v0.a;
		var nat = _v0.b;
		if (sign.$ === 'Positive') {
			return $elm_toulouse$cbor$Cbor$Decode$succeed(nat);
		} else {
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	$author$project$Cbor$Decode$Extra$bigNum);
function $author$project$Cardano$Script$cyclic$decodeNativeScript() {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$andThen,
		function (tag) {
			switch (tag) {
				case 0:
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$map,
						A2($elm$core$Basics$composeL, $author$project$Cardano$Script$ScriptPubkey, $author$project$Bytes$Comparable$fromBytes),
						$elm_toulouse$cbor$Cbor$Decode$bytes);
				case 1:
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$map,
						$author$project$Cardano$Script$ScriptAll,
						$elm_toulouse$cbor$Cbor$Decode$list(
							$author$project$Cardano$Script$cyclic$decodeNativeScript()));
				case 2:
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$map,
						$author$project$Cardano$Script$ScriptAny,
						$elm_toulouse$cbor$Cbor$Decode$list(
							$author$project$Cardano$Script$cyclic$decodeNativeScript()));
				case 3:
					return A3(
						$elm_toulouse$cbor$Cbor$Decode$map2,
						$author$project$Cardano$Script$ScriptNofK,
						$elm_toulouse$cbor$Cbor$Decode$int,
						$elm_toulouse$cbor$Cbor$Decode$list(
							$author$project$Cardano$Script$cyclic$decodeNativeScript()));
				case 4:
					return A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Cardano$Script$InvalidBefore, $author$project$Cbor$Decode$Extra$natural);
				case 5:
					return A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Cardano$Script$InvalidHereafter, $author$project$Cbor$Decode$Extra$natural);
				default:
					return $elm_toulouse$cbor$Cbor$Decode$fail;
			}
		},
		A2($elm_toulouse$cbor$Cbor$Decode$ignoreThen, $elm_toulouse$cbor$Cbor$Decode$int, $elm_toulouse$cbor$Cbor$Decode$length));
}
try {
	var $author$project$Cardano$Script$decodeNativeScript = $author$project$Cardano$Script$cyclic$decodeNativeScript();
	$author$project$Cardano$Script$cyclic$decodeNativeScript = function () {
		return $author$project$Cardano$Script$decodeNativeScript;
	};
} catch ($) {
	throw 'Some top-level definitions from `Cardano.Script` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodeNativeScript\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$core$Debug$log = _Debug_log;
var $elm$bytes$Bytes$Decode$map2 = F3(
	function (func, _v0, _v1) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v2 = A2(decodeA, bites, offset);
					var aOffset = _v2.a;
					var a = _v2.b;
					var _v3 = A2(decodeB, bites, aOffset);
					var bOffset = _v3.a;
					var b = _v3.b;
					return _Utils_Tuple2(
						bOffset,
						A2(func, a, b));
				}));
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$dropBytes = F2(
	function (offset, bs) {
		var width = $elm$bytes$Bytes$width(bs);
		return A2(
			$elm$core$Maybe$withDefault,
			bs,
			function (d) {
				return A2($elm$bytes$Bytes$Decode$decode, d, bs);
			}(
				A3(
					$elm$bytes$Bytes$Decode$map2,
					F2(
						function (_v0, x) {
							return x;
						}),
					$elm$bytes$Bytes$Decode$bytes(offset),
					$elm$bytes$Bytes$Decode$bytes(width - offset))));
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$oneOfHelper = F3(
	function (offsetInput, options, state) {
		oneOfHelper:
		while (true) {
			if (!options.b) {
				return $elm$bytes$Bytes$Decode$fail;
			} else {
				var decoder = options.a;
				var otherDecoders = options.b;
				var _v1 = A2($elm_toulouse$cbor$Bytes$Decode$Branchable$runKeepState, decoder, offsetInput);
				if (_v1.$ === 'Just') {
					var _v2 = _v1.a;
					var newState = _v2.a;
					var value = _v2.b;
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (_v3) {
							return _Utils_Tuple2(
								{input: state.input, offset: state.offset + newState.offset},
								value);
						},
						$elm$bytes$Bytes$Decode$bytes(newState.offset));
				} else {
					var $temp$offsetInput = offsetInput,
						$temp$options = otherDecoders,
						$temp$state = state;
					offsetInput = $temp$offsetInput;
					options = $temp$options;
					state = $temp$state;
					continue oneOfHelper;
				}
			}
		}
	});
var $elm_toulouse$cbor$Bytes$Decode$Branchable$oneOf = function (options) {
	return $elm_toulouse$cbor$Bytes$Decode$Branchable$Decoder(
		function (state) {
			return A3(
				$elm_toulouse$cbor$Bytes$Decode$Branchable$oneOfHelper,
				A2($elm_toulouse$cbor$Bytes$Decode$Branchable$dropBytes, state.offset, state.input),
				options,
				state);
		});
};
var $elm_toulouse$cbor$Bytes$Decode$Branchable$peek = A2($elm_toulouse$cbor$Bytes$Decode$Branchable$fromDecoder, $elm$bytes$Bytes$Decode$unsignedInt8, 0);
var $elm_toulouse$cbor$Cbor$Decode$oneOf = function (alternatives) {
	var absurd = 28 << 5;
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$Decoder,
		$elm_toulouse$cbor$Bytes$Decode$Branchable$oneOf(
			_List_fromArray(
				[
					$elm_toulouse$cbor$Bytes$Decode$Branchable$peek,
					$elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(absurd)
				])),
		$elm$core$Basics$always(
			$elm_toulouse$cbor$Bytes$Decode$Branchable$oneOf(
				A2($elm$core$List$map, $elm_toulouse$cbor$Cbor$Decode$runDecoder, alternatives))));
};
var $elm_toulouse$cbor$Cbor$Decode$raw = A2(
	$elm_toulouse$cbor$Cbor$Decode$map,
	A2($elm$core$Basics$composeR, $elm_toulouse$cbor$Cbor$Encode$any, $elm_toulouse$cbor$Cbor$Encode$encode),
	$elm_toulouse$cbor$Cbor$Decode$any);
var $author$project$Cbor$Decode$Extra$failWith = function (msg) {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$andThen,
		function (rawBytes) {
			var _v0 = A2(
				$elm$core$Debug$log,
				msg,
				$author$project$Bytes$Comparable$toHex(rawBytes));
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		},
		$elm_toulouse$cbor$Cbor$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Decode$raw),
					$elm_toulouse$cbor$Cbor$Decode$succeed(
					$author$project$Bytes$Comparable$fromHexUnchecked('...'))
				])));
};
var $author$project$Cardano$Script$plutusFromCbor = function (version) {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$andThen,
		function (wrappedBytes) {
			var _v0 = A2($elm_toulouse$cbor$Cbor$Decode$decode, $elm_toulouse$cbor$Cbor$Decode$bytes, wrappedBytes);
			if (_v0.$ === 'Just') {
				var flatBytes = _v0.a;
				return $elm_toulouse$cbor$Cbor$Decode$succeed(
					$author$project$Cardano$Script$PlutusScript(
						{
							flatBytes: $author$project$Bytes$Comparable$fromBytes(flatBytes),
							version: version
						}));
			} else {
				return $author$project$Cbor$Decode$Extra$failWith(
					'Failed to decode Plutus script: ' + $author$project$Bytes$Comparable$toHex(
						$author$project$Bytes$Comparable$fromBytes(wrappedBytes)));
			}
		},
		$elm_toulouse$cbor$Cbor$Decode$bytes);
};
var $author$project$Cardano$Script$fromCbor = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (v) {
		switch (v) {
			case 0:
				return A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Cardano$Script$Native, $author$project$Cardano$Script$decodeNativeScript);
			case 1:
				return A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					$author$project$Cardano$Script$Plutus,
					$author$project$Cardano$Script$plutusFromCbor($author$project$Cardano$Script$PlutusV1));
			case 2:
				return A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					$author$project$Cardano$Script$Plutus,
					$author$project$Cardano$Script$plutusFromCbor($author$project$Cardano$Script$PlutusV2));
			case 3:
				return A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					$author$project$Cardano$Script$Plutus,
					$author$project$Cardano$Script$plutusFromCbor($author$project$Cardano$Script$PlutusV3));
			default:
				return $author$project$Cbor$Decode$Extra$failWith(
					'Unknown script version: ' + $elm$core$String$fromInt(v));
		}
	},
	A2($elm_toulouse$cbor$Cbor$Decode$ignoreThen, $elm_toulouse$cbor$Cbor$Decode$int, $elm_toulouse$cbor$Cbor$Decode$length));
var $author$project$Cardano$Script$refScript = function (_v0) {
	var bytes = _v0.a.bytes;
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$decode,
		$author$project$Cardano$Script$fromCbor,
		$author$project$Bytes$Comparable$toBytes(bytes));
};
var $author$project$Cardano$Witness$checkPlutusScript = F3(
	function (localStateUtxos, expectedHash, plutusScriptWitness) {
		var _v0 = plutusScriptWitness.script;
		var version = _v0.a;
		var witnessSource = _v0.b;
		if (witnessSource.$ === 'ByValue') {
			var scriptBytes = witnessSource.a;
			var computedScriptHash = $author$project$Cardano$Script$hash(
				$author$project$Cardano$Script$Plutus(
					A2($author$project$Cardano$Script$plutusScriptFromBytes, version, scriptBytes)));
			return $author$project$Cardano$Witness$checkScriptMatch(
				{expected: expectedHash, witness: computedScriptHash});
		} else {
			var outputRef = witnessSource.a;
			var checkValidScript = function (scriptRef) {
				var _v2 = $author$project$Cardano$Script$refScript(scriptRef);
				if (_v2.$ === 'Just') {
					return $elm$core$Result$Ok(scriptRef);
				} else {
					return $elm$core$Result$Err(
						A3(
							$author$project$Cardano$Witness$InvalidScriptRef,
							outputRef,
							$author$project$Cardano$Script$refBytes(scriptRef),
							'UTxO contains an invalid reference script (bytes cannot be decoded into an actual script)'));
				}
			};
			return A2(
				$elm$core$Result$andThen,
				function (scriptRef) {
					return $author$project$Cardano$Witness$checkScriptMatch(
						{
							expected: expectedHash,
							witness: $author$project$Cardano$Script$refHash(scriptRef)
						});
				},
				A2(
					$elm$core$Result$andThen,
					checkValidScript,
					A2($author$project$Cardano$Witness$getRefScript, localStateUtxos, outputRef)));
		}
	});
var $author$project$Cardano$TxIntent$validateGuardrails = F3(
	function (localStateUtxos, govState, preProcessedIntents) {
		var requiresGuardrails = function (proposalIntent) {
			var _v3 = proposalIntent.govAction;
			switch (_v3.$) {
				case 'ParameterChange':
					return true;
				case 'TreasuryWithdrawals':
					return true;
				default:
					return false;
			}
		};
		if (A2($elm$core$List$any, requiresGuardrails, preProcessedIntents.proposalIntents)) {
			var _v0 = govState.guardrailsScript;
			if (_v0.$ === 'Just') {
				var policyId = _v0.a.policyId;
				var plutusVersion = _v0.a.plutusVersion;
				var scriptWitness = _v0.a.scriptWitness;
				var guardrailsDummyPlutusScriptWitness = {
					redeemerData: function (_v2) {
						return $author$project$Cardano$Data$List(_List_Nil);
					},
					requiredSigners: _List_Nil,
					script: _Utils_Tuple2(plutusVersion, scriptWitness)
				};
				return A2(
					$elm$core$Result$map,
					function (_v1) {
						return A2(
							$elm$core$List$cons,
							_Utils_Tuple2(plutusVersion, scriptWitness),
							preProcessedIntents.plutusScriptSources);
					},
					A2(
						$elm$core$Result$mapError,
						$author$project$Cardano$TxIntent$WitnessError,
						A3($author$project$Cardano$Witness$checkPlutusScript, localStateUtxos, policyId, guardrailsDummyPlutusScriptWitness)));
			} else {
				return $elm$core$Result$Ok(preProcessedIntents.plutusScriptSources);
			}
		} else {
			return $elm$core$Result$Ok(preProcessedIntents.plutusScriptSources);
		}
	});
var $author$project$Cardano$TxIntent$DuplicateMints = function (a) {
	return {$: 'DuplicateMints', a: a};
};
var $author$project$Cardano$TxIntent$EmptyMint = function (a) {
	return {$: 'EmptyMint', a: a};
};
var $author$project$Cardano$Witness$InvalidExpectedSigners = F2(
	function (a, b) {
		return {$: 'InvalidExpectedSigners', a: a, b: b};
	});
var $author$project$Cardano$Script$extractSignersHelper = F2(
	function (nativeScript, accum) {
		switch (nativeScript.$) {
			case 'ScriptPubkey':
				var key = nativeScript.a;
				return A3(
					$elm$core$Dict$insert,
					$author$project$Bytes$Comparable$toHex(key),
					key,
					accum);
			case 'ScriptAll':
				var list = nativeScript.a;
				return A3($elm$core$List$foldl, $author$project$Cardano$Script$extractSignersHelper, accum, list);
			case 'ScriptAny':
				var list = nativeScript.a;
				return A3($elm$core$List$foldl, $author$project$Cardano$Script$extractSignersHelper, accum, list);
			case 'ScriptNofK':
				var list = nativeScript.b;
				return A3($elm$core$List$foldl, $author$project$Cardano$Script$extractSignersHelper, accum, list);
			case 'InvalidBefore':
				return accum;
			default:
				return accum;
		}
	});
var $author$project$Cardano$Script$extractSigners = function (nativeScript) {
	return A2($author$project$Cardano$Script$extractSignersHelper, nativeScript, $elm$core$Dict$empty);
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm_community$list_extra$List$Extra$count = function (predicate) {
	return A2(
		$elm$core$List$foldl,
		F2(
			function (x, acc) {
				return predicate(x) ? (acc + 1) : acc;
			}),
		0);
};
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$Cardano$Script$isMultisigSatisfiedHelper = F2(
	function (signers, nativeScript) {
		switch (nativeScript.$) {
			case 'ScriptPubkey':
				var key = nativeScript.a;
				return A2(
					$elm$core$Set$member,
					$author$project$Bytes$Comparable$toHex(key),
					signers);
			case 'ScriptAll':
				var subScripts = nativeScript.a;
				return A2(
					$elm$core$List$all,
					$author$project$Cardano$Script$isMultisigSatisfiedHelper(signers),
					subScripts);
			case 'ScriptAny':
				var subScripts = nativeScript.a;
				return A2(
					$elm$core$List$any,
					$author$project$Cardano$Script$isMultisigSatisfiedHelper(signers),
					subScripts);
			case 'ScriptNofK':
				var n = nativeScript.a;
				var subScripts = nativeScript.b;
				return _Utils_cmp(
					A2(
						$elm_community$list_extra$List$Extra$count,
						$author$project$Cardano$Script$isMultisigSatisfiedHelper(signers),
						subScripts),
					n) > -1;
			case 'InvalidBefore':
				return true;
			default:
				return true;
		}
	});
var $author$project$Cardano$Script$isMultisigSatisfied = F2(
	function (signers, nativeScript) {
		return A2(
			$author$project$Cardano$Script$isMultisigSatisfiedHelper,
			$elm$core$Set$fromList(
				A2($elm$core$List$map, $author$project$Bytes$Comparable$toHex, signers)),
			nativeScript);
	});
var $author$project$Cardano$Witness$checkExpectedSigners = F2(
	function (expected, nativeScript) {
		var signersInScript = $author$project$Cardano$Script$extractSigners(nativeScript);
		var expectedDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (x) {
					return _Utils_Tuple2(
						$author$project$Bytes$Comparable$toHex(x),
						x);
				},
				expected));
		var signersNotInScript = A2($elm$core$Dict$diff, expectedDict, signersInScript);
		return $elm$core$Dict$isEmpty(signersNotInScript) ? (A2($author$project$Cardano$Script$isMultisigSatisfied, expected, nativeScript) ? $elm$core$Result$Ok(_Utils_Tuple0) : $elm$core$Result$Err('Native multisig not satisfied')) : $elm$core$Result$Err(
			'These signers in the expected list, are not part of the multisig: ' + A2(
				$elm$core$String$join,
				', ',
				$elm$core$Dict$keys(signersNotInScript)));
	});
var $author$project$Cardano$Witness$checkNativeScript = F3(
	function (localStateUtxos, expectedHash, _v0) {
		var script = _v0.script;
		var expectedSigners = _v0.expectedSigners;
		var checkSigners = F2(
			function (nativeScript, _v3) {
				return A2(
					$elm$core$Result$mapError,
					$author$project$Cardano$Witness$InvalidExpectedSigners(
						{scriptHash: expectedHash}),
					A2($author$project$Cardano$Witness$checkExpectedSigners, expectedSigners, nativeScript));
			});
		if (script.$ === 'ByValue') {
			var nativeScript = script.a;
			return A2(
				$elm$core$Result$andThen,
				checkSigners(nativeScript),
				$author$project$Cardano$Witness$checkScriptMatch(
					{
						expected: expectedHash,
						witness: $author$project$Cardano$Script$hash(
							$author$project$Cardano$Script$Native(nativeScript))
					}));
		} else {
			var outputRef = script.a;
			return A2(
				$elm$core$Result$andThen,
				function (scriptRef) {
					var _v2 = $author$project$Cardano$Script$refScript(scriptRef);
					if (_v2.$ === 'Nothing') {
						return $elm$core$Result$Err(
							A3(
								$author$project$Cardano$Witness$InvalidScriptRef,
								outputRef,
								$author$project$Cardano$Script$refBytes(scriptRef),
								'UTxO contains an invalid reference script (bytes cannot be decoded into an actual script)'));
					} else {
						if (_v2.a.$ === 'Plutus') {
							return $elm$core$Result$Err(
								A3(
									$author$project$Cardano$Witness$InvalidScriptRef,
									outputRef,
									$author$project$Cardano$Script$refBytes(scriptRef),
									'UTxO reference contains a Plutus script instead of a native script'));
						} else {
							var nativeScript = _v2.a.a;
							return A2(
								$elm$core$Result$andThen,
								checkSigners(nativeScript),
								$author$project$Cardano$Witness$checkScriptMatch(
									{
										expected: expectedHash,
										witness: $author$project$Cardano$Script$refHash(scriptRef)
									}));
						}
					}
				},
				A2($author$project$Cardano$Witness$getRefScript, localStateUtxos, outputRef));
		}
	});
var $author$project$Cardano$Witness$checkScript = F3(
	function (localStateUtxos, expectedHash, script) {
		if (script.$ === 'Native') {
			var nativeScript = script.a;
			return A3($author$project$Cardano$Witness$checkNativeScript, localStateUtxos, expectedHash, nativeScript);
		} else {
			var plutusScript = script.a;
			return A3($author$project$Cardano$Witness$checkPlutusScript, localStateUtxos, expectedHash, plutusScript);
		}
	});
var $author$project$Cardano$TxIntent$checkMint = F2(
	function (localStateUtxos, _v0) {
		var policyId = _v0.policyId;
		var assets = _v0.assets;
		var scriptWitness = _v0.scriptWitness;
		var normalizedAssets = A2(
			$author$project$Bytes$Map$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dwayne$elm_integer$Integer$isZero),
			assets);
		return $author$project$Bytes$Map$isEmpty(normalizedAssets) ? $elm$core$Result$Err(
			$author$project$Cardano$TxIntent$EmptyMint(
				{
					policyId: $author$project$Bytes$Comparable$toHex(policyId)
				})) : A2(
			$elm$core$Result$mapError,
			$author$project$Cardano$TxIntent$WitnessError,
			A3($author$project$Cardano$Witness$checkScript, localStateUtxos, policyId, scriptWitness));
	});
var $elm_community$list_extra$List$Extra$groupWhile = F2(
	function (isSameGroup, items) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					if (!acc.b) {
						return _List_fromArray(
							[
								_Utils_Tuple2(x, _List_Nil)
							]);
					} else {
						var _v1 = acc.a;
						var y = _v1.a;
						var restOfGroup = _v1.b;
						var groups = acc.b;
						return A2(isSameGroup, x, y) ? A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								x,
								A2($elm$core$List$cons, y, restOfGroup)),
							groups) : A2(
							$elm$core$List$cons,
							_Utils_Tuple2(x, _List_Nil),
							acc);
					}
				}),
			_List_Nil,
			items);
	});
var $elm_community$list_extra$List$Extra$group = $elm_community$list_extra$List$Extra$groupWhile($elm$core$Basics$eq);
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm_community$list_extra$List$Extra$frequencies = function (list) {
	return A2(
		$elm$core$List$map,
		function (_v0) {
			var x = _v0.a;
			var y = _v0.b;
			return _Utils_Tuple2(
				x,
				1 + $elm$core$List$length(y));
		},
		$elm_community$list_extra$List$Extra$group(
			$elm$core$List$sort(list)));
};
var $author$project$Cardano$TxIntent$validateMints = F2(
	function (localStateUtxos, mints) {
		var policyIds = A2(
			$elm$core$List$map,
			function (m) {
				return $author$project$Bytes$Comparable$toHex(m.policyId);
			},
			mints);
		var duplicatePolicyIds = A2(
			$elm$core$List$map,
			function (p) {
				return {policyId: p};
			},
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2(
					$elm$core$List$filter,
					function (_v1) {
						var freq = _v1.b;
						return freq > 1;
					},
					$elm_community$list_extra$List$Extra$frequencies(policyIds))));
		return (!$elm$core$List$isEmpty(duplicatePolicyIds)) ? $elm$core$Result$Err(
			$author$project$Cardano$TxIntent$DuplicateMints(duplicatePolicyIds)) : A2(
			$elm$core$Result$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$map,
					$author$project$Cardano$TxIntent$checkMint(localStateUtxos),
					mints)));
	});
var $author$project$Cardano$Witness$DatumHashMismatch = F2(
	function (a, b) {
		return {$: 'DatumHashMismatch', a: a, b: b};
	});
var $author$project$Cardano$Witness$ExtraneousDatum = F2(
	function (a, b) {
		return {$: 'ExtraneousDatum', a: a, b: b};
	});
var $author$project$Cardano$Witness$MissingDatum = F2(
	function (a, b) {
		return {$: 'MissingDatum', a: a, b: b};
	});
var $author$project$Blake2b$blake2b256 = function (mKey) {
	return A2(
		$author$project$Blake2b$blake2b,
		mKey,
		$MartinSStewart$elm_uint64$UInt64$fromInt(32));
};
var $author$project$Bytes$Comparable$blake2b256 = function (bs) {
	return A2(
		$author$project$Bytes$Comparable$hash,
		$author$project$Blake2b$blake2b256($elm$core$Maybe$Nothing),
		bs);
};
var $author$project$Cardano$Data$hash = function (data) {
	return $author$project$Bytes$Comparable$blake2b256(
		$author$project$Bytes$Comparable$fromBytes(
			$elm_toulouse$cbor$Cbor$Encode$encode(
				$author$project$Cardano$Data$toCbor(data))));
};
var $author$project$Cardano$Data$rawDatumHash = function (rawData) {
	return $author$project$Bytes$Comparable$blake2b256(rawData);
};
var $author$project$Cardano$Witness$checkDatum = F3(
	function (localStateUtxos, maybeDatumOption, maybeDatumWitness) {
		var _v0 = _Utils_Tuple2(maybeDatumOption, maybeDatumWitness);
		if (_v0.a.$ === 'Nothing') {
			if (_v0.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $elm$core$Result$Ok(_Utils_Tuple0);
			} else {
				var _v3 = _v0.a;
				var datumWitness = _v0.b.a;
				return $elm$core$Result$Err(
					A2($author$project$Cardano$Witness$ExtraneousDatum, datumWitness, 'Datum witness was provided but the corresponding UTxO has no datum'));
			}
		} else {
			if (_v0.a.a.$ === 'DatumValue') {
				if (_v0.b.$ === 'Nothing') {
					var _v4 = _v0.b;
					return $elm$core$Result$Ok(_Utils_Tuple0);
				} else {
					var datumWitness = _v0.b.a;
					return $elm$core$Result$Err(
						A2($author$project$Cardano$Witness$ExtraneousDatum, datumWitness, 'Datum witness was provided but the corresponding UTxO already has a datum provided by value'));
				}
			} else {
				if (_v0.b.$ === 'Nothing') {
					var datumHash = _v0.a.a.a;
					var _v5 = _v0.b;
					return $elm$core$Result$Err(
						A2($author$project$Cardano$Witness$MissingDatum, datumHash, 'Datum in UTxO is a hash, but no witness was provided'));
				} else {
					var datumHash = _v0.a.a.a;
					var witness = _v0.b.a;
					var checkDatumMatch = function (hashes) {
						return _Utils_eq(hashes.expected, hashes.witness) ? $elm$core$Result$Ok(_Utils_Tuple0) : $elm$core$Result$Err(
							A2($author$project$Cardano$Witness$DatumHashMismatch, hashes, 'Provided witness has wrong datum hash. Maybe you provided the wrong witness Data, or it is encoded differently than the original one.'));
					};
					if (witness.$ === 'ByValue') {
						var data = witness.a;
						return checkDatumMatch(
							{
								expected: datumHash,
								witness: $author$project$Cardano$Data$hash(data)
							});
					} else {
						var utxoRef = witness.a;
						var checkDatumOption = function (datumOption) {
							if (datumOption.$ === 'Nothing') {
								return $elm$core$Result$Err(
									A2($author$project$Cardano$Witness$MissingDatum, datumHash, 'The referenced UTxO presented as witness does not contain a datum'));
							} else {
								if (datumOption.a.$ === 'DatumHash') {
									return $elm$core$Result$Err(
										A2($author$project$Cardano$Witness$MissingDatum, datumHash, 'The referenced UTxO presented as witness contains a datum hash again instead of a datum value'));
								} else {
									var rawBytes = datumOption.a.a.rawBytes;
									return checkDatumMatch(
										{
											expected: datumHash,
											witness: $author$project$Cardano$Data$rawDatumHash(rawBytes)
										});
								}
							}
						};
						return A2(
							$elm$core$Result$andThen,
							function (output) {
								return checkDatumOption(output.datumOption);
							},
							A2($author$project$Cardano$Witness$getUtxo, localStateUtxos, utxoRef));
					}
				}
			}
		}
	});
var $author$project$Cardano$TxIntent$InvalidAddress = F2(
	function (a, b) {
		return {$: 'InvalidAddress', a: a, b: b};
	});
var $author$project$Cardano$TxIntent$checkAddressSpending = F2(
	function (address, credentialValidator) {
		switch (address.$) {
			case 'Byron':
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidAddress, address, 'Byron addresses not supported'));
			case 'Reward':
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidAddress, address, 'Reward address cannot be spent'));
			default:
				var paymentCredential = address.a.paymentCredential;
				return credentialValidator(paymentCredential);
		}
	});
var $author$project$Cardano$TxIntent$checkScriptAddressSpending = function (address) {
	return A2(
		$author$project$Cardano$TxIntent$checkAddressSpending,
		address,
		function (credential) {
			if (credential.$ === 'VKeyHash') {
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidAddress, address, 'This is a regular wallet key address, not a script address'));
			} else {
				var scriptHash = credential.a;
				return $elm$core$Result$Ok(scriptHash);
			}
		});
};
var $author$project$Cardano$TxIntent$checkNativeScriptSpending = F3(
	function (localStateUtxos, spentInput, nativeScriptWitness) {
		return A2(
			$elm$core$Result$andThen,
			function (scriptHash) {
				return A2(
					$elm$core$Result$mapError,
					$author$project$Cardano$TxIntent$WitnessError,
					A3($author$project$Cardano$Witness$checkNativeScript, localStateUtxos, scriptHash, nativeScriptWitness));
			},
			$author$project$Cardano$TxIntent$checkScriptAddressSpending(spentInput.address));
	});
var $author$project$Cardano$TxIntent$checkPlutusScriptSpending = F3(
	function (localStateUtxos, spentInput, plutusScriptWitness) {
		return A2(
			$elm$core$Result$andThen,
			function (expectedHash) {
				return A2(
					$elm$core$Result$mapError,
					$author$project$Cardano$TxIntent$WitnessError,
					A3($author$project$Cardano$Witness$checkPlutusScript, localStateUtxos, expectedHash, plutusScriptWitness));
			},
			$author$project$Cardano$TxIntent$checkScriptAddressSpending(spentInput.address));
	});
var $author$project$Cardano$TxIntent$checkKeyAddressSpending = function (address) {
	return A2(
		$author$project$Cardano$TxIntent$checkAddressSpending,
		address,
		function (credential) {
			if (credential.$ === 'VKeyHash') {
				return $elm$core$Result$Ok(_Utils_Tuple0);
			} else {
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidAddress, address, 'This is a script address, not a regular wallet key address'));
			}
		});
};
var $author$project$Cardano$TxIntent$getUtxo = F2(
	function (utxos, ref) {
		return A2(
			$elm$core$Result$fromMaybe,
			$author$project$Cardano$TxIntent$WitnessError(
				$author$project$Cardano$Witness$ReferenceOutputsMissingFromLocalState(
					_List_fromArray(
						[ref]))),
			A2($turboMaCk$any_dict$Dict$Any$get, ref, utxos));
	});
var $author$project$Cardano$TxIntent$checkWalletSpending = F2(
	function (localStateUtxos, _v0) {
		var address = _v0.address;
		var guaranteedUtxos = _v0.guaranteedUtxos;
		var checkRefAddressIsKey = function (ref) {
			return A2(
				$elm$core$Result$andThen,
				function (output) {
					return $author$project$Cardano$TxIntent$checkKeyAddressSpending(output.address);
				},
				A2($author$project$Cardano$TxIntent$getUtxo, localStateUtxos, ref));
		};
		return A2(
			$elm$core$Result$andThen,
			function (_v1) {
				return A2(
					$elm$core$Result$map,
					function (_v2) {
						return _Utils_Tuple0;
					},
					$elm_community$result_extra$Result$Extra$combine(
						A2($elm$core$List$map, checkRefAddressIsKey, guaranteedUtxos)));
			},
			$author$project$Cardano$TxIntent$checkKeyAddressSpending(address));
	});
var $author$project$Cardano$TxIntent$checkSpentSource = F2(
	function (localStateUtxos, spending) {
		switch (spending.$) {
			case 'FromWallet':
				var walletSpending = spending.a;
				return A2($author$project$Cardano$TxIntent$checkWalletSpending, localStateUtxos, walletSpending);
			case 'FromNativeScript':
				var spentInput = spending.a.spentInput;
				var nativeScriptWitness = spending.a.nativeScriptWitness;
				return A2(
					$elm$core$Result$andThen,
					function (output) {
						return A3($author$project$Cardano$TxIntent$checkNativeScriptSpending, localStateUtxos, output, nativeScriptWitness);
					},
					A2($author$project$Cardano$TxIntent$getUtxo, localStateUtxos, spentInput));
			default:
				var spentInput = spending.a.spentInput;
				var datumWitness = spending.a.datumWitness;
				var plutusScriptWitness = spending.a.plutusScriptWitness;
				return A2(
					$elm$core$Result$andThen,
					function (output) {
						return A2(
							$elm$core$Result$andThen,
							function (_v1) {
								return A3($author$project$Cardano$TxIntent$checkPlutusScriptSpending, localStateUtxos, output, plutusScriptWitness);
							},
							A2(
								$elm$core$Result$mapError,
								$author$project$Cardano$TxIntent$WitnessError,
								A3($author$project$Cardano$Witness$checkDatum, localStateUtxos, output.datumOption, datumWitness)));
					},
					A2($author$project$Cardano$TxIntent$getUtxo, localStateUtxos, spentInput));
		}
	});
var $author$project$Cardano$TxIntent$validateSpentOutputs = F2(
	function (localStateUtxos, spendings) {
		return A2(
			$elm$core$Result$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$map,
					$author$project$Cardano$TxIntent$checkSpentSource(localStateUtxos),
					spendings)));
	});
var $author$project$Cardano$TxIntent$DuplicateVoters = function (a) {
	return {$: 'DuplicateVoters', a: a};
};
var $author$project$Cardano$TxIntent$EmptyVotes = function (a) {
	return {$: 'EmptyVotes', a: a};
};
var $elm_cardano$bech32$Bech32$Encode$PrefixTooShort = function (a) {
	return {$: 'PrefixTooShort', a: a};
};
var $elm_cardano$bech32$Bech32$Encode$UnexpectedCharacterInPrefix = function (a) {
	return {$: 'UnexpectedCharacterInPrefix', a: a};
};
var $elm$core$String$append = _String_append;
var $elm_cardano$bech32$Bech32$Internal$byteSize = 8;
var $elm_cardano$bech32$Bech32$Internal$maxWord = 31;
var $elm_cardano$bech32$Bech32$Internal$wordSize = 5;
var $elm_cardano$bech32$Bech32$Internal$nextWords = function (st) {
	nextWords:
	while (true) {
		if (_Utils_cmp(st.bits, $elm_cardano$bech32$Bech32$Internal$wordSize) > -1) {
			var bits = st.bits - $elm_cardano$bech32$Bech32$Internal$wordSize;
			var word = $elm_cardano$bech32$Bech32$Internal$maxWord & (st.value >> bits);
			var $temp$st = _Utils_update(
				st,
				{
					bits: bits,
					words: A2($elm$core$List$cons, word, st.words)
				});
			st = $temp$st;
			continue nextWords;
		} else {
			return st;
		}
	}
};
var $elm_cardano$bech32$Bech32$Internal$bytesToWords = function (bytes) {
	var decoder = A2(
		$elm$bytes$Bytes$Decode$loop,
		{
			bits: 0,
			value: 0,
			width: $elm$bytes$Bytes$width(bytes),
			words: _List_Nil
		},
		function (st) {
			return (st.width <= 0) ? $elm$bytes$Bytes$Decode$succeed(
				$elm$bytes$Bytes$Decode$Done(
					$elm$core$List$reverse(
						function () {
							if (st.bits > 0) {
								var padding = $elm_cardano$bech32$Bech32$Internal$maxWord & (st.value << ($elm_cardano$bech32$Bech32$Internal$wordSize - st.bits));
								return A2($elm$core$List$cons, padding, st.words);
							} else {
								return st.words;
							}
						}()))) : A2(
				$elm$bytes$Bytes$Decode$map,
				function (_byte) {
					var value = _byte | (st.value << $elm_cardano$bech32$Bech32$Internal$byteSize);
					return $elm$bytes$Bytes$Decode$Loop(
						$elm_cardano$bech32$Bech32$Internal$nextWords(
							_Utils_update(
								st,
								{bits: st.bits + $elm_cardano$bech32$Bech32$Internal$byteSize, value: value, width: st.width - 1})));
				},
				$elm$bytes$Bytes$Decode$unsignedInt8);
		});
	return A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2($elm$bytes$Bytes$Decode$decode, decoder, bytes));
};
var $elm_cardano$bech32$Bech32$Internal$polymodStep = function (pre) {
	var b = pre >> 25;
	var step = F2(
		function (n, magicNumber) {
			return $elm$core$Bitwise$xor((-((b >> n) & 1)) & magicNumber);
		});
	return A3(
		step,
		4,
		705979059,
		A3(
			step,
			3,
			1027748829,
			A3(
				step,
				2,
				513874426,
				A3(
					step,
					1,
					642813549,
					A3(step, 0, 996825010, (pre & 33554431) << 5)))));
};
var $elm_cardano$bech32$Bech32$Internal$checksum = function (prefix) {
	return A2(
		$elm$core$Result$map,
		function (chk0) {
			return A3(
				$elm$core$String$foldl,
				F2(
					function (c, chk) {
						return $elm_cardano$bech32$Bech32$Internal$polymodStep(chk) ^ ($elm$core$Char$toCode(c) & 31);
					}),
				$elm_cardano$bech32$Bech32$Internal$polymodStep(chk0),
				prefix);
		},
		A3(
			$elm$core$String$foldl,
			function (c) {
				return $elm$core$Result$andThen(
					function (chk) {
						var i = $elm$core$Char$toCode(c);
						return ((i < 33) || (i > 126)) ? $elm$core$Result$Err(c) : $elm$core$Result$Ok(
							$elm_cardano$bech32$Bech32$Internal$polymodStep(chk) ^ (i >> 5));
					});
			},
			$elm$core$Result$Ok(1),
			prefix));
};
var $elm_cardano$bech32$Bech32$Internal$alphabet = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm_cardano$bech32$Bech32$Encode$alphabet = $elm$core$Array$fromList(
	$elm$core$String$toList($elm_cardano$bech32$Bech32$Internal$alphabet));
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm_cardano$bech32$Bech32$Encode$unsafeCharFrom = function (i) {
	return A2(
		$elm$core$Maybe$withDefault,
		'!impossible!',
		A2(
			$elm$core$Maybe$map,
			$elm$core$String$fromChar,
			A2($elm$core$Array$get, i, $elm_cardano$bech32$Bech32$Encode$alphabet)));
};
var $elm_cardano$bech32$Bech32$Encode$suffix = function (chk0) {
	var chk = 1 ^ A3(
		$elm$core$List$foldl,
		function (_v0) {
			return $elm_cardano$bech32$Bech32$Internal$polymodStep;
		},
		chk0,
		A2($elm$core$List$range, 0, 5));
	return A3(
		$elm$core$List$foldl,
		F2(
			function (k, str) {
				var i = 31 & (chk >> ((5 - k) * 5));
				return A2(
					$elm$core$String$append,
					str,
					$elm_cardano$bech32$Bech32$Encode$unsafeCharFrom(i));
			}),
		'',
		A2($elm$core$List$range, 0, 5));
};
var $elm_cardano$bech32$Bech32$Encode$encode = function (_v0) {
	var prefix = _v0.prefix;
	var data = _v0.data;
	return ($elm$core$String$length(prefix) < 1) ? $elm$core$Result$Err(
		$elm_cardano$bech32$Bech32$Encode$PrefixTooShort(
			{currentLength: 0, minimum: 1})) : A2(
		$elm$core$Result$map,
		function (_v2) {
			var str = _v2.a;
			var chk = _v2.b;
			return _Utils_ap(
				str,
				$elm_cardano$bech32$Bech32$Encode$suffix(chk));
		},
		A2(
			$elm$core$Result$map,
			function (chk0) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (word, _v1) {
							var str = _v1.a;
							var chk = _v1.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$String$append,
									str,
									$elm_cardano$bech32$Bech32$Encode$unsafeCharFrom(word)),
								$elm_cardano$bech32$Bech32$Internal$polymodStep(chk) ^ word);
						}),
					_Utils_Tuple2(
						A2($elm$core$String$append, prefix, '1'),
						chk0),
					$elm_cardano$bech32$Bech32$Internal$bytesToWords(data));
			},
			A2(
				$elm$core$Result$mapError,
				function (c) {
					return $elm_cardano$bech32$Bech32$Encode$UnexpectedCharacterInPrefix(
						{culprit: c});
				},
				$elm_cardano$bech32$Bech32$Internal$checksum(
					$elm$core$String$toLower(prefix)))));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Cardano$Gov$idToBech32 = function (id) {
	switch (id.$) {
		case 'CcHotCredId':
			if (id.a.$ === 'VKeyHash') {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'cc_hot',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										2,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'cc_hot'
						}));
			} else {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'cc_hot',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										3,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'cc_hot'
						}));
			}
		case 'CcColdCredId':
			if (id.a.$ === 'VKeyHash') {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'cc_cold',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										18,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'cc_cold'
						}));
			} else {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'cc_cold',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										19,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'cc_cold'
						}));
			}
		case 'DrepId':
			if (id.a.$ === 'VKeyHash') {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'drep',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										34,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'drep'
						}));
			} else {
				var bytes = id.a.a;
				return A2(
					$elm$core$Result$withDefault,
					'drep',
					$elm_cardano$bech32$Bech32$Encode$encode(
						{
							data: $author$project$Bytes$Comparable$toBytes(
								$author$project$Bytes$Comparable$fromU8(
									A2(
										$elm$core$List$cons,
										35,
										$author$project$Bytes$Comparable$toU8(bytes)))),
							prefix: 'drep'
						}));
			}
		case 'PoolId':
			var poolId = id.a;
			return A2(
				$elm$core$Result$withDefault,
				'pool',
				$elm_cardano$bech32$Bech32$Encode$encode(
					{
						data: $author$project$Bytes$Comparable$toBytes(poolId),
						prefix: 'pool'
					}));
		default:
			var actionId = id.a;
			return A2(
				$elm$core$Result$withDefault,
				'gov_action',
				$elm_cardano$bech32$Bech32$Encode$encode(
					{
						data: $author$project$Bytes$Comparable$toBytes(
							$author$project$Bytes$Comparable$fromU8(
								_Utils_ap(
									$author$project$Bytes$Comparable$toU8(actionId.transactionId),
									_List_fromArray(
										[actionId.govActionIndex])))),
						prefix: 'gov_action'
					}));
	}
};
var $author$project$Cardano$Witness$toCredential = function (cred) {
	if (cred.$ === 'WithKey') {
		var hash = cred.a;
		return $author$project$Cardano$Address$VKeyHash(hash);
	} else {
		var hash = cred.a;
		return $author$project$Cardano$Address$ScriptHash(hash);
	}
};
var $author$project$Cardano$Witness$toVoter = function (voter) {
	switch (voter.$) {
		case 'WithCommitteeHotCred':
			var cred = voter.a;
			return $author$project$Cardano$Gov$VoterCommitteeHotCred(
				$author$project$Cardano$Witness$toCredential(cred));
		case 'WithDrepCred':
			var cred = voter.a;
			return $author$project$Cardano$Gov$VoterDrepCred(
				$author$project$Cardano$Witness$toCredential(cred));
		default:
			var hash = voter.a;
			return $author$project$Cardano$Gov$VoterPoolId(hash);
	}
};
var $author$project$Cardano$Gov$CcHotCredId = function (a) {
	return {$: 'CcHotCredId', a: a};
};
var $author$project$Cardano$Gov$DrepId = function (a) {
	return {$: 'DrepId', a: a};
};
var $author$project$Cardano$Gov$PoolId = function (a) {
	return {$: 'PoolId', a: a};
};
var $author$project$Cardano$Gov$voterToId = function (voter) {
	switch (voter.$) {
		case 'VoterCommitteeHotCred':
			var cred = voter.a;
			return $author$project$Cardano$Gov$CcHotCredId(cred);
		case 'VoterDrepCred':
			var cred = voter.a;
			return $author$project$Cardano$Gov$DrepId(cred);
		default:
			var poolId = voter.a;
			return $author$project$Cardano$Gov$PoolId(poolId);
	}
};
var $author$project$Cardano$TxIntent$voterWitnessToBech32 = function (voterWitness) {
	return $author$project$Cardano$Gov$idToBech32(
		$author$project$Cardano$Gov$voterToId(
			$author$project$Cardano$Witness$toVoter(voterWitness)));
};
var $author$project$Cardano$TxIntent$checkVoter = F2(
	function (localStateUtxos, _v0) {
		var voterWitness = _v0.a;
		var votes = _v0.b;
		if ($elm$core$List$isEmpty(votes)) {
			return $elm$core$Result$Err(
				$author$project$Cardano$TxIntent$EmptyVotes(
					{
						voter: $author$project$Cardano$TxIntent$voterWitnessToBech32(voterWitness)
					}));
		} else {
			_v1$2:
			while (true) {
				switch (voterWitness.$) {
					case 'WithCommitteeHotCred':
						if (voterWitness.a.$ === 'WithScript') {
							var _v2 = voterWitness.a;
							var hash = _v2.a;
							var scriptWitness = _v2.b;
							return A2(
								$elm$core$Result$mapError,
								$author$project$Cardano$TxIntent$WitnessError,
								A3($author$project$Cardano$Witness$checkScript, localStateUtxos, hash, scriptWitness));
						} else {
							break _v1$2;
						}
					case 'WithDrepCred':
						if (voterWitness.a.$ === 'WithScript') {
							var _v3 = voterWitness.a;
							var hash = _v3.a;
							var scriptWitness = _v3.b;
							return A2(
								$elm$core$Result$mapError,
								$author$project$Cardano$TxIntent$WitnessError,
								A3($author$project$Cardano$Witness$checkScript, localStateUtxos, hash, scriptWitness));
						} else {
							break _v1$2;
						}
					default:
						break _v1$2;
				}
			}
			return $elm$core$Result$Ok(_Utils_Tuple0);
		}
	});
var $author$project$Cardano$TxIntent$validateVotes = F2(
	function (localStateUtxos, votes) {
		var voterIds = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $author$project$Cardano$TxIntent$voterWitnessToBech32),
			votes);
		var duplicateVoters = A2(
			$elm$core$List$map,
			function (v) {
				return {voter: v};
			},
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2(
					$elm$core$List$filter,
					function (_v1) {
						var freq = _v1.b;
						return freq > 1;
					},
					$elm_community$list_extra$List$Extra$frequencies(voterIds))));
		return (!$elm$core$List$isEmpty(duplicateVoters)) ? $elm$core$Result$Err(
			$author$project$Cardano$TxIntent$DuplicateVoters(duplicateVoters)) : A2(
			$elm$core$Result$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$map,
					$author$project$Cardano$TxIntent$checkVoter(localStateUtxos),
					votes)));
	});
var $author$project$Cardano$TxIntent$InvalidStakeAddress = F2(
	function (a, b) {
		return {$: 'InvalidStakeAddress', a: a, b: b};
	});
var $author$project$Cardano$TxIntent$checkWithdrawal = F2(
	function (localStateUtxos, _v0) {
		var stakeAddress = _v0.a;
		var maybeWitness = _v0.b;
		var _v1 = _Utils_Tuple2(stakeAddress.stakeCredential, maybeWitness);
		if (_v1.a.$ === 'VKeyHash') {
			if (_v1.b.$ === 'Nothing') {
				var _v2 = _v1.b;
				return $elm$core$Result$Ok(_Utils_Tuple0);
			} else {
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidStakeAddress, stakeAddress, 'You are providing a script witness, but this stake address is for a public key withdrawal, not a script'));
			}
		} else {
			if (_v1.b.$ === 'Just') {
				if (_v1.b.a.$ === 'Native') {
					var scriptHash = _v1.a.a;
					var nativeScriptWitness = _v1.b.a.a;
					return A2(
						$elm$core$Result$mapError,
						$author$project$Cardano$TxIntent$WitnessError,
						A3($author$project$Cardano$Witness$checkNativeScript, localStateUtxos, scriptHash, nativeScriptWitness));
				} else {
					var scriptHash = _v1.a.a;
					var plutusScriptWitness = _v1.b.a.a;
					return A2(
						$elm$core$Result$mapError,
						$author$project$Cardano$TxIntent$WitnessError,
						A3($author$project$Cardano$Witness$checkPlutusScript, localStateUtxos, scriptHash, plutusScriptWitness));
				}
			} else {
				var _v3 = _v1.b;
				return $elm$core$Result$Err(
					A2($author$project$Cardano$TxIntent$InvalidStakeAddress, stakeAddress, 'This stake address is for a script, but you didn’t provide a script witness for the withdrawal'));
			}
		}
	});
var $author$project$Cardano$TxIntent$validateWithdrawals = F2(
	function (localStateUtxos, withdrawals) {
		return A2(
			$elm$core$Result$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$map,
					$author$project$Cardano$TxIntent$checkWithdrawal(localStateUtxos),
					withdrawals)));
	});
var $author$project$Cardano$Gov$voterLedgerOrder = function (voter) {
	switch (voter.$) {
		case 'VoterCommitteeHotCred':
			if (voter.a.$ === 'ScriptHash') {
				var hash = voter.a.a;
				return _Utils_Tuple2(
					0,
					$author$project$Bytes$Comparable$toHex(hash));
			} else {
				var hash = voter.a.a;
				return _Utils_Tuple2(
					1,
					$author$project$Bytes$Comparable$toHex(hash));
			}
		case 'VoterDrepCred':
			if (voter.a.$ === 'ScriptHash') {
				var hash = voter.a.a;
				return _Utils_Tuple2(
					2,
					$author$project$Bytes$Comparable$toHex(hash));
			} else {
				var hash = voter.a.a;
				return _Utils_Tuple2(
					3,
					$author$project$Bytes$Comparable$toHex(hash));
			}
		default:
			var hash = voter.a;
			return _Utils_Tuple2(
				4,
				$author$project$Bytes$Comparable$toHex(hash));
	}
};
var $author$project$Cardano$Gov$voterDictFromList = function (voters) {
	return A2($turboMaCk$any_dict$Dict$Any$fromList, $author$project$Cardano$Gov$voterLedgerOrder, voters);
};
var $author$project$Cardano$TxIntent$processBalanced = F4(
	function (govState, localStateUtxos, txIntents, _v0) {
		var preProcessedIntents = _v0.preProcessedIntents;
		var preSelected = _v0.preSelected;
		var preCreated = _v0.preCreated;
		var totalMintedAndBurned = A2(
			$author$project$Cardano$MultiAsset$normalize,
			$dwayne$elm_integer$Integer$isZero,
			A3(
				$elm$core$List$foldl,
				$author$project$Cardano$MultiAsset$mintAdd,
				$author$project$Cardano$MultiAsset$empty,
				A2(
					$elm$core$List$map,
					function (m) {
						return A2($author$project$Bytes$Map$singleton, m.policyId, m.assets);
					},
					preProcessedIntents.mints)));
		var guaranteedUtxos = $author$project$Cardano$Utxo$refDictFromList(
			A2(
				$elm$core$List$filterMap,
				function (ref) {
					return A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$pair(ref),
						A2($turboMaCk$any_dict$Dict$Any$get, ref, localStateUtxos));
				},
				preProcessedIntents.guaranteedUtxos));
		var distributeIntent = F2(
			function (txIntent, _v12) {
				var _v13 = _v12.a;
				var spendingsAcc = _v13.a;
				var mintsAcc = _v13.b;
				var _v14 = _v12.b;
				var withdrawalsAcc = _v14.a;
				var votesAcc = _v14.b;
				switch (txIntent.$) {
					case 'Spend':
						var source = txIntent.a;
						return _Utils_Tuple2(
							_Utils_Tuple2(
								A2($elm$core$List$cons, source, spendingsAcc),
								mintsAcc),
							_Utils_Tuple2(withdrawalsAcc, votesAcc));
					case 'MintBurn':
						var mint = txIntent.a;
						return _Utils_Tuple2(
							_Utils_Tuple2(
								spendingsAcc,
								A2($elm$core$List$cons, mint, mintsAcc)),
							_Utils_Tuple2(withdrawalsAcc, votesAcc));
					case 'WithdrawRewards':
						var stakeCredential = txIntent.a.stakeCredential;
						var scriptWitness = txIntent.a.scriptWitness;
						return _Utils_Tuple2(
							_Utils_Tuple2(spendingsAcc, mintsAcc),
							_Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(stakeCredential, scriptWitness),
									withdrawalsAcc),
								votesAcc));
					case 'Vote':
						var voter = txIntent.a;
						var votes = txIntent.b;
						return _Utils_Tuple2(
							_Utils_Tuple2(spendingsAcc, mintsAcc),
							_Utils_Tuple2(
								withdrawalsAcc,
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(voter, votes),
									votesAcc)));
					default:
						return _Utils_Tuple2(
							_Utils_Tuple2(spendingsAcc, mintsAcc),
							_Utils_Tuple2(withdrawalsAcc, votesAcc));
				}
			});
		var _v1 = A3(
			$elm$core$List$foldr,
			distributeIntent,
			_Utils_Tuple2(
				_Utils_Tuple2(_List_Nil, _List_Nil),
				_Utils_Tuple2(_List_Nil, _List_Nil)),
			txIntents);
		var _v2 = _v1.a;
		var spendings = _v2.a;
		var mints = _v2.b;
		var _v3 = _v1.b;
		var withdrawals = _v3.a;
		var allVotes = _v3.b;
		return A2(
			$elm$core$Result$map,
			function (allPlutusScriptSources) {
				var requiredSigners = $author$project$Bytes$Map$keys(
					$author$project$Bytes$Map$fromList(
						A2(
							$elm$core$List$map,
							function (signer) {
								return _Utils_Tuple2(signer, _Utils_Tuple0);
							},
							$elm$core$List$concat(preProcessedIntents.requiredSigners))));
				var expectedSigners = $author$project$Bytes$Map$keys(
					$author$project$Bytes$Map$fromList(
						A2(
							$elm$core$List$map,
							function (signer) {
								return _Utils_Tuple2(signer, _Utils_Tuple0);
							},
							$elm$core$List$concat(preProcessedIntents.expectedSigners))));
				return {
					certificates: preProcessedIntents.certificates,
					datumSources: A2(
						$elm_community$list_extra$List$Extra$uniqueBy,
						$author$project$Cardano$Witness$toHex($author$project$Cardano$Data$toCbor),
						preProcessedIntents.datumSources),
					expectedSigners: expectedSigners,
					freeInputs: preProcessedIntents.freeInputs,
					freeOutputs: preProcessedIntents.freeOutputs,
					guaranteedUtxos: guaranteedUtxos,
					mintRedeemers: $author$project$Bytes$Map$fromList(
						A2(
							$elm$core$List$map,
							function (m) {
								return _Utils_Tuple2(m.policyId, m.redeemer);
							},
							preProcessedIntents.mints)),
					nativeScriptSources: A2(
						$elm_community$list_extra$List$Extra$uniqueBy,
						$author$project$Cardano$Witness$toHex($author$project$Cardano$Script$encodeNativeScript),
						preProcessedIntents.nativeScriptSources),
					plutusScriptSources: A2(
						$elm_community$list_extra$List$Extra$uniqueBy,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							$author$project$Cardano$Witness$toHex($author$project$Bytes$Comparable$toCbor)),
						allPlutusScriptSources),
					preCreated: preCreated,
					preSelected: preSelected,
					proposals: A2(
						$elm$core$List$map,
						function (_v9) {
							var govAction = _v9.govAction;
							var offchainInfo = _v9.offchainInfo;
							var deposit = _v9.deposit;
							var depositReturnAccount = _v9.depositReturnAccount;
							return _Utils_Tuple2(
								{
									anchor: offchainInfo,
									deposit: deposit,
									depositReturnAccount: depositReturnAccount,
									govAction: A2($author$project$Cardano$TxIntent$actionFromIntent, govState, govAction)
								},
								$author$project$Cardano$TxIntent$proposalRedeemer(govAction));
						},
						preProcessedIntents.proposalIntents),
					requiredSigners: requiredSigners,
					totalMinted: totalMintedAndBurned,
					votes: $author$project$Cardano$Gov$voterDictFromList(
						A2(
							$elm$core$List$map,
							function (_v10) {
								var voter = _v10.voter;
								var votes = _v10.votes;
								var redeemer = _v10.redeemer;
								return _Utils_Tuple2(
									voter,
									{redeemer: redeemer, votes: votes});
							},
							preProcessedIntents.votes)),
					withdrawals: $author$project$Cardano$Address$stakeDictFromList(
						A2(
							$elm$core$List$map,
							function (w) {
								return _Utils_Tuple2(
									w.stakeAddress,
									{amount: w.amount, redeemer: w.redeemer});
							},
							preProcessedIntents.withdrawals))
				};
			},
			A2(
				$elm$core$Result$andThen,
				function (_v8) {
					return A3($author$project$Cardano$TxIntent$validateGuardrails, localStateUtxos, govState, preProcessedIntents);
				},
				A2(
					$elm$core$Result$andThen,
					function (_v7) {
						return A2($author$project$Cardano$TxIntent$validateVotes, localStateUtxos, allVotes);
					},
					A2(
						$elm$core$Result$andThen,
						function (_v6) {
							return A2($author$project$Cardano$TxIntent$validateWithdrawals, localStateUtxos, withdrawals);
						},
						A2(
							$elm$core$Result$andThen,
							function (_v5) {
								return A2($author$project$Cardano$TxIntent$validateMints, localStateUtxos, mints);
							},
							A2(
								$elm$core$Result$andThen,
								function (_v4) {
									return A2($author$project$Cardano$TxIntent$validateSpentOutputs, localStateUtxos, spendings);
								},
								A2(
									$elm$core$Result$mapError,
									$author$project$Cardano$TxIntent$NotEnoughMinAda,
									$author$project$Cardano$TxIntent$validMinAdaPerOutput(
										preCreated($author$project$Cardano$TxContext$new).outputs))))))));
	});
var $author$project$Cardano$TxIntent$processIntents = F3(
	function (govState, localStateUtxos, txIntents) {
		return A2(
			$elm$core$Result$andThen,
			A3($author$project$Cardano$TxIntent$processBalanced, govState, localStateUtxos, txIntents),
			A2($author$project$Cardano$TxIntent$checkBalance, localStateUtxos, txIntents));
	});
var $author$project$Cardano$TxIntent$DuplicatedMetadataTags = function (a) {
	return {$: 'DuplicatedMetadataTags', a: a};
};
var $author$project$Cardano$TxIntent$IncorrectTimeValidityRange = function (a) {
	return {$: 'IncorrectTimeValidityRange', a: a};
};
var $author$project$Cardano$TxIntent$noInfo = {metadata: _List_Nil, referenceInputs: _List_Nil, timeValidityRange: $elm$core$Maybe$Nothing};
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Cardano$TxIntent$processOtherInfo = function (otherInfo) {
	var processedOtherInfo = A3(
		$elm$core$List$foldl,
		F2(
			function (info, acc) {
				switch (info.$) {
					case 'TxReferenceInput':
						var ref = info.a;
						return _Utils_update(
							acc,
							{
								referenceInputs: A2($elm$core$List$cons, ref, acc.referenceInputs)
							});
					case 'TxMetadata':
						var m = info.a;
						return _Utils_update(
							acc,
							{
								metadata: A2($elm$core$List$cons, m, acc.metadata)
							});
					default:
						var newVR = info.a;
						var start = newVR.start;
						var end = newVR.end;
						return _Utils_update(
							acc,
							{
								timeValidityRange: function () {
									var _v3 = acc.timeValidityRange;
									if (_v3.$ === 'Nothing') {
										return $elm$core$Maybe$Just(newVR);
									} else {
										var vr = _v3.a;
										return $elm$core$Maybe$Just(
											{
												end: A2($dwayne$elm_natural$Natural$min, end, vr.end),
												start: A2($elm$core$Basics$max, start, vr.start)
											});
									}
								}()
							});
				}
			}),
		$author$project$Cardano$TxIntent$noInfo,
		otherInfo);
	var validTimeRange = function () {
		var _v1 = processedOtherInfo.timeValidityRange;
		if (_v1.$ === 'Nothing') {
			return true;
		} else {
			var range = _v1.a;
			return A2(
				$dwayne$elm_natural$Natural$isLessThan,
				range.end,
				$dwayne$elm_natural$Natural$fromSafeInt(range.start));
		}
	}();
	var metadataTags = A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.tag;
			},
			$dwayne$elm_natural$Natural$toInt),
		processedOtherInfo.metadata);
	var hasDuplicatedMetadataTags = !_Utils_eq(
		$elm$core$List$length(metadataTags),
		$elm$core$Set$size(
			$elm$core$Set$fromList(metadataTags)));
	if (hasDuplicatedMetadataTags) {
		var findDuplicate = F2(
			function (current, tags) {
				findDuplicate:
				while (true) {
					if (!tags.b) {
						return $elm$core$Maybe$Nothing;
					} else {
						var t = tags.a;
						var biggerTags = tags.b;
						if (_Utils_eq(t, current)) {
							return $elm$core$Maybe$Just(t);
						} else {
							var $temp$current = t,
								$temp$tags = biggerTags;
							current = $temp$current;
							tags = $temp$tags;
							continue findDuplicate;
						}
					}
				}
			});
		var dupTag = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2(
				findDuplicate,
				-1,
				$elm$core$List$sort(metadataTags)));
		return $elm$core$Result$Err(
			$author$project$Cardano$TxIntent$DuplicatedMetadataTags(dupTag));
	} else {
		if (!validTimeRange) {
			return $elm$core$Result$Err(
				$author$project$Cardano$TxIntent$IncorrectTimeValidityRange(
					'Invalid time range (or intersection of multiple time ranges). The time range end must be > than the start.' + $elm$core$Debug$toString(processedOtherInfo.timeValidityRange)));
		} else {
			return $elm$core$Result$Ok(processedOtherInfo);
		}
	}
};
var $author$project$Cardano$AuxiliaryData$hash = function (data) {
	return $author$project$Bytes$Comparable$blake2b256(
		$author$project$Bytes$Comparable$fromBytes(
			$elm_toulouse$cbor$Cbor$Encode$encode(
				$author$project$Cardano$AuxiliaryData$toCbor(data))));
};
var $author$project$Cardano$TxIntent$replaceDummyAuxiliaryDataHash = function (tx) {
	var body = tx.body;
	var auxiliaryData = tx.auxiliaryData;
	return _Utils_update(
		tx,
		{
			body: _Utils_update(
				body,
				{
					auxiliaryDataHash: A2($elm$core$Maybe$map, $author$project$Cardano$AuxiliaryData$hash, auxiliaryData)
				})
		});
};
var $author$project$Cardano$Transaction$hashScriptData = F2(
	function (costModels, tx) {
		var datumsHex = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Encode$list($author$project$Cardano$Data$toCborUplc),
					A2(
						$elm$core$Basics$composeR,
						$elm_toulouse$cbor$Cbor$Encode$encode,
						A2($elm$core$Basics$composeR, $author$project$Bytes$Comparable$fromBytes, $author$project$Bytes$Comparable$toHex))),
				tx.witnessSet.plutusData));
		var _v0 = tx.witnessSet.redeemer;
		if (_v0.$ === 'Nothing') {
			return $author$project$Bytes$Comparable$blake2b256(
				$author$project$Bytes$Comparable$fromHexUnchecked('80' + (datumsHex + 'a0')));
		} else {
			var redeemers = _v0.a;
			var redeemersHex = $author$project$Bytes$Comparable$toHex(
				$author$project$Bytes$Comparable$fromBytes(
					$elm_toulouse$cbor$Cbor$Encode$encode(
						$author$project$Cardano$Transaction$encodeRedeemersAsMap(redeemers))));
			var languageViewsEncoder = A2(
				$elm_toulouse$cbor$Cbor$Encode$record,
				$elm$core$Basics$identity,
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Encode$fields,
					A2(
						$elm$core$Basics$composeR,
						A3(
							$elm_toulouse$cbor$Cbor$Encode$optionalField,
							$elm_toulouse$cbor$Cbor$Encode$int(1),
							$elm$core$Basics$identity,
							function ($) {
								return $.v2;
							}),
						A2(
							$elm$core$Basics$composeR,
							A3(
								$elm_toulouse$cbor$Cbor$Encode$optionalField,
								$elm_toulouse$cbor$Cbor$Encode$int(2),
								$elm$core$Basics$identity,
								function ($) {
									return $.v3;
								}),
							A3(
								$elm_toulouse$cbor$Cbor$Encode$optionalField,
								$elm_toulouse$cbor$Cbor$Encode$bytes(
									$author$project$Bytes$Comparable$toBytes(
										$author$project$Bytes$Comparable$fromHexUnchecked('00'))),
								$elm$core$Basics$identity,
								function ($) {
									return $.v1;
								})))));
			var languageViews = {
				v1: A2(
					$elm$core$Maybe$map,
					$author$project$Cbor$Encode$Extra$indefiniteList($elm_toulouse$cbor$Cbor$Encode$int),
					costModels.plutusV1),
				v2: A2(
					$elm$core$Maybe$map,
					$elm_toulouse$cbor$Cbor$Encode$list($elm_toulouse$cbor$Cbor$Encode$int),
					costModels.plutusV2),
				v3: A2(
					$elm$core$Maybe$map,
					$elm_toulouse$cbor$Cbor$Encode$list($elm_toulouse$cbor$Cbor$Encode$int),
					costModels.plutusV3)
			};
			var languageViewsHex = $author$project$Bytes$Comparable$toHex(
				$author$project$Bytes$Comparable$fromBytes(
					$elm_toulouse$cbor$Cbor$Encode$encode(
						languageViewsEncoder(languageViews))));
			return $author$project$Bytes$Comparable$blake2b256(
				$author$project$Bytes$Comparable$fromHexUnchecked(
					_Utils_ap(
						redeemersHex,
						_Utils_ap(datumsHex, languageViewsHex))));
		}
	});
var $author$project$Cardano$TxIntent$replaceDummyScriptDataHash = F3(
	function (costModels, intents, tx) {
		var body = tx.body;
		var activeCostModels = {
			plutusV1: A2(
				$elm$core$List$any,
				function (_v1) {
					var v = _v1.a;
					return _Utils_eq(v, $author$project$Cardano$Script$PlutusV1);
				},
				intents.plutusScriptSources) ? costModels.plutusV1 : $elm$core$Maybe$Nothing,
			plutusV2: A2(
				$elm$core$List$any,
				function (_v2) {
					var v = _v2.a;
					return _Utils_eq(v, $author$project$Cardano$Script$PlutusV2);
				},
				intents.plutusScriptSources) ? costModels.plutusV2 : $elm$core$Maybe$Nothing,
			plutusV3: A2(
				$elm$core$List$any,
				function (_v3) {
					var v = _v3.a;
					return _Utils_eq(v, $author$project$Cardano$Script$PlutusV3);
				},
				intents.plutusScriptSources) ? costModels.plutusV3 : $elm$core$Maybe$Nothing
		};
		return _Utils_update(
			tx,
			{
				body: _Utils_update(
					body,
					{
						scriptDataHash: A2(
							$elm$core$Maybe$map,
							function (_v0) {
								return A2($author$project$Cardano$Transaction$hashScriptData, activeCostModels, tx);
							},
							body.scriptDataHash)
					})
			});
	});
var $author$project$Cardano$TxContext$updateInputsOutputs = F3(
	function (_v0, _v1, old) {
		var preSelectedInputs = _v0.preSelectedInputs;
		var preCreatedOutputs = _v0.preCreatedOutputs;
		var selectedUtxos = _v1.selectedUtxos;
		var changeOutputs = _v1.changeOutputs;
		return _Utils_update(
			old,
			{
				inputs: $turboMaCk$any_dict$Dict$Any$toList(
					A2($turboMaCk$any_dict$Dict$Any$union, preSelectedInputs, selectedUtxos)),
				outputs: _Utils_ap(
					preCreatedOutputs(old).outputs,
					changeOutputs)
			});
	});
var $author$project$Cardano$Transaction$updateSignatures = F2(
	function (f, tx) {
		var witnessSet = tx.witnessSet;
		return _Utils_update(
			tx,
			{
				witnessSet: _Utils_update(
					witnessSet,
					{
						vkeywitness: f(witnessSet.vkeywitness)
					})
			});
	});
var $author$project$Cardano$TxIntent$finalizeAdvanced = F4(
	function (_v0, fee, txOtherInfo, txIntents) {
		var govState = _v0.govState;
		var localStateUtxos = _v0.localStateUtxos;
		var coinSelectionAlgo = _v0.coinSelectionAlgo;
		var evalScriptsCosts = _v0.evalScriptsCosts;
		var costModels = _v0.costModels;
		var _v1 = _Utils_Tuple2(
			A3($author$project$Cardano$TxIntent$processIntents, govState, localStateUtxos, txIntents),
			$author$project$Cardano$TxIntent$processOtherInfo(txOtherInfo));
		if (_v1.a.$ === 'Err') {
			var err = _v1.a.a;
			return $elm$core$Result$Err(err);
		} else {
			if (_v1.b.$ === 'Err') {
				var err = _v1.b.a;
				return $elm$core$Result$Err(err);
			} else {
				var processedIntents = _v1.a.a;
				var processedOtherInfo = _v1.b.a;
				var computeRefScriptBytesForTx = function (tx) {
					return A2(
						$author$project$Cardano$TxIntent$computeRefScriptBytes,
						localStateUtxos,
						_Utils_ap(tx.body.referenceInputs, tx.body.inputs));
				};
				var buildTxRound = F2(
					function (txContext, roundFees) {
						var insertOneSelection = F3(
							function (_v15, _v16, acc) {
								var selectedUtxos = _v16.selectedUtxos;
								var changeOutputs = _v16.changeOutputs;
								return {
									changeOutputs: _Utils_ap(changeOutputs, acc.changeOutputs),
									selectedUtxos: A3(
										$elm$core$List$foldl,
										function (_v14) {
											var ref = _v14.a;
											var output = _v14.b;
											return A2($turboMaCk$any_dict$Dict$Any$insert, ref, output);
										},
										acc.selectedUtxos,
										selectedUtxos)
								};
							});
						var updateTxContext = function (coinSelections) {
							return A3(
								$author$project$Cardano$TxContext$updateInputsOutputs,
								{
									preCreatedOutputs: processedIntents.preCreated,
									preSelectedInputs: A2(
										$turboMaCk$any_dict$Dict$Any$filterMap,
										F2(
											function (ref, _v13) {
												return A2($turboMaCk$any_dict$Dict$Any$get, ref, localStateUtxos);
											}),
										processedIntents.preSelected.inputs)
								},
								A3(
									$turboMaCk$any_dict$Dict$Any$foldl,
									insertOneSelection,
									{changeOutputs: _List_Nil, selectedUtxos: $author$project$Cardano$Utxo$emptyRefDict},
									coinSelections),
								txContext);
						};
						var _v8 = function () {
							if (roundFees.$ === 'ManualFee') {
								var perAddressFee = roundFees.a;
								return _Utils_Tuple2(
									A3(
										$elm$core$List$foldl,
										function (_v10) {
											var exactFeeAmount = _v10.exactFeeAmount;
											return $dwayne$elm_natural$Natural$add(exactFeeAmount);
										},
										$dwayne$elm_natural$Natural$zero,
										perAddressFee),
									A2(
										$elm$core$List$map,
										function ($) {
											return $.paymentSource;
										},
										perAddressFee));
							} else {
								var paymentSource = roundFees.a.paymentSource;
								return _Utils_Tuple2(
									$author$project$Cardano$TxIntent$defaultAutoFee,
									_List_fromArray(
										[paymentSource]));
							}
						}();
						var feeAmount = _v8.a;
						var feeAddresses = _v8.b;
						var _v11 = $elm$core$List$isEmpty(processedIntents.plutusScriptSources) ? _Utils_Tuple2($dwayne$elm_natural$Natural$zero, $author$project$Cardano$Address$emptyDict) : _Utils_Tuple2(
							function (_v12) {
								var q = _v12.a;
								var r = _v12.b;
								return A2(
									$dwayne$elm_natural$Natural$add,
									q,
									A2($dwayne$elm_natural$Natural$min, r, $dwayne$elm_natural$Natural$one));
							}(
								A2(
									$elm$core$Maybe$withDefault,
									_Utils_Tuple2($dwayne$elm_natural$Natural$zero, $dwayne$elm_natural$Natural$zero),
									A2(
										$dwayne$elm_natural$Natural$divModBy,
										$dwayne$elm_natural$Natural$fromSafeInt(10),
										A2(
											$dwayne$elm_natural$Natural$mul,
											$dwayne$elm_natural$Natural$fromSafeInt(15),
											feeAmount)))),
							$author$project$Cardano$Address$dictFromList(
								A2(
									$elm$core$List$map,
									function (addr) {
										return _Utils_Tuple2(addr, _Utils_Tuple0);
									},
									A2(
										$elm$core$List$filter,
										$author$project$Cardano$Address$isShelleyWallet,
										$elm$core$List$concat(
											_List_fromArray(
												[
													feeAddresses,
													$turboMaCk$any_dict$Dict$Any$keys(processedIntents.freeInputs),
													A2(
													$elm$core$List$filterMap,
													function (addr) {
														return A2(
															$elm$core$Maybe$map,
															function ($) {
																return $.address;
															},
															A2($turboMaCk$any_dict$Dict$Any$get, addr, localStateUtxos));
													},
													$turboMaCk$any_dict$Dict$Any$keys(processedIntents.preSelected.inputs))
												]))))));
						var collateralAmount = _v11.a;
						var collateralSources = _v11.b;
						return A3(
							$elm$core$Result$map2,
							F2(
								function (coinSelection, collateralSelection) {
									return A5(
										$author$project$Cardano$TxIntent$buildTx,
										feeAmount,
										collateralSelection,
										processedIntents,
										processedOtherInfo,
										updateTxContext(coinSelection));
								}),
							A4($author$project$Cardano$TxIntent$computeCoinSelection, localStateUtxos, roundFees, processedIntents, coinSelectionAlgo),
							A2(
								$elm$core$Result$mapError,
								$author$project$Cardano$TxIntent$CollateralSelectionError,
								$author$project$Cardano$CoinSelection$collateral(
									A3(
										$author$project$Cardano$CoinSelection$CollateralContext,
										$turboMaCk$any_dict$Dict$Any$toList(localStateUtxos),
										collateralSources,
										collateralAmount))));
					});
				var adjustFees = function (tx) {
					if (fee.$ === 'ManualFee') {
						return fee;
					} else {
						var paymentSource = fee.a.paymentSource;
						var refScriptBytes = computeRefScriptBytesForTx(tx);
						return function (computedFee) {
							return $author$project$Cardano$TxIntent$ManualFee(
								_List_fromArray(
									[
										{exactFeeAmount: computedFee, paymentSource: paymentSource}
									]));
						}(
							function (_v7) {
								var txSizeFee = _v7.txSizeFee;
								var scriptExecFee = _v7.scriptExecFee;
								var refScriptSizeFee = _v7.refScriptSizeFee;
								return A2(
									$dwayne$elm_natural$Natural$add,
									refScriptSizeFee,
									A2($dwayne$elm_natural$Natural$add, txSizeFee, scriptExecFee));
							}(
								A3(
									$author$project$Cardano$Transaction$computeFees,
									$author$project$Cardano$Transaction$defaultTxFeeParams,
									{refScriptBytes: refScriptBytes},
									tx)));
					}
				};
				return A2(
					$elm$core$Result$andThen,
					function (_v5) {
						var tx = _v5.tx;
						var expectedSignatures = _v5.expectedSignatures;
						return A2(
							$elm$core$Result$map,
							function (finalTx) {
								return {
									expectedSignatures: expectedSignatures,
									tx: A2(
										$author$project$Cardano$Transaction$updateSignatures,
										$elm$core$Basics$always($elm$core$Maybe$Nothing),
										finalTx)
								};
							},
							A2(
								$elm$core$Result$andThen,
								function (finalTx) {
									return A3(
										$author$project$Cardano$TxIntent$checkInsufficientFee,
										{
											refScriptBytes: computeRefScriptBytesForTx(finalTx)
										},
										fee,
										finalTx);
								},
								A2(
									$elm$core$Result$map,
									A2($author$project$Cardano$TxIntent$replaceDummyScriptDataHash, costModels, processedIntents),
									A2(
										$elm$core$Result$map,
										$author$project$Cardano$TxIntent$replaceDummyAuxiliaryDataHash,
										$author$project$Cardano$TxIntent$adjustExecutionCosts(
											evalScriptsCosts(localStateUtxos))(tx)))));
					},
					A2(
						$elm$core$Result$andThen,
						function (tx) {
							return A2(
								buildTxRound,
								A2($author$project$Cardano$TxContext$fromTx, localStateUtxos, tx),
								adjustFees(tx));
						},
						A2(
							$elm$core$Result$andThen,
							function (_v4) {
								var tx = _v4.tx;
								return $author$project$Cardano$TxIntent$adjustExecutionCosts(
									evalScriptsCosts(localStateUtxos))(tx);
							},
							A2(
								$elm$core$Result$andThen,
								function (tx) {
									return A2(
										buildTxRound,
										A2($author$project$Cardano$TxContext$fromTx, localStateUtxos, tx),
										adjustFees(tx));
								},
								A2(
									$elm$core$Result$andThen,
									function (_v3) {
										var tx = _v3.tx;
										return $author$project$Cardano$TxIntent$adjustExecutionCosts(
											evalScriptsCosts(localStateUtxos))(tx);
									},
									A2(
										$elm$core$Result$andThen,
										function (_v2) {
											var tx = _v2.tx;
											return A2(
												buildTxRound,
												A2($author$project$Cardano$TxContext$fromTx, localStateUtxos, tx),
												adjustFees(tx));
										},
										A2(buildTxRound, $author$project$Cardano$TxContext$new, fee)))))));
			}
		}
	});
var $author$project$Cardano$TxIntent$UnableToGuessFeeSource = {$: 'UnableToGuessFeeSource'};
var $author$project$Cardano$TxIntent$guessFeeSource = function (txIntents) {
	var findSendTo = function (intents) {
		findSendTo:
		while (true) {
			if (!intents.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				if (intents.a.$ === 'SendTo') {
					var _v1 = intents.a;
					var address = _v1.a;
					return $elm$core$Maybe$Just(address);
				} else {
					var rest = intents.b;
					var $temp$intents = rest;
					intents = $temp$intents;
					continue findSendTo;
				}
			}
		}
	};
	var findFromAddress = function (intents) {
		findFromAddress:
		while (true) {
			if (!intents.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				if ((intents.a.$ === 'Spend') && (intents.a.a.$ === 'FromWallet')) {
					var address = intents.a.a.a.address;
					return $elm$core$Maybe$Just(address);
				} else {
					var rest = intents.b;
					var $temp$intents = rest;
					intents = $temp$intents;
					continue findFromAddress;
				}
			}
		}
	};
	var _v3 = findFromAddress(txIntents);
	if (_v3.$ === 'Just') {
		var address = _v3.a;
		return $elm$core$Result$Ok(address);
	} else {
		var _v4 = findSendTo(txIntents);
		if (_v4.$ === 'Just') {
			var address = _v4.a;
			return $elm$core$Result$Ok(address);
		} else {
			return $elm$core$Result$Err($author$project$Cardano$TxIntent$UnableToGuessFeeSource);
		}
	}
};
var $author$project$Cardano$Utxo$compareLovelace = F2(
	function (a, b) {
		return A2(
			$dwayne$elm_natural$Natural$compare,
			$author$project$Cardano$Utxo$lovelace(a),
			$author$project$Cardano$Utxo$lovelace(b));
	});
var $author$project$Cardano$Value$compare = F3(
	function (withToken, a, b) {
		return A2(
			$dwayne$elm_natural$Natural$compare,
			withToken(a),
			withToken(b));
	});
var $author$project$Bytes$Map$get = F2(
	function (k, _v0) {
		var m = _v0.a;
		return A2(
			$elm$core$Dict$get,
			$author$project$Bytes$Comparable$toHex(k),
			m);
	});
var $author$project$Cardano$MultiAsset$get = F3(
	function (policyId, name, multiAsset) {
		return A2(
			$elm$core$Maybe$andThen,
			$author$project$Bytes$Map$get(name),
			A2($author$project$Bytes$Map$get, policyId, multiAsset));
	});
var $author$project$Cardano$CoinSelection$reverseOrder = F3(
	function (f, x, y) {
		return A2(f, y, x);
	});
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Cardano$CoinSelection$largestFirstIter = F2(
	function (targets, stateResult) {
		largestFirstIter:
		while (true) {
			var _v0 = _Utils_Tuple2(stateResult, targets);
			if (_v0.a.$ === 'Err') {
				return stateResult;
			} else {
				if (!_v0.b.b) {
					return stateResult;
				} else {
					var state = _v0.a.a;
					var _v1 = _v0.b;
					var _v2 = _v1.a;
					var policyId = _v2.a;
					var name = _v2.b;
					var amount = _v2.c;
					var others = _v1.b;
					var getToken = function (value) {
						return A2(
							$elm$core$Maybe$withDefault,
							$dwayne$elm_natural$Natural$zero,
							A3($author$project$Cardano$MultiAsset$get, policyId, name, value.assets));
					};
					var sortOrder = F2(
						function (_v3, _v4) {
							var o1 = _v3.b;
							var o2 = _v4.b;
							return A3(
								$author$project$Cardano$CoinSelection$reverseOrder,
								$author$project$Cardano$Value$compare(getToken),
								o1.amount,
								o2.amount);
						});
					var newState = _Utils_update(
						state,
						{
							availableOutputs: A2($elm$core$List$sortWith, sortOrder, state.availableOutputs),
							targetAmount: A3($author$project$Cardano$Value$onlyToken, policyId, name, amount)
						});
					var $temp$targets = others,
						$temp$stateResult = $author$project$Cardano$CoinSelection$accumOutputsUntilDone(newState);
					targets = $temp$targets;
					stateResult = $temp$stateResult;
					continue largestFirstIter;
				}
			}
		}
	});
var $author$project$Cardano$CoinSelection$largestFirst = F2(
	function (maxInputCount, context) {
		var targetLovelace = $author$project$Cardano$Value$onlyLovelace(context.targetAmount.lovelace);
		var targetAssets = $author$project$Cardano$MultiAsset$split(context.targetAmount.assets);
		var sortedAvailableUtxoByLovelace = A2(
			$elm$core$List$sortWith,
			F2(
				function (_v0, _v1) {
					var o1 = _v0.b;
					var o2 = _v1.b;
					return A3($author$project$Cardano$CoinSelection$reverseOrder, $author$project$Cardano$Utxo$compareLovelace, o1, o2);
				}),
			context.availableUtxos);
		return A2(
			$elm$core$Result$map,
			function (state) {
				return {
					change: _Utils_eq(state.accumulatedAmount, context.targetAmount) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
						$author$project$Cardano$Value$normalize(
							A2($author$project$Cardano$Value$subtract, state.accumulatedAmount, context.targetAmount))),
					selectedUtxos: state.selectedOutputs
				};
			},
			A2(
				$author$project$Cardano$CoinSelection$largestFirstIter,
				targetAssets,
				$author$project$Cardano$CoinSelection$accumOutputsUntilDone(
					{
						accumulatedAmount: $author$project$Cardano$Value$sum(
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									function ($) {
										return $.amount;
									}),
								context.alreadySelectedUtxos)),
						availableOutputs: sortedAvailableUtxoByLovelace,
						maxInputCount: maxInputCount,
						selectedInputCount: $elm$core$List$length(context.alreadySelectedUtxos),
						selectedOutputs: context.alreadySelectedUtxos,
						targetAmount: targetLovelace
					})));
	});
var $author$project$Cardano$Uplc$slotConfigMainnet = {
	slotLengthMs: 1000,
	zeroSlot: $dwayne$elm_natural$Natural$fromSafeInt(4492800),
	zeroTime: $dwayne$elm_natural$Natural$fromSafeInt(1596059091000)
};
var $author$project$Cardano$Uplc$slotConfigPreview = {
	slotLengthMs: 1000,
	zeroSlot: $dwayne$elm_natural$Natural$fromSafeInt(0),
	zeroTime: $dwayne$elm_natural$Natural$fromSafeInt(1666656000000)
};
var $author$project$Cardano$TxIntent$finalize = F3(
	function (localStateUtxos, txOtherInfo, txIntents) {
		return A2(
			$elm$core$Result$andThen,
			function (feeSource) {
				var defaultEvalScriptsCosts = function () {
					if ($author$project$Cardano$TxIntent$containPlutusScripts(txIntents)) {
						var network = function () {
							switch (feeSource.$) {
								case 'Byron':
									return _Debug_todo(
										'Cardano.TxIntent',
										{
											start: {line: 509, column: 45},
											end: {line: 509, column: 55}
										})('Byron addresses are not unsupported');
								case 'Shelley':
									var networkId = feeSource.a.networkId;
									return networkId;
								default:
									var networkId = feeSource.a.networkId;
									return networkId;
							}
						}();
						var slotConfig = function () {
							if (network.$ === 'Mainnet') {
								return $author$project$Cardano$Uplc$slotConfigMainnet;
							} else {
								return $author$project$Cardano$Uplc$slotConfigPreview;
							}
						}();
						return $author$project$Cardano$Uplc$evalScriptsCosts(
							{budget: $author$project$Cardano$Uplc$conwayDefaultBudget, costModels: $author$project$Cardano$Uplc$conwayDefaultCostModels, slotConfig: slotConfig});
					} else {
						return F2(
							function (_v3, _v4) {
								return $elm$core$Result$Ok(_List_Nil);
							});
					}
				}();
				return A4(
					$author$project$Cardano$TxIntent$finalizeAdvanced,
					{coinSelectionAlgo: $author$project$Cardano$CoinSelection$largestFirst, costModels: $author$project$Cardano$Uplc$conwayDefaultCostModels, evalScriptsCosts: defaultEvalScriptsCosts, govState: $author$project$Cardano$TxIntent$emptyGovernanceState, localStateUtxos: localStateUtxos},
					$author$project$Cardano$TxIntent$AutoFee(
						{paymentSource: feeSource}),
					txOtherInfo,
					txIntents);
			},
			A2(
				$elm$core$Result$andThen,
				function (_v0) {
					return $author$project$Cardano$TxIntent$guessFeeSource(txIntents);
				},
				$author$project$Cardano$TxIntent$assertNoGovProposals(txIntents)));
	});
var $author$project$Main$localStateUtxos = function (myUtxos) {
	return $author$project$Cardano$Utxo$refDictFromList(myUtxos);
};
var $author$project$Bytes$Comparable$fromHex = function (str) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$Basics$always(
			$author$project$Bytes$Comparable$Bytes(
				$elm$core$String$toLower(str))),
		$jxxcarlson$hex$Hex$Convert$toBytes(str));
};
var $author$project$Main$metadataScriptBytesResult = function (mSS) {
	var _v0 = $author$project$Bytes$Comparable$fromHex(mSS);
	if (_v0.$ === 'Just') {
		var x = _v0.a;
		return $elm$core$Result$Ok(x);
	} else {
		return $elm$core$Result$Err('error converting stamp script into bytes');
	}
};
var $author$project$Main$metadataPlutusScriptResult = function (mMSB) {
	return A2(
		$elm$core$Result$map,
		function (x) {
			return A2($author$project$Cardano$Script$plutusScriptFromBytes, $author$project$Cardano$Script$PlutusV3, x);
		},
		$author$project$Main$metadataScriptBytesResult(mMSB));
};
var $author$project$Main$metadataScriptResult = function (mMSB) {
	return A2(
		$elm$core$Result$map,
		$author$project$Cardano$Script$Plutus,
		$author$project$Main$metadataPlutusScriptResult(mMSB));
};
var $author$project$Main$metadataScriptString = '5918e401010032323232323232323232323232323232323232232329593333330142255333573466e1d20000021132593300122800c00400a002001486400644a66464645266666603c44aa666ae68cdc3a400000422b26601445001800801400400190c800c88c964c00400e42b26601e45001800801400400390c800c8964c01400a42b26602645001800801400400290c800c8964cc07c08400a42b26602e45001800801400400290c800c88c964c00400e42b26603845001800801400400390c800c88c8c964cc004c00401c01242b26604445001800801400400490c800c8964cc0b808000a42b26604c45001800801400400290c800c8964ccc0e00d803c00a42b26605445001800801400400290c800c8964cccccc10c8954ccd5cd19b87480000084564cc0bc8a0030010028008003219001912c999999824112a999ab9a3370e900000108ac9981a114006002005001000643200322593304901d00290ac9981c1140040080052159304a00190c00600200700123002460048c0088c00823002280114008a004500200290ac99819914004008005215933333304a2255333573466e1d200000211593303622800c00400a002000c86400644b26609603e00521593303a22800801000a42b2609800321800c00400e002460048c0091801118010460045002280114008a00400321800c00400e002460048c0091801118010460045002280114008a00400521593302e22800c00400a002001486400644b26607402400521593303222800c00400a002001486400644b2666088466666609844a64a666ae68cdc3a400000622b2660724500100200148564c06c00643001801800913002499130014982260029312992999ab9a3370e900100208ac9981d1140040080072159304500190c00601200244c0092644c00526089800a4c4a64a666ae68cdc3a400800a22b2660764500100200248564c12400643001803800913002499130014982260029312992999ab9a3370e900300308ac9981e11400600200500100164320032259302500290ac998201140040080052159303c00190c00600200700122600c9322600a93226008931130014982260029312992999ab9a3370e900400388ac9981e91400400800d2159303a00190c00601600244c0092644c00526089800a4c4aa666ae68cdc3a401400e22b26607a45001800801400400690c800c8964c09800a42b2660824500100200148564c0f000643001802801c0048c0091801230022300208c008a004500228011400800411400a42b26606c45001800801400400290c800c8964cc06412400a42b26607445001800801400400290c800c8964c07800a42b26607c45001800801400400290c800c8964ccc1400f4cc1401508cccccc1608954ccd5cd19b87480000084600300208aa999ab9a3370e900100108c0060081155333573466e1d200400211800c00023002280114008a004500200100290ac99821114006002005001000a43200322593304e03f00290ac99823114006002005001000a432003223259300100390ac998259140040080072159300300190c00600207f03b81bc0ca059028812408203901880a4042019008801c0048c009180123002182b817a300246004460048c0088c009180111801230022300246004460048c0088c009180111801230022300246004460048c008605e002a0668c0091801140bd1801230022300246004460048c008602c466666604844aa666ae68cdc3a400000422b26602045001800801400400190c800c8964c07400a42b2660284500100200148564c08000643001800801c0048c0091801230022300208c008a004500228011400800518010460045002280114008a00400d21593300922800c00400a002003486400644b26601845001002000c8564cccccc08c894c94ccd5cd19b874800000c4564cc0408a00200400290ac9a812800c860030030012260049322600293044c0052625325333573466e1d200200411593301122800c00400a002001c86400644b2603c00521593301522800801000a42b26604804c00321800c02400e00244c0192644c0152644c0112622600293044c0052625325333573466e1d200400511593301222800801001242b2604000321800c01c0048980124c89800a4c11300149894c94ccd5cd19b87480180184564cc04c8a003001002800800b219001912c9a81580148564cc05c8a00200400290ac9809800c86003001003800913006499130054991300449889800a4c11300149894c94ccd5cd19b874802001c4564cc0508a00200400690ac9808800c8600300b0012260049322600293044c00526255333573466e1d200a00711593301422800c00400a002003486400644b26a05800521593301822800801000a42b2602600321800c01400e002460048c0091801118010460045002280114008a00400321800c00401a00900123002460044600480088cccccc0748954ccd5cd19b87480000084564cc0248a003001002800800321900191192c9800801c8564cc0388a0030010028008007219001912c980f00148564cc0488a00200400290ac999999814912992999ab9a3370e900000188ac9980b114006002005001000a43200322593302702c00290ac9980d114006002005001000a43200322593301d22800801000642b266058a06400321800c02401a00900122601293226010931130054991300449889800a4c11300149894c94ccd5cd19b87480080104564cc05c8a0030010028008007219001912c9981401680148564cc06c8a00200400290ac999999819112a999ab9a3370e900000108ac9980f11400600200500100064320032259301500290ac998111140040080052159301700190c00600200700123002460048c0088c00823002280114008a004500200190c00600200700122600c9322600a93226008931130014982260029312992999ab9a3370e900200288ac9980c1140060020050010012432003225933302a02800f00290ac9980e11400400800521593302b503100190c00601600700122600c9322600a93226008931130014982260029312992999ab9a3370e900300308ac9980c91400400800b21593302802d00190c00600e00244c0092644c00526089800a4c4a64a666ae68cdc3a401000e22b26603445001800801400400690c800c8964cc0ac0c000a42b26603c45001800801400400290c800c8964cc0a80b800a42b26604445001800801400400290c800c8964ccc0d00c806400a42b26604c450010020014856564cccccc0f48954ccd5cd19b87480000084564cc0a48a0030010028008003219001912c981000148564cc0b48a00200400290ac9811000c86003001003800918012300246004460041180114008a00450022801000c86400644aa666ae68cdc3a400000223002118009981800100091801243001806805c01e00700122601c9322601a93226018931130094991300849889802a4c8980224c44c00526089800a4c4a64a666ae68cdc3a401401022b26603645001800801400400790c800c8964cc0b00c400a42b26603e4500100200148564cccccc0d88954ccd5cd19b87480000084564cc0888a00200400190ac99818a81b800c860020028c00918010460045002280114008a00400321800c01400e00244c0192644c0152644c0112622600293044c00526255333573466e1d200c00811800c00823002280114008a004500200190c00600200f003800918012300246004460048c008a0428c00823002280114008a0045002001233333301c225325333573466e1d200000311593300922800c00400a002001486400644b2603200521593300d22800801000a42b266038a04600321800c03400e00244c0192644c0152644c0112622600293044c0052625325333573466e1d200200411593300a22800c00400a002001c86400644b2603400521593300e22800801000a42b26603aa04800321800c04c00e00244c0192644c0152644c0112622600293044c005262532325333573466e1d200400611593300c22800c00400a002002c86400644b2603800521593301022800801000a42b2600e00321800c00c00e00244c0192644c0152644c0112622600293044c0052625325333573466e1d200600711593300d22800c00400a002003486400644b2603a00521593301122800c00400a002001486400644b2601400521593301522800801000a42b26a05600321800c02c01e0070012260149322601293226010931130054991300449889800a4c11300149894c94ccd5cd19b87480200204564cc0388a003001002800800f219001912c980f00148564cc0488a00200400290ac9a814000c86003009003800913006499130054991300449889800a4c11300149894c94ccd5cd19b87480280244564cc03c8a00200400890ac980e800c860030150012260049322600293044c0052625325333573466e1d200c00a11593301022800c00400a002004c86400644b2604000521593301422800801000a42b26a05400321800c04400e00244c0192644c0152644c0112622600293044c0052625325333573466e1d200e00b11593301122800c00400a00200548640064464b2600200721593301622800801000e42b2600600321800c01400e00244c01d2644c0192644c01526281422600293044c0052625325333573466e1d201000c11593301222800c00400a002005c86400644b26a05200521593301622800801000a42b26a05800321800c01c00e00244c0192644c0152644c0112622600293044c0052625325333573466e1d201200d11593301322800c00400a002006486400644b2604600521593301722800801000a42b2604a00321800c00400e00244c0192644c0152644c0112622600293044c00526255333573466e1d201400d11593301322800801003242b2604200321800c03c0048c0091801046004466666604244a64a666ae68cdc3a400000622b26601c4500100200148564d408c0064300180080091300249913001498226002931299192999ab9a3370e900100288ac998081140040080092159300300190c00600a00244c0092644c00526089800a4c4aa666ae68cdc3a400800a22b26602045001800801400400490c800c8964d409c00a42b2660284500100200148564c01c00643001801801c0048c0091801230022300208c0088cccccc094894c94ccd5cd19b874800000c4564cc0488a00200400290ac9810000c860030010012260049322600293044c00526255333573466e1d200200311800c00822aa666ae68cdc3a4008006230018020460045002280114008a0040025002280114008a0040025002280114008a004002466666603644a64a666ae68cdc3a400000622b2660104500100200148564c05800643001800800913002499130014982260029312992999ab9a3370e900100208ac998049140040080072159301700190c00600600244c0092644c00526089800a4c4aa666ae68cdc3a400800822b26601245001002001c8564d407800643001802800918012300208c008a004500228011400800460048c008602f0021180114008a00450022801001c860060028c0052411563616e6e6f74206465636f646520636f6e746578740024600466006921166572726f72206465636f64696e6720636f6e746578740080148c00a4c8cc0066400a4440029140052401176661696c656420746f206578747261637420646174756d004a002921176661696c656420746f206578747261637420646174756d0048a0029201176661696c656420746f206578747261637420646174756d004a002921176661696c656420746f206578747261637420646174756d00489640064300300146002921176661696c656420746f206578747261637420646174756d0025001491176661696c656420746f206578747261637420646174756d0008cc00964cccccc05c8954ccd5cd19b874800000844c964cc0048a0030010028008005219001912c99999980e912a999ab9a3370e900000108ac998031140060020050010006432003223259300100390ac99805914006002005001000e4320032259300500290ac99807914006002005001000a432003223259300100390ac9980a114006002005001000e4320032259300500290ac9980c114006002005001000a43200322593302c503300290ac9980e11400400800521593302e23333330372255333573466e1d200000211593302022800801000642b2603000321800800a3002460041180114008a00450022801000800c86003001014808402e00f003800918012300246004460048c0088c00918010c08c02518012300223002460045020460041180114008a0045002280100148564cc0148a0030010028008005219001912c9a81000148564cc0248a00200400290ac980c800c86003001007801c0048c009180123002230024600446004301a80108c008a004500228011400800643003001460029201166661696c656420746f206465636f646520646174756d000964c8cccccc0648954ccd5cd19b87480000084600300008c008a0045002280114008006401244400490998022ccc802c88800d2222222222222222008460029210c7a65726f207369676e657273004885640063003002488600292110746f6f206d616e79207369676e6572730004b33320072220014880092333573466e3c008006001002940091801c0011800a481176d697373696e67207265717569726564207369676e657200230014911c63616e6e6f7420646573657269616c697a652072656465656d6572200008a400a500100148c0080052330040018014a00012c800c52689802a490350543500112c800c6001133573800500218091112a999ab9a3370e900000088980224903505433001155333573466e200052000113300333702900000119b814800000444ca00266e1000c00666e100080046600a004002464c66ae700060006020444aa666ae68cdc3a400000222004226600600266e180080048c8ccccc03c8a00450020012801140094cc040884cc046003000112c980280148564d4c0144800400a4300180180140048c0091328011a9802090008008480048cccccc0348954ccd5cd19b874800000844c964cc0048a0030010028008005219001912c9a80880148564cc0148a00200400290ac9a80a000c8600300100380091801230024600446004301080108c008a00450022801140080048cccccc0308954ccd5cd19b874800000844c964cc0048a0030010028008005219001912c980400148564cc0148a00300100280080052190019119192c998009800a80b80248564cc02c8a0030010028008009219001912c99999980e112a999ab9a3370e900000108c006000115325333573466e1d200200311593301122800801000a42b2601400321800c0140048980124c89800a4c113001498954ccd5cd19b874801000c4564cc0448a00200400290c006006002460041180114008a0045002280100148564cc03c8a00200400290ac9980b004000c8600300100d803c00e002460048c009180111801230021808000a80a230024600446004300f80108c008a00450022801140080048cccccc02c8954ccd5cd19b874800000844c964cc0048a0030010028008005219001912c980400148564cc0148a00200400290ac99805919999980a112992999ab9a3370e900000188ac998051140040080052159300f00190c00600200244c0092644c00526089800a4c4aa666ae68cdc3a400400622b26601445001800801400400290c800c88c964c00400e42b26601e45001800801400400390c800c8964c01400a42b2660264500100200148564c01c00643001801803c00e002460048c00918011180123002280ca300208c008a004500228011400800400643001800801c0048c0091801230022300218074008460045002280114008a004002466666601444a64a666ae68cdc3a400000622b266601d00222800801000a42b26a01800321800c0040048980124c89800a4c113001498954ccd5cd19b874800800c4564ccc03a0044500100200148564d403000643001801800918012300208c008a004500228011400800488cccccc0288954ccd5cd19b87480080084600300208aa999ab9a3370e900000108ac999806c0088a00200400190ac9802800c8600300100123002460041180114008a00450022801000911919999805114008964c0080064300100146004280114008a004a660164426601900180008964c018d55ce80148564c018d55cf001c8564d4c0184800400e43001801c00400e0048009180122650023530051200100244c8ca0046a600a24002004600a6aae780082400250010011199999803112a999ab9a3370e900000108c0060041155333573466e1d200200211800c00023002280114008a0045002001223333330062255333573466e1d200000211800c00822a64a666ae68cdc3a400400622b266601500222800801000a42b2600c00321800c0040048980124c89800a4c113001498954ccd5cd19b874801000c4600300408c008a00450022801140080048cccccc0108954ccd5cd19b874800000844c964cc0048a0030010028008005219001912c9a80400148564cc0148a00200400290ac9a805800c8600300100380091801230024600446004300780108c008a00450022801140080044ccccc0088a0045002280114008a0020021333330012280114008a0045001001140088888894cccccd5d2000899198039aab9d00135573c0026ea80044c014dd5800898021bac00113003375a002260046eb80048894ccd55cf80088018998011aba100135744002464600200246004466004004003';
var $author$project$Cardano$Transaction$newBody = {auxiliaryDataHash: $elm$core$Maybe$Nothing, certificates: _List_Nil, collateral: _List_Nil, collateralReturn: $elm$core$Maybe$Nothing, currentTreasuryValue: $elm$core$Maybe$Nothing, fee: $dwayne$elm_natural$Natural$zero, inputs: _List_Nil, mint: $author$project$Cardano$MultiAsset$empty, networkId: $elm$core$Maybe$Nothing, outputs: _List_Nil, proposalProcedures: _List_Nil, referenceInputs: _List_Nil, requiredSigners: _List_Nil, scriptDataHash: $elm$core$Maybe$Nothing, totalCollateral: $elm$core$Maybe$Nothing, treasuryDonation: $elm$core$Maybe$Nothing, ttl: $elm$core$Maybe$Nothing, update: $elm$core$Maybe$Nothing, validityIntervalStart: $elm$core$Maybe$Nothing, votingProcedures: _List_Nil, withdrawals: _List_Nil};
var $author$project$Cardano$Transaction$newWitnessSet = {bootstrapWitness: $elm$core$Maybe$Nothing, nativeScripts: $elm$core$Maybe$Nothing, plutusData: $elm$core$Maybe$Nothing, plutusV1Script: $elm$core$Maybe$Nothing, plutusV2Script: $elm$core$Maybe$Nothing, plutusV3Script: $elm$core$Maybe$Nothing, redeemer: $elm$core$Maybe$Nothing, vkeywitness: $elm$core$Maybe$Nothing};
var $dwayne$elm_natural$Natural$fromBinaryString = $dwayne$elm_natural$Natural$fromBaseBString(2);
var $dwayne$elm_natural$Natural$fromOctalString = $dwayne$elm_natural$Natural$fromBaseBString(8);
var $dwayne$elm_natural$Natural$fromString = function (input) {
	return (A2($elm$core$String$startsWith, '0b', input) || A2($elm$core$String$startsWith, '0B', input)) ? $dwayne$elm_natural$Natural$fromBinaryString(
		A2($elm$core$String$dropLeft, 2, input)) : ((A2($elm$core$String$startsWith, '0o', input) || A2($elm$core$String$startsWith, '0O', input)) ? $dwayne$elm_natural$Natural$fromOctalString(
		A2($elm$core$String$dropLeft, 2, input)) : ((A2($elm$core$String$startsWith, '0x', input) || A2($elm$core$String$startsWith, '0X', input)) ? $dwayne$elm_natural$Natural$fromHexString(
		A2($elm$core$String$dropLeft, 2, input)) : A2($dwayne$elm_natural$Natural$fromBaseBString, 10, input)));
};
var $dwayne$elm_natural$Natural$fromSafeString = A2(
	$elm$core$Basics$composeR,
	$dwayne$elm_natural$Natural$fromString,
	$elm$core$Maybe$withDefault($dwayne$elm_natural$Natural$zero));
var $author$project$Main$threeAda = $author$project$Cardano$Value$onlyLovelace(
	$dwayne$elm_natural$Natural$fromSafeString('3000000'));
var $author$project$Cardano$Utxo$OutputReference = F2(
	function (transactionId, outputIndex) {
		return {outputIndex: outputIndex, transactionId: transactionId};
	});
var $turboMaCk$any_dict$Dict$Any$remove = F2(
	function (k, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2(
						$elm$core$Dict$remove,
						inner.toKey(k),
						inner.dict)
				}));
	});
var $author$project$Cardano$TxIntent$updateLocalState = F3(
	function (txId, tx, oldState) {
		var unspent = A3($elm$core$List$foldl, $turboMaCk$any_dict$Dict$Any$remove, oldState, tx.body.inputs);
		var createdUtxos = A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, output) {
					return _Utils_Tuple2(
						A2($author$project$Cardano$Utxo$OutputReference, txId, index),
						output);
				}),
			tx.body.outputs);
		return {
			created: createdUtxos,
			spent: A2(
				$elm$core$List$filterMap,
				function (ref) {
					return A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$pair(ref),
						A2($turboMaCk$any_dict$Dict$Any$get, ref, oldState));
				},
				tx.body.inputs),
			updatedState: A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, state) {
						var ref = _v0.a;
						var output = _v0.b;
						return A3($turboMaCk$any_dict$Dict$Any$insert, ref, output, state);
					}),
				unspent,
				createdUtxos)
		};
	});
var $author$project$Main$closeMetadata = F4(
	function (wallet, maybeMetadataOutReferenceAndOutput, maybeMetadataReferenceScriptOutReferenceAndOutput, maybePubKeyHash) {
		var _v0 = A4(
			$bburdette$toop$Toop$T4,
			$author$project$Main$metadataScriptResult($author$project$Main$metadataScriptString),
			maybeMetadataOutReferenceAndOutput,
			maybeMetadataReferenceScriptOutReferenceAndOutput,
			maybePubKeyHash);
		if (_v0.a.$ === 'Ok') {
			if (_v0.b.$ === 'Just') {
				if (_v0.c.$ === 'Just') {
					if (_v0.d.$ === 'Just') {
						if (_v0.a.a.$ === 'Plutus') {
							var metadataPlutusScript = _v0.a.a.a;
							var metadataOutReferenceAndOutput = _v0.b.a;
							var metadataReferenceScriptOutReferenceAndOutput = _v0.c.a;
							var pubKeyHash = _v0.d.a;
							var referenceEmptyTxBody = $author$project$Cardano$Transaction$newBody;
							var metadataScriptOutput = metadataReferenceScriptOutReferenceAndOutput.b;
							var referenceTxBody = _Utils_update(
								referenceEmptyTxBody,
								{
									outputs: _List_fromArray(
										[metadataScriptOutput])
								});
							var referenceTransaction = {
								auxiliaryData: $elm$core$Maybe$Just(
									{
										labels: _List_Nil,
										nativeScripts: _List_Nil,
										plutusV1Scripts: _List_Nil,
										plutusV2Scripts: _List_Nil,
										plutusV3Scripts: _List_fromArray(
											[
												$author$project$Cardano$Script$cborWrappedBytes(metadataPlutusScript)
											])
									}),
								body: referenceTxBody,
								isValid: true,
								witnessSet: $author$project$Cardano$Transaction$newWitnessSet
							};
							var metadataScriptOutReference = metadataReferenceScriptOutReferenceAndOutput.a;
							var plutusScriptWitness = {
								redeemerData: function (_v8) {
									return A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$zero, _List_Nil);
								},
								requiredSigners: _List_fromArray(
									[pubKeyHash]),
								script: _Utils_Tuple2(
									$author$project$Cardano$Script$PlutusV3,
									$author$project$Cardano$Witness$ByReference(metadataScriptOutReference))
							};
							var metadata = $author$project$Cardano$TxIntent$TxMetadata(
								{
									metadata: $author$project$Cardano$Metadatum$Bytes(
										$author$project$Bytes$Comparable$fromText('Close Metadata')),
									tag: $dwayne$elm_natural$Natural$zero
								});
							var localUtxosWithReferenceScript = A3(
								$author$project$Cardano$TxIntent$updateLocalState,
								metadataScriptOutReference.transactionId,
								referenceTransaction,
								$author$project$Main$localStateUtxos(wallet.utxos));
							var _v1 = metadataOutReferenceAndOutput;
							var metadataOutReference = _v1.a;
							var metadataOutput = _v1.b;
							var metadataTxBody = _Utils_update(
								referenceEmptyTxBody,
								{
									outputs: _List_fromArray(
										[metadataOutput])
								});
							var metadataTransaction = {auxiliaryData: $elm$core$Maybe$Nothing, body: metadataTxBody, isValid: true, witnessSet: $author$project$Cardano$Transaction$newWitnessSet};
							var localUtxosWithMetadataScript = A3($author$project$Cardano$TxIntent$updateLocalState, metadataOutReference.transactionId, metadataTransaction, localUtxosWithReferenceScript.updatedState);
							var _v2 = A2($elm$core$Debug$log, 'metadataOutput ', metadataOutput);
							return function (x) {
								var localStateUtxosList = $turboMaCk$any_dict$Dict$Any$toList(localUtxosWithMetadataScript.updatedState);
								var encodedLocalStateUtxos = A2($elm_toulouse$cbor$Cbor$Encode$list, $author$project$Main$encodeTuple, localStateUtxosList);
								var _v3 = A2($elm$core$Debug$log, 'metadataScriptOutReference ', metadataScriptOutReference);
								var _v4 = A2($elm$core$Debug$log, 'localStateUtxos ', localUtxosWithMetadataScript.updatedState);
								var _v5 = A2($elm$core$Debug$log, 'localStateUtxosList ', localStateUtxosList);
								var _v6 = A2($elm$core$Debug$log, 'encodedLocalStateUtxos  ', encodedLocalStateUtxos);
								var _v7 = A2($elm$core$Debug$log, 'txIntents ', x);
								return A3(
									$author$project$Cardano$TxIntent$finalize,
									localUtxosWithMetadataScript.updatedState,
									_List_fromArray(
										[metadata]),
									x);
							}(
								_List_fromArray(
									[
										$author$project$Cardano$TxIntent$Spend(
										$author$project$Cardano$TxIntent$FromPlutusScript(
											{datumWitness: $elm$core$Maybe$Nothing, plutusScriptWitness: plutusScriptWitness, spentInput: metadataOutReference})),
										A2($author$project$Cardano$TxIntent$SendTo, wallet.changeAddress, $author$project$Main$threeAda)
									]));
						} else {
							return $elm$core$Result$Err(
								$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('other issue'));
						}
					} else {
						var _v11 = _v0.d;
						return $elm$core$Result$Err(
							$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('missing pubKeyHash'));
					}
				} else {
					var _v10 = _v0.c;
					return $elm$core$Result$Err(
						$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('missing metadata reference'));
				}
			} else {
				var _v9 = _v0.b;
				return $elm$core$Result$Err(
					$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('missing metadata utxo'));
			}
		} else {
			var e = _v0.a.a;
			return $elm$core$Result$Err(
				$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('missing address'));
		}
	});
var $author$project$Cardano$Utxo$DatumValue = function (a) {
	return {$: 'DatumValue', a: a};
};
var $author$project$Cardano$Utxo$datumValueFromData = function (datum) {
	return $author$project$Cardano$Utxo$DatumValue(
		{
			rawBytes: $author$project$Bytes$Comparable$fromBytes(
				$elm_toulouse$cbor$Cbor$Encode$encode(
					$author$project$Cardano$Data$toCborUplc(datum)))
		});
};
var $author$project$Cardano$Data$fromBytes = function (bytes) {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$decode,
		$author$project$Cardano$Data$fromCbor,
		$author$project$Bytes$Comparable$toBytes(bytes));
};
var $author$project$Main$convertSpendableUtxoIntoListOfUTxOReferenceOutputPairs = F2(
	function (address, listOfMaestroResponses) {
		var _v0 = A2($elm$core$Debug$log, 'listOfMaestroResponses ', listOfMaestroResponses);
		return A2(
			$elm$core$List$map,
			function (maestroResponse) {
				return _Utils_Tuple2(
					{
						outputIndex: maestroResponse.index,
						transactionId: $author$project$Bytes$Comparable$fromHexUnchecked(maestroResponse.txId)
					},
					{
						address: address,
						amount: $author$project$Main$threeAda,
						datumOption: A2(
							$elm$core$Maybe$map,
							function (x) {
								return $author$project$Cardano$Utxo$datumValueFromData(x);
							},
							A2(
								$elm$core$Maybe$andThen,
								$author$project$Cardano$Data$fromBytes,
								$author$project$Bytes$Comparable$fromHex(maestroResponse.datum))),
						referenceScript: $elm$core$Maybe$Nothing
					});
			},
			listOfMaestroResponses);
	});
var $author$project$Cardano$Cip30$DiscoverWallets = {$: 'DiscoverWallets'};
var $author$project$Cardano$Cip30$discoverWallets = $author$project$Cardano$Cip30$DiscoverWallets;
var $author$project$Cardano$Cip30$Enable = function (a) {
	return {$: 'Enable', a: a};
};
var $author$project$Cardano$Cip30$enableWallet = function (idAndExtensions) {
	return $author$project$Cardano$Cip30$Enable(idAndExtensions);
};
var $author$project$Cardano$Cip30$encodeRequest = function (request) {
	switch (request.$) {
		case 'DiscoverWallets':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'requestType',
						$elm$json$Json$Encode$string('cip30-discover'))
					]));
		case 'Enable':
			var id = request.a.id;
			var extensions = request.a.extensions;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'requestType',
						$elm$json$Json$Encode$string('cip30-enable')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id)),
						_Utils_Tuple2(
						'extensions',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, extensions))
					]));
		default:
			var id = request.a.id;
			var api = request.a.api;
			var method = request.a.method;
			var args = request.a.args;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'requestType',
						$elm$json$Json$Encode$string('cip30-api')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id)),
						_Utils_Tuple2('api', api),
						_Utils_Tuple2(
						'method',
						$elm$json$Json$Encode$string(method)),
						_Utils_Tuple2(
						'args',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, args))
					]));
	}
};
var $author$project$Cardano$Cip30$ApiRequest = function (a) {
	return {$: 'ApiRequest', a: a};
};
var $author$project$Cardano$Cip30$apiRequest = F3(
	function (_v0, method, args) {
		var descriptor = _v0.a.descriptor;
		var api = _v0.a.api;
		return $author$project$Cardano$Cip30$ApiRequest(
			{api: api, args: args, id: descriptor.id, method: method});
	});
var $author$project$Cardano$Cip30$getChangeAddress = function (wallet) {
	return A3($author$project$Cardano$Cip30$apiRequest, wallet, 'getChangeAddress', _List_Nil);
};
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $author$project$Main$maestroAPIKey = function (n) {
	if (n.$ === 'Testnet') {
		return 'V37EokNtPF6ypmACAycFsdX0cGYtiJxI';
	} else {
		return 'zYa6dQgOTIqHBZiOUvZY2whrEwx1mw6T';
	}
};
var $author$project$Main$apiKeyHeader = function (n) {
	return A2(
		$elm$http$Http$header,
		'api-key',
		$author$project$Main$maestroAPIKey(n));
};
var $author$project$Main$dataUrl = function (n) {
	if (n.$ === 'Testnet') {
		return 'https://preview.gomaestro-api.org/v1/';
	} else {
		return 'https://mainnet.gomaestro-api.org/v1/';
	}
};
var $author$project$Main$ReferenceScriptUtxo = F4(
	function (txId, datum, index, referenceScriptHex) {
		return {datum: datum, index: index, referenceScriptHex: referenceScriptHex, txId: txId};
	});
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $elm$json$Json$Decode$field = _Json_decodeField;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$at, path, valDecoder),
			decoder);
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Main$decodeReferenceScriptResponse = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
	_List_fromArray(
		['reference_script', 'bytes']),
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'index',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['datum', 'json', 'bytes']),
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'tx_hash',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$Main$ReferenceScriptUtxo)))));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Main$decodeReferenceScriptResponses = A2(
	$elm$json$Json$Decode$field,
	'data',
	$elm$json$Json$Decode$list($author$project$Main$decodeReferenceScriptResponse));
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $author$project$Main$network = $author$project$Cardano$Address$Testnet;
var $author$project$Main$referencePolicyIdHex = function () {
	var _v0 = $author$project$Main$network;
	if (_v0.$ === 'Mainnet') {
		return '';
	} else {
		return 'd4c84babcb60f1e301fa4fd1c1759a2ebcd1d346988418ac459088e4';
	}
}();
var $author$project$Main$referenceTokenAssetNameText = 'StarcadaReferenceToken';
var $author$project$Main$referenceTokenAssetNameHex = $author$project$Bytes$Comparable$toHex(
	$author$project$Bytes$Comparable$fromText($author$project$Main$referenceTokenAssetNameText));
var $author$project$Main$referenceWalletAddressText = 'addr_test1qp5vzne98n43jd9w335udqpkyua5yk7a8jrfslzdqc0pr8xqgwp4c5ekhct3tyygcf9lrxe6f9csdv757swftg0gvras28x5jz';
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $author$project$Main$getReferenceScriptUtxos = F2(
	function (networkId, receivedRefereceWalletUtxosMsg) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, receivedRefereceWalletUtxosMsg, $author$project$Main$decodeReferenceScriptResponses),
				headers: _List_fromArray(
					[
						$author$project$Main$apiKeyHeader(networkId)
					]),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: ($author$project$Main$dataUrl(networkId) + 'addresses/') + ($author$project$Main$referenceWalletAddressText + ('/utxos' + ('?asset=' + ($author$project$Main$referencePolicyIdHex + ($author$project$Main$referenceTokenAssetNameHex + '&resolve_datums=true')))))
			});
	});
var $author$project$Cardano$Cip30$getRewardAddresses = function (wallet) {
	return A3($author$project$Cardano$Cip30$apiRequest, wallet, 'getRewardAddresses', _List_Nil);
};
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Main$SpendableScriptUtxo = F3(
	function (txId, index, datum) {
		return {datum: datum, index: index, txId: txId};
	});
var $author$project$Main$decodeSpendableScriptUtxoResponse = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
	_List_fromArray(
		['datum', 'bytes']),
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'index',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'tx_hash',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$Main$SpendableScriptUtxo))));
var $author$project$Main$decodeSpendableScriptUtxoResponses = A2(
	$elm$json$Json$Decode$field,
	'data',
	$elm$json$Json$Decode$list($author$project$Main$decodeSpendableScriptUtxoResponse));
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $author$project$Main$utxoResolver = $elm$http$Http$stringResolver(
	function (x) {
		var _v0 = A2($elm$core$Debug$log, 'here', x);
		if (x.$ === 'GoodStatus_') {
			var body = x.b;
			var _v2 = A2($elm$core$Debug$log, 'body ', body);
			return A2($elm$json$Json$Decode$decodeString, $author$project$Main$decodeSpendableScriptUtxoResponses, body);
		} else {
			return $elm$core$Result$Err(
				A2(
					$elm$json$Json$Decode$Failure,
					'no bueno',
					$elm$json$Json$Encode$string('')));
		}
	});
var $author$project$Main$getSpendableUtxos = F2(
	function (networkId, address) {
		var _v0 = A2($elm$core$Debug$log, 'getUtxos', _Utils_Tuple0);
		return $elm$http$Http$task(
			{
				body: $elm$http$Http$emptyBody,
				headers: _List_fromArray(
					[
						$author$project$Main$apiKeyHeader(networkId)
					]),
				method: 'GET',
				resolver: $author$project$Main$utxoResolver,
				timeout: $elm$core$Maybe$Nothing,
				url: $author$project$Main$dataUrl(networkId) + ('addresses/' + (address + ('/utxos' + '?resolve_datums=true')))
			});
	});
var $author$project$Cardano$Cip30$encodeCborHex = function (cborEncoder) {
	return $elm$json$Json$Encode$string(
		$jxxcarlson$hex$Hex$Convert$toString(
			$elm_toulouse$cbor$Cbor$Encode$encode(cborEncoder)));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Cardano$Cip30$encodeMaybe = F2(
	function (encode, maybe) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$json$Json$Encode$null,
			A2($elm$core$Maybe$map, encode, maybe));
	});
var $author$project$Cardano$Cip30$encodePaginate = function (_v0) {
	var page = _v0.page;
	var limit = _v0.limit;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'page',
				$elm$json$Json$Encode$int(page)),
				_Utils_Tuple2(
				'limit',
				$elm$json$Json$Encode$int(limit))
			]));
};
var $author$project$Cardano$Cip30$getUtxos = F2(
	function (wallet, _v0) {
		var amount = _v0.amount;
		var paginate = _v0.paginate;
		return A3(
			$author$project$Cardano$Cip30$apiRequest,
			wallet,
			'getUtxos',
			_List_fromArray(
				[
					A2(
					$author$project$Cardano$Cip30$encodeMaybe,
					function (a) {
						return $author$project$Cardano$Cip30$encodeCborHex(
							$author$project$Cardano$Value$encode(a));
					},
					amount),
					A2($author$project$Cardano$Cip30$encodeMaybe, $author$project$Cardano$Cip30$encodePaginate, paginate)
				]));
	});
var $author$project$Cardano$Gov$CostModels = F3(
	function (plutusV1, plutusV2, plutusV3) {
		return {plutusV1: plutusV1, plutusV2: plutusV2, plutusV3: plutusV3};
	});
var $author$project$Main$protocolParamsDecoder = A2(
	$elm$json$Json$Decode$map,
	function (v3) {
		return {
			costModels: A3(
				$author$project$Cardano$Gov$CostModels,
				$elm$core$Maybe$Nothing,
				$elm$core$Maybe$Nothing,
				$elm$core$Maybe$Just(v3))
		};
	},
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['data', 'plutus_cost_models', 'plutus_v3']),
		$elm$json$Json$Decode$list($elm$json$Json$Decode$int)));
var $author$project$Main$loadProtocolParameters = F2(
	function (networkId, msg) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Main$protocolParamsDecoder),
				headers: _List_fromArray(
					[
						$author$project$Main$apiKeyHeader(networkId)
					]),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Main$dataUrl(networkId) + 'protocol-parameters'
			});
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Cardano$Cip30$signTxCbor = F3(
	function (wallet, _v0, txBytes) {
		var partialSign = _v0.partialSign;
		return A3(
			$author$project$Cardano$Cip30$apiRequest,
			wallet,
			'signTx',
			_List_fromArray(
				[
					$elm$json$Json$Encode$string(
					$author$project$Bytes$Comparable$toHex(txBytes)),
					$elm$json$Json$Encode$bool(partialSign)
				]));
	});
var $author$project$Cardano$Cip30$signTx = F3(
	function (wallet, partialSign, tx) {
		return A3(
			$author$project$Cardano$Cip30$signTxCbor,
			wallet,
			partialSign,
			$author$project$Cardano$Transaction$serialize(tx));
	});
var $author$project$Cardano$Cip30$submitTxCbor = F2(
	function (wallet, txBytes) {
		return A3(
			$author$project$Cardano$Cip30$apiRequest,
			wallet,
			'submitTx',
			_List_fromArray(
				[
					$elm$json$Json$Encode$string(
					$author$project$Bytes$Comparable$toHex(txBytes))
				]));
	});
var $author$project$Cardano$Cip30$submitTx = F2(
	function (wallet, tx) {
		return A2(
			$author$project$Cardano$Cip30$submitTxCbor,
			wallet,
			$author$project$Cardano$Transaction$serialize(tx));
	});
var $author$project$Cardano$Address$toBech32 = function (address) {
	switch (address.$) {
		case 'Byron':
			return A2(
				$elm$core$Result$withDefault,
				'byron',
				$elm_cardano$bech32$Bech32$Encode$encode(
					{
						data: $author$project$Bytes$Comparable$toBytes(
							$author$project$Cardano$Address$toBytes(address)),
						prefix: 'byron'
					}));
		case 'Shelley':
			var networkId = address.a.networkId;
			return A2(
				$elm$core$Result$withDefault,
				'addr',
				$elm_cardano$bech32$Bech32$Encode$encode(
					{
						data: $author$project$Bytes$Comparable$toBytes(
							$author$project$Cardano$Address$toBytes(address)),
						prefix: function () {
							if (networkId.$ === 'Mainnet') {
								return 'addr';
							} else {
								return 'addr_test';
							}
						}()
					}));
		default:
			var networkId = address.a.networkId;
			return A2(
				$elm$core$Result$withDefault,
				'stake',
				$elm_cardano$bech32$Bech32$Encode$encode(
					{
						data: $author$project$Bytes$Comparable$toBytes(
							$author$project$Cardano$Address$toBytes(address)),
						prefix: function () {
							if (networkId.$ === 'Mainnet') {
								return 'stake';
							} else {
								return 'stake_test';
							}
						}()
					}));
	}
};
var $author$project$Main$toWallet = _Platform_outgoingPort('toWallet', $elm$core$Basics$identity);
var $author$project$Main$perform = function (effect) {
	switch (effect.$) {
		case 'DiscoverWallets':
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest($author$project$Cardano$Cip30$discoverWallets));
		case 'EnableWallet':
			var id = effect.a;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					$author$project$Cardano$Cip30$enableWallet(
						{extensions: _List_Nil, id: id})));
		case 'GetWalletUtxos':
			var walletCip = effect.a;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					A2(
						$author$project$Cardano$Cip30$getUtxos,
						walletCip,
						{amount: $elm$core$Maybe$Nothing, paginate: $elm$core$Maybe$Nothing})));
		case 'GetRewardAddress':
			var walletCip = effect.a;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					$author$project$Cardano$Cip30$getRewardAddresses(walletCip)));
		case 'GetChangeAddress':
			var walletCip = effect.a;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					$author$project$Cardano$Cip30$getChangeAddress(walletCip)));
		case 'GetProtocalParameters':
			return A2($author$project$Main$loadProtocolParameters, $author$project$Cardano$Address$Testnet, $author$project$Main$GotProtocolParameters);
		case 'GetReferenceUtxos':
			return A2($author$project$Main$getReferenceScriptUtxos, $author$project$Main$network, $author$project$Main$GotReferenceUtxos);
		case 'SubmitStartMetadataScriptForSubmission':
			var signedTx = effect.a;
			var wallet = effect.b;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					A2($author$project$Cardano$Cip30$submitTx, wallet.wallet, signedTx)));
		case 'SubmitCloseMetadataTransaction':
			var wallet = effect.a;
			var metadataScriptAddress = effect.b;
			return A2(
				$elm$core$Task$attempt,
				$author$project$Main$ReceiveCloseMetadata,
				A2(
					$elm$core$Task$andThen,
					function (metadataUtxos) {
						var outputMetadataUtxos = A2($author$project$Main$convertSpendableUtxoIntoListOfUTxOReferenceOutputPairs, metadataScriptAddress, metadataUtxos);
						var maybePubKeyHash = $author$project$Cardano$Address$extractPubKeyHash(wallet.changeAddress);
						var maybeMetadataScriptReference = $elm$core$List$head(
							A2(
								$elm$core$List$filter,
								function (_v2) {
									var outRef = _v2.a;
									var output = _v2.b;
									var _v3 = output.datumOption;
									if ((_v3.$ === 'Just') && (_v3.a.$ === 'DatumValue')) {
										var rawBytes = _v3.a.a.rawBytes;
										var datum = A2(
											$elm$core$Maybe$withDefault,
											$author$project$Cardano$Data$List(_List_Nil),
											A2(
												$elm_toulouse$cbor$Cbor$Decode$decode,
												$author$project$Cardano$Data$fromCbor,
												$author$project$Bytes$Comparable$toBytes(rawBytes)));
										return _Utils_eq(
											datum,
											$author$project$Cardano$Data$Bytes(
												$author$project$Bytes$Comparable$fromText('Metadata')));
									} else {
										return false;
									}
								},
								wallet.referenceUtxos));
						var _v1 = A2($elm$core$Debug$log, 'outputMetadataUtxos ', outputMetadataUtxos);
						return $elm$core$Task$succeed(
							A4(
								$author$project$Main$closeMetadata,
								wallet,
								$elm$core$List$head(
									$elm$core$List$reverse(outputMetadataUtxos)),
								maybeMetadataScriptReference,
								maybePubKeyHash));
					},
					A2(
						$author$project$Main$getSpendableUtxos,
						$author$project$Main$network,
						$author$project$Cardano$Address$toBech32(metadataScriptAddress))));
		case 'SubmitStartMetadataScriptForSignature':
			var goodTx = effect.a;
			var wallet = effect.b;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					A3(
						$author$project$Cardano$Cip30$signTx,
						wallet.wallet,
						{partialSign: false},
						goodTx)));
		case 'SubmitCloseMetadataScriptTransactionForSignature':
			var goodTx = effect.a;
			var wallet = effect.b;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					A3(
						$author$project$Cardano$Cip30$signTx,
						wallet.wallet,
						{partialSign: true},
						goodTx)));
		case 'SubmitCloseMetadataScriptForSubmission':
			var signedTx = effect.a;
			var wallet = effect.b;
			return $author$project$Main$toWallet(
				$author$project$Cardano$Cip30$encodeRequest(
					A2($author$project$Cardano$Cip30$submitTx, wallet.wallet, signedTx)));
		default:
			return $elm$core$Platform$Cmd$none;
	}
};
var $author$project$Main$ClosingMetadataScript = F2(
	function (a, b) {
		return {$: 'ClosingMetadataScript', a: a, b: b};
	});
var $author$project$Main$EnableWallet = function (a) {
	return {$: 'EnableWallet', a: a};
};
var $author$project$Main$GetChangeAddress = function (a) {
	return {$: 'GetChangeAddress', a: a};
};
var $author$project$Main$GetProtocalParameters = {$: 'GetProtocalParameters'};
var $author$project$Main$GetReferenceUtxos = {$: 'GetReferenceUtxos'};
var $author$project$Main$GetRewardAddress = function (a) {
	return {$: 'GetRewardAddress', a: a};
};
var $author$project$Main$GetWalletUtxos = function (a) {
	return {$: 'GetWalletUtxos', a: a};
};
var $author$project$Main$GettingProtocalParameters = function (a) {
	return {$: 'GettingProtocalParameters', a: a};
};
var $author$project$Main$GettingReferenceUtxos = function (a) {
	return {$: 'GettingReferenceUtxos', a: a};
};
var $author$project$Main$NoEffect = {$: 'NoEffect'};
var $author$project$Main$StartingMetadataScript = F2(
	function (a, b) {
		return {$: 'StartingMetadataScript', a: a, b: b};
	});
var $author$project$Main$SubmitCloseMetadataScriptForSubmission = F2(
	function (a, b) {
		return {$: 'SubmitCloseMetadataScriptForSubmission', a: a, b: b};
	});
var $author$project$Main$SubmitCloseMetadataScriptTransactionForSignature = F2(
	function (a, b) {
		return {$: 'SubmitCloseMetadataScriptTransactionForSignature', a: a, b: b};
	});
var $author$project$Main$SubmitCloseMetadataTransaction = F2(
	function (a, b) {
		return {$: 'SubmitCloseMetadataTransaction', a: a, b: b};
	});
var $author$project$Main$SubmitStartMetadataScriptForSignature = F2(
	function (a, b) {
		return {$: 'SubmitStartMetadataScriptForSignature', a: a, b: b};
	});
var $author$project$Main$SubmitStartMetadataScriptForSubmission = F2(
	function (a, b) {
		return {$: 'SubmitStartMetadataScriptForSubmission', a: a, b: b};
	});
var $author$project$Main$WaitingForInput = function (a) {
	return {$: 'WaitingForInput', a: a};
};
var $author$project$Main$WalletDiscovered = function (a) {
	return {$: 'WalletDiscovered', a: a};
};
var $author$project$Main$WalletLoading = function (a) {
	return {$: 'WalletLoading', a: a};
};
var $author$project$Main$WalletWithChangeAddress = function (a) {
	return {$: 'WalletWithChangeAddress', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$DataPayloadTooShort = function (a) {
	return {$: 'DataPayloadTooShort', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$ExcessPadding = {$: 'ExcessPadding'};
var $elm_cardano$bech32$Bech32$Decode$InternalError = function (a) {
	return {$: 'InternalError', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$InvalidChecksum = {$: 'InvalidChecksum'};
var $elm_cardano$bech32$Bech32$Decode$NonZeroPadding = {$: 'NonZeroPadding'};
var $elm_cardano$bech32$Bech32$Decode$PrefixTooShort = function (a) {
	return {$: 'PrefixTooShort', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$UnexpectedCharacterInPayload = function (a) {
	return {$: 'UnexpectedCharacterInPayload', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$UnexpectedCharacterInPrefix = function (a) {
	return {$: 'UnexpectedCharacterInPrefix', a: a};
};
var $elm_cardano$bech32$Bech32$Decode$alphabet = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, c) {
				return _Utils_Tuple2(c, i);
			}),
		$elm$core$String$toList($elm_cardano$bech32$Bech32$Internal$alphabet)));
var $elm_cardano$bech32$Bech32$Internal$checksumLength = 6;
var $elm_cardano$bech32$Bech32$Decode$MissingSeparator = {$: 'MissingSeparator'};
var $elm_cardano$bech32$Bech32$Decode$splitFromEnd = F2(
	function (sep, str) {
		var last = function (xs) {
			last:
			while (true) {
				if (!xs.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					if (!xs.b.b) {
						var i = xs.a;
						return $elm$core$Maybe$Just(i);
					} else {
						var tail = xs.b;
						var $temp$xs = tail;
						xs = $temp$xs;
						continue last;
					}
				}
			}
		};
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Err($elm_cardano$bech32$Bech32$Decode$MissingSeparator),
			A2(
				$elm$core$Maybe$map,
				function (i) {
					return $elm$core$Result$Ok(
						{
							payload: A2($elm$core$String$dropLeft, i + 1, str),
							prefix: A2($elm$core$String$left, i, str)
						});
				},
				last(
					A2($elm$core$String$indexes, sep, str))));
	});
var $elm_cardano$bech32$Bech32$Internal$maxByte = 255;
var $elm_cardano$bech32$Bech32$Internal$nextBytes = F3(
	function (value, encoder, bits0) {
		nextBytes:
		while (true) {
			if (_Utils_cmp(bits0, $elm_cardano$bech32$Bech32$Internal$byteSize) > -1) {
				var bits = bits0 - $elm_cardano$bech32$Bech32$Internal$byteSize;
				var word = $elm_cardano$bech32$Bech32$Internal$maxByte & (value >> bits);
				var $temp$value = value,
					$temp$encoder = $elm$bytes$Bytes$Encode$sequence(
					_List_fromArray(
						[
							encoder,
							$elm$bytes$Bytes$Encode$unsignedInt8(word)
						])),
					$temp$bits0 = bits;
				value = $temp$value;
				encoder = $temp$encoder;
				bits0 = $temp$bits0;
				continue nextBytes;
			} else {
				return _Utils_Tuple2(encoder, bits0);
			}
		}
	});
var $elm_cardano$bech32$Bech32$Internal$wordsToBytes = F3(
	function (excessPadding, nonZeroPadding, words) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (word, _v1) {
					var value0 = _v1.a;
					var bits0 = _v1.b;
					var bytes0 = _v1.c;
					var value = word | (value0 << $elm_cardano$bech32$Bech32$Internal$wordSize);
					var _v2 = A3($elm_cardano$bech32$Bech32$Internal$nextBytes, value, bytes0, bits0 + $elm_cardano$bech32$Bech32$Internal$wordSize);
					var bytes = _v2.a;
					var bits = _v2.b;
					return _Utils_Tuple3(value, bits, bytes);
				}),
			_Utils_Tuple3(
				0,
				0,
				$elm$bytes$Bytes$Encode$sequence(_List_Nil)),
			words);
		var finalValue = _v0.a;
		var finalBits = _v0.b;
		var finalBytes = _v0.c;
		if (_Utils_cmp(finalBits, $elm_cardano$bech32$Bech32$Internal$wordSize) > -1) {
			return $elm$core$Result$Err(excessPadding);
		} else {
			var padding = $elm_cardano$bech32$Bech32$Internal$maxByte & (finalValue << ($elm_cardano$bech32$Bech32$Internal$byteSize - finalBits));
			return (!(!padding)) ? $elm$core$Result$Err(nonZeroPadding) : $elm$core$Result$Ok(
				$elm$bytes$Bytes$Encode$encode(finalBytes));
		}
	});
var $elm_cardano$bech32$Bech32$Decode$decode = function (rawInput) {
	return A2(
		$elm$core$Result$andThen,
		function (_v1) {
			var prefix = _v1.prefix;
			var payload = _v1.payload;
			return A2(
				$elm$core$Result$map,
				function (data) {
					return {data: data, prefix: prefix};
				},
				A2(
					$elm$core$Result$andThen,
					function (_v4) {
						var chk = _v4.a;
						var words = _v4.b;
						return (chk !== 1) ? $elm$core$Result$Err($elm_cardano$bech32$Bech32$Decode$InvalidChecksum) : A2(
							$elm$core$Result$mapError,
							$elm_cardano$bech32$Bech32$Decode$InternalError,
							A3(
								$elm_cardano$bech32$Bech32$Internal$wordsToBytes,
								$elm_cardano$bech32$Bech32$Decode$ExcessPadding,
								$elm_cardano$bech32$Bech32$Decode$NonZeroPadding,
								$elm$core$List$reverse(words)));
					},
					A2(
						$elm$core$Result$andThen,
						function (chk0) {
							return A3(
								$elm$core$String$foldl,
								function (c) {
									return $elm$core$Result$andThen(
										function (_v2) {
											var chk = _v2.a;
											var words = _v2.b;
											var cursor = _v2.c;
											var _v3 = A2($elm$core$Dict$get, c, $elm_cardano$bech32$Bech32$Decode$alphabet);
											if (_v3.$ === 'Nothing') {
												return $elm$core$Result$Err(
													$elm_cardano$bech32$Bech32$Decode$UnexpectedCharacterInPayload(
														{culprit: c}));
											} else {
												var w = _v3.a;
												var newChk = $elm_cardano$bech32$Bech32$Internal$polymodStep(chk) ^ w;
												var isChecksum = cursor <= 0;
												return $elm$core$Result$Ok(
													isChecksum ? _Utils_Tuple3(newChk, words, cursor) : _Utils_Tuple3(
														newChk,
														A2($elm$core$List$cons, w, words),
														cursor - 1));
											}
										});
								},
								$elm$core$Result$Ok(
									_Utils_Tuple3(
										chk0,
										_List_Nil,
										$elm$core$String$length(payload) - $elm_cardano$bech32$Bech32$Internal$checksumLength)),
								payload);
						},
						A2(
							$elm$core$Result$mapError,
							function (c) {
								return $elm_cardano$bech32$Bech32$Decode$UnexpectedCharacterInPrefix(
									{culprit: c});
							},
							$elm_cardano$bech32$Bech32$Internal$checksum(prefix)))));
		},
		A2(
			$elm$core$Result$andThen,
			function (_v0) {
				var prefix = _v0.prefix;
				var payload = _v0.payload;
				return ($elm$core$String$length(prefix) < 1) ? $elm$core$Result$Err(
					$elm_cardano$bech32$Bech32$Decode$PrefixTooShort(
						{currentLength: 0, minimum: 1})) : ((_Utils_cmp(
					$elm$core$String$length(payload),
					$elm_cardano$bech32$Bech32$Internal$checksumLength) < 0) ? $elm$core$Result$Err(
					$elm_cardano$bech32$Bech32$Decode$DataPayloadTooShort(
						{
							currentLength: $elm$core$String$length(payload),
							minimum: $elm_cardano$bech32$Bech32$Internal$checksumLength
						})) : $elm$core$Result$Ok(
					{payload: payload, prefix: prefix}));
			},
			A2(
				$elm_cardano$bech32$Bech32$Decode$splitFromEnd,
				'1',
				$elm$core$String$toLower(rawInput))));
};
var $author$project$Cardano$Address$Reward = function (a) {
	return {$: 'Reward', a: a};
};
var $author$project$Cardano$Address$StakeAddress = F2(
	function (networkId, stakeCredential) {
		return {networkId: networkId, stakeCredential: stakeCredential};
	});
var $author$project$Cardano$Address$StakeCredentialPointer = F3(
	function (slotNumber, transactionIndex, certificateIndex) {
		return {certificateIndex: certificateIndex, slotNumber: slotNumber, transactionIndex: transactionIndex};
	});
var $author$project$Cardano$Address$InlineCredential = function (a) {
	return {$: 'InlineCredential', a: a};
};
var $author$project$Cardano$Address$Shelley = function (a) {
	return {$: 'Shelley', a: a};
};
var $author$project$Cardano$Address$base = F3(
	function (networkId, paymentCredential, inlineStakeCredential) {
		return $author$project$Cardano$Address$Shelley(
			{
				networkId: networkId,
				paymentCredential: paymentCredential,
				stakeCredential: $elm$core$Maybe$Just(
					$author$project$Cardano$Address$InlineCredential(inlineStakeCredential))
			});
	});
var $author$project$Cardano$Address$enterprise = F2(
	function (networkId, credentials) {
		return $author$project$Cardano$Address$Shelley(
			{
				networkId: networkId,
				paymentCredential: $author$project$Cardano$Address$VKeyHash(credentials),
				stakeCredential: $elm$core$Maybe$Nothing
			});
	});
function $author$project$Word7$cyclic$getWord7s() {
	return A2(
		$elm$bytes$Bytes$Decode$andThen,
		function (i) {
			var _v0 = i & 128;
			if (_v0 === 128) {
				return A2(
					$elm$bytes$Bytes$Decode$map,
					function (tail) {
						return A2($elm$core$List$cons, i, tail);
					},
					$author$project$Word7$cyclic$getWord7s());
			} else {
				return $elm$bytes$Bytes$Decode$succeed(
					_List_fromArray(
						[i]));
			}
		},
		$elm$bytes$Bytes$Decode$unsignedInt8);
}
try {
	var $author$project$Word7$getWord7s = $author$project$Word7$cyclic$getWord7s();
	$author$project$Word7$cyclic$getWord7s = function () {
		return $author$project$Word7$getWord7s;
	};
} catch ($) {
	throw 'Some top-level definitions from `Word7` are causing infinite recursion:\n\n  ┌─────┐\n  │    getWord7s\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Word7$fromBytes = function () {
	var word7sToInt = A2(
		$elm$core$List$foldl,
		F2(
			function (w, i) {
				return w | (i << 7);
			}),
		0);
	return A2($elm$bytes$Bytes$Decode$map, word7sToInt, $author$project$Word7$getWord7s);
}();
var $elm$bytes$Bytes$Decode$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v3 = A2(decodeA, bites, offset);
					var aOffset = _v3.a;
					var a = _v3.b;
					var _v4 = A2(decodeB, bites, aOffset);
					var bOffset = _v4.a;
					var b = _v4.b;
					var _v5 = A2(decodeC, bites, bOffset);
					var cOffset = _v5.a;
					var c = _v5.b;
					return _Utils_Tuple2(
						cOffset,
						A3(func, a, b, c));
				}));
	});
var $author$project$Cardano$Address$Mainnet = {$: 'Mainnet'};
var $author$project$Cardano$Address$networkIdFromHeader = function (header) {
	var _v0 = 15 & header;
	switch (_v0) {
		case 0:
			return $author$project$Cardano$Address$Testnet;
		case 1:
			return $author$project$Cardano$Address$Mainnet;
		default:
			var n = _v0;
			return _Debug_todo(
				'Cardano.Address',
				{
					start: {line: 725, column: 13},
					end: {line: 725, column: 23}
				})(
				'Unrecognized network id:' + $elm$core$String$fromInt(n));
	}
};
var $author$project$Cardano$Address$PointerCredential = function (a) {
	return {$: 'PointerCredential', a: a};
};
var $author$project$Cardano$Address$pointer = F3(
	function (networkId, paymentCredential, p) {
		return $author$project$Cardano$Address$Shelley(
			{
				networkId: networkId,
				paymentCredential: paymentCredential,
				stakeCredential: $elm$core$Maybe$Just(
					$author$project$Cardano$Address$PointerCredential(p))
			});
	});
var $author$project$Cardano$Address$script = F2(
	function (networkId, credentials) {
		return $author$project$Cardano$Address$Shelley(
			{
				networkId: networkId,
				paymentCredential: $author$project$Cardano$Address$ScriptHash(credentials),
				stakeCredential: $elm$core$Maybe$Nothing
			});
	});
var $author$project$Cardano$Address$decodeBytes = function (bytesCopy) {
	return A2(
		$elm$bytes$Bytes$Decode$andThen,
		function (header) {
			var _v0 = header >> 4;
			switch (_v0) {
				case 0:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						F2(
							function (payment, stake) {
								return A3(
									$author$project$Cardano$Address$base,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									$author$project$Cardano$Address$VKeyHash(payment),
									$author$project$Cardano$Address$VKeyHash(stake));
							}),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 1:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						F2(
							function (payment, stake) {
								return A3(
									$author$project$Cardano$Address$base,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									$author$project$Cardano$Address$ScriptHash(payment),
									$author$project$Cardano$Address$VKeyHash(stake));
							}),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 2:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						F2(
							function (payment, stake) {
								return A3(
									$author$project$Cardano$Address$base,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									$author$project$Cardano$Address$VKeyHash(payment),
									$author$project$Cardano$Address$ScriptHash(stake));
							}),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 3:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						F2(
							function (payment, stake) {
								return A3(
									$author$project$Cardano$Address$base,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									$author$project$Cardano$Address$ScriptHash(payment),
									$author$project$Cardano$Address$ScriptHash(stake));
							}),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 4:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						function (payment) {
							return A2(
								$author$project$Cardano$Address$pointer,
								$author$project$Cardano$Address$networkIdFromHeader(header),
								$author$project$Cardano$Address$VKeyHash(payment));
						},
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A4($elm$bytes$Bytes$Decode$map3, $author$project$Cardano$Address$StakeCredentialPointer, $author$project$Word7$fromBytes, $author$project$Word7$fromBytes, $author$project$Word7$fromBytes));
				case 5:
					return A3(
						$elm$bytes$Bytes$Decode$map2,
						function (payment) {
							return A2(
								$author$project$Cardano$Address$pointer,
								$author$project$Cardano$Address$networkIdFromHeader(header),
								$author$project$Cardano$Address$ScriptHash(payment));
						},
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)),
						A4($elm$bytes$Bytes$Decode$map3, $author$project$Cardano$Address$StakeCredentialPointer, $author$project$Word7$fromBytes, $author$project$Word7$fromBytes, $author$project$Word7$fromBytes));
				case 6:
					return A2(
						$elm$bytes$Bytes$Decode$map,
						$author$project$Cardano$Address$enterprise(
							$author$project$Cardano$Address$networkIdFromHeader(header)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 7:
					return A2(
						$elm$bytes$Bytes$Decode$map,
						$author$project$Cardano$Address$script(
							$author$project$Cardano$Address$networkIdFromHeader(header)),
						A2(
							$elm$bytes$Bytes$Decode$map,
							$author$project$Bytes$Comparable$fromBytes,
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 8:
					return A2(
						$elm$bytes$Bytes$Decode$map,
						$elm$core$Basics$always(
							$author$project$Cardano$Address$Byron(
								$author$project$Bytes$Comparable$fromBytes(bytesCopy))),
						$elm$bytes$Bytes$Decode$bytes(
							$elm$bytes$Bytes$width(bytesCopy) - 1));
				case 14:
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (cred) {
							return $author$project$Cardano$Address$Reward(
								A2(
									$author$project$Cardano$Address$StakeAddress,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									cred));
						},
						A2(
							$elm$bytes$Bytes$Decode$map,
							A2($elm$core$Basics$composeL, $author$project$Cardano$Address$VKeyHash, $author$project$Bytes$Comparable$fromBytes),
							$elm$bytes$Bytes$Decode$bytes(28)));
				case 15:
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (cred) {
							return $author$project$Cardano$Address$Reward(
								A2(
									$author$project$Cardano$Address$StakeAddress,
									$author$project$Cardano$Address$networkIdFromHeader(header),
									cred));
						},
						A2(
							$elm$bytes$Bytes$Decode$map,
							A2($elm$core$Basics$composeL, $author$project$Cardano$Address$ScriptHash, $author$project$Bytes$Comparable$fromBytes),
							$elm$bytes$Bytes$Decode$bytes(28)));
				default:
					return $elm$bytes$Bytes$Decode$fail;
			}
		},
		$elm$bytes$Bytes$Decode$unsignedInt8);
};
var $author$project$Cardano$Address$fromBech32 = function (str) {
	var _v0 = $elm_cardano$bech32$Bech32$Decode$decode(str);
	if (_v0.$ === 'Err') {
		return $elm$core$Maybe$Nothing;
	} else {
		var prefix = _v0.a.prefix;
		var data = _v0.a.data;
		return A2(
			$elm$core$List$member,
			prefix,
			_List_fromArray(
				['byron', 'addr', 'addr_test', 'stake', 'stake_test'])) ? A2(
			$elm$bytes$Bytes$Decode$decode,
			$author$project$Cardano$Address$decodeBytes(data),
			data) : $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$Address$fromBytes = function (bytes) {
	var actualBytes = $author$project$Bytes$Comparable$toBytes(bytes);
	return A2(
		$elm$bytes$Bytes$Decode$decode,
		$author$project$Cardano$Address$decodeBytes(actualBytes),
		actualBytes);
};
var $author$project$Cardano$Address$fromString = function (str) {
	var _v0 = $author$project$Cardano$Address$fromBech32(str);
	if (_v0.$ === 'Just') {
		var addr = _v0.a;
		return $elm$core$Maybe$Just(addr);
	} else {
		return A2(
			$elm$core$Maybe$andThen,
			$author$project$Cardano$Address$fromBytes,
			$author$project$Bytes$Comparable$fromHex(str));
	}
};
var $author$project$Main$maybeReferenceWalletAddress = $author$project$Cardano$Address$fromString($author$project$Main$referenceWalletAddressText);
var $author$project$Cardano$Script$Reference = function (a) {
	return {$: 'Reference', a: a};
};
var $author$project$Cardano$Script$taggedEncoder = function (script) {
	if (script.$ === 'Native') {
		var nativeScript = script.a;
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			_List_fromArray(
				[
					$elm_toulouse$cbor$Cbor$Encode$int(0),
					$author$project$Cardano$Script$encodeNativeScript(nativeScript)
				]));
	} else {
		var plutusScript = script.a.a;
		return $elm_toulouse$cbor$Cbor$Encode$sequence(
			_List_fromArray(
				[
					$author$project$Cardano$Script$encodePlutusVersion(plutusScript.version),
					$elm_toulouse$cbor$Cbor$Encode$bytes(
					$elm_toulouse$cbor$Cbor$Encode$encode(
						$elm_toulouse$cbor$Cbor$Encode$bytes(
							$author$project$Bytes$Comparable$toBytes(plutusScript.flatBytes))))
				]));
	}
};
var $author$project$Cardano$Script$toCbor = function (script) {
	return $elm_toulouse$cbor$Cbor$Encode$sequence(
		_List_fromArray(
			[
				$elm_toulouse$cbor$Cbor$Encode$length(2),
				$author$project$Cardano$Script$taggedEncoder(script)
			]));
};
var $author$project$Cardano$Script$refFromScript = function (script) {
	return $author$project$Cardano$Script$Reference(
		{
			bytes: $author$project$Bytes$Comparable$fromBytes(
				$elm_toulouse$cbor$Cbor$Encode$encode(
					$author$project$Cardano$Script$toCbor(script))),
			scriptHash: $author$project$Cardano$Script$hash(script)
		});
};
var $author$project$Main$scriptBytesToResult = function (mSS) {
	var _v0 = $author$project$Bytes$Comparable$fromHex(mSS);
	if (_v0.$ === 'Just') {
		var x = _v0.a;
		return $elm$core$Result$Ok(x);
	} else {
		return $elm$core$Result$Err('error converting mint script into bytes');
	}
};
var $author$project$Main$plutusScriptToResult = function (mMSB) {
	return A2(
		$elm$core$Result$map,
		function (x) {
			return A2($author$project$Cardano$Script$plutusScriptFromBytes, $author$project$Cardano$Script$PlutusV3, x);
		},
		$author$project$Main$scriptBytesToResult(mMSB));
};
var $author$project$Main$scriptToResult = function (mMSB) {
	return A2(
		$elm$core$Result$map,
		$author$project$Cardano$Script$Plutus,
		$author$project$Main$plutusScriptToResult(mMSB));
};
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Main$convertReferenceScriptResponseIntoListOfUTxOReferenceOutputPairs = function (listOfMaestroResponses) {
	var _v0 = $author$project$Main$maybeReferenceWalletAddress;
	if (_v0.$ === 'Just') {
		var referenceWalletAddress = _v0.a;
		return A2(
			$elm$core$List$map,
			function (maestroResponse) {
				return _Utils_Tuple2(
					{
						outputIndex: maestroResponse.index,
						transactionId: $author$project$Bytes$Comparable$fromHexUnchecked(maestroResponse.txId)
					},
					{
						address: referenceWalletAddress,
						amount: $author$project$Main$threeAda,
						datumOption: A2(
							$elm$core$Maybe$map,
							function (x) {
								return $author$project$Cardano$Utxo$datumValueFromData(
									$author$project$Cardano$Data$Bytes(x));
							},
							$author$project$Bytes$Comparable$fromHex(maestroResponse.datum)),
						referenceScript: $elm$core$Result$toMaybe(
							A2(
								$elm$core$Result$map,
								$author$project$Cardano$Script$refFromScript,
								$author$project$Main$scriptToResult(maestroResponse.referenceScriptHex)))
					});
			},
			listOfMaestroResponses);
	} else {
		return _List_Nil;
	}
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Cardano$Cip30$ApiError = function (a) {
	return {$: 'ApiError', a: a};
};
var $author$project$Cardano$Cip30$UnhandledResponseType = function (a) {
	return {$: 'UnhandledResponseType', a: a};
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $author$project$Cardano$Cip30$ApiResponse = F2(
	function (a, b) {
		return {$: 'ApiResponse', a: a, b: b};
	});
var $author$project$Cardano$Cip30$ChangeAddress = function (a) {
	return {$: 'ChangeAddress', a: a};
};
var $author$project$Cardano$Cip30$Collateral = function (a) {
	return {$: 'Collateral', a: a};
};
var $author$project$Cardano$Cip30$Extensions = function (a) {
	return {$: 'Extensions', a: a};
};
var $author$project$Cardano$Cip30$NetworkId = function (a) {
	return {$: 'NetworkId', a: a};
};
var $author$project$Cardano$Cip30$RewardAddresses = function (a) {
	return {$: 'RewardAddresses', a: a};
};
var $author$project$Cardano$Cip30$SignedData = function (a) {
	return {$: 'SignedData', a: a};
};
var $author$project$Cardano$Cip30$SignedTx = function (a) {
	return {$: 'SignedTx', a: a};
};
var $author$project$Cardano$Cip30$SubmittedTx = function (a) {
	return {$: 'SubmittedTx', a: a};
};
var $author$project$Cardano$Cip30$UnusedAddresses = function (a) {
	return {$: 'UnusedAddresses', a: a};
};
var $author$project$Cardano$Cip30$UsedAddresses = function (a) {
	return {$: 'UsedAddresses', a: a};
};
var $author$project$Cardano$Cip30$WalletBalance = function (a) {
	return {$: 'WalletBalance', a: a};
};
var $author$project$Cardano$Cip30$WalletUtxos = function (a) {
	return {$: 'WalletUtxos', a: a};
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$Cardano$Cip30$addressDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			$author$project$Cardano$Address$fromBytes,
			$author$project$Bytes$Comparable$fromHex(str));
		if (_v0.$ === 'Just') {
			var address = _v0.a;
			return $elm$json$Json$Decode$succeed(address);
		} else {
			return $elm$json$Json$Decode$fail('Invalid address: ' + str);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Cardano$Cip30$DataSignature = F2(
	function (signature, key) {
		return {key: key, signature: signature};
	});
var $author$project$Cardano$Cip30$hexCborDecoder = function (decoder) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (str) {
			var _v0 = $jxxcarlson$hex$Hex$Convert$toBytes(str);
			if (_v0.$ === 'Just') {
				var bytes = _v0.a;
				var _v1 = A2($elm_toulouse$cbor$Cbor$Decode$decode, decoder, bytes);
				if (_v1.$ === 'Just') {
					var a = _v1.a;
					return $elm$json$Json$Decode$succeed(a);
				} else {
					return $elm$json$Json$Decode$fail('Failed to decode CBOR');
				}
			} else {
				return $elm$json$Json$Decode$fail('Invalid hex bytes');
			}
		},
		$elm$json$Json$Decode$string);
};
var $author$project$Cardano$Cip30$dataSignatureDecoder = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Cardano$Cip30$DataSignature,
	A2(
		$elm$json$Json$Decode$field,
		'signature',
		$author$project$Cardano$Cip30$hexCborDecoder($elm_toulouse$cbor$Cbor$Decode$any)),
	A2(
		$elm$json$Json$Decode$field,
		'key',
		$author$project$Cardano$Cip30$hexCborDecoder($elm_toulouse$cbor$Cbor$Decode$any)));
var $author$project$Cardano$Transaction$WitnessSet = F8(
	function (vkeywitness, nativeScripts, bootstrapWitness, plutusV1Script, plutusData, redeemer, plutusV2Script, plutusV3Script) {
		return {bootstrapWitness: bootstrapWitness, nativeScripts: nativeScripts, plutusData: plutusData, plutusV1Script: plutusV1Script, plutusV2Script: plutusV2Script, plutusV3Script: plutusV3Script, redeemer: redeemer, vkeywitness: vkeywitness};
	});
var $author$project$Cardano$Transaction$decodeBootstrapWitness = A2(
	$elm_toulouse$cbor$Cbor$Decode$tuple,
	F4(
		function (pubkey, sig, chainCode, attr) {
			return {
				attributes: $author$project$Bytes$Comparable$fromBytes(attr),
				chainCode: $author$project$Bytes$Comparable$fromBytes(chainCode),
				publicKey: $author$project$Bytes$Comparable$fromBytes(pubkey),
				signature: $author$project$Bytes$Comparable$fromBytes(sig)
			};
		}),
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$elems,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes),
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes),
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes),
					$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes))))));
var $author$project$Cardano$Transaction$decodeVKeyWitness = A2(
	$elm_toulouse$cbor$Cbor$Decode$tuple,
	F2(
		function (vkey, sig) {
			return {
				signature: $author$project$Bytes$Comparable$fromBytes(sig),
				vkey: $author$project$Bytes$Comparable$fromBytes(vkey)
			};
		}),
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$elems,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes),
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$bytes))));
var $elm_toulouse$cbor$Cbor$Decode$fields = $elm_toulouse$cbor$Cbor$Decode$succeed;
var $elm_toulouse$cbor$Cbor$Decode$extract = function (needle) {
	var go = F2(
		function (rest, xs) {
			go:
			while (true) {
				if (!xs.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var _v1 = xs.a;
					var k = _v1.a;
					var v = _v1.b;
					var tail = xs.b;
					if (_Utils_eq(needle, k)) {
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								v,
								_Utils_ap(rest, tail)));
					} else {
						var $temp$rest = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(k, v),
							rest),
							$temp$xs = tail;
						rest = $temp$rest;
						xs = $temp$xs;
						continue go;
					}
				}
			}
		});
	return go(_List_Nil);
};
var $elm_toulouse$cbor$Cbor$Decode$RecordStep = function (a) {
	return {$: 'RecordStep', a: a};
};
var $elm_toulouse$cbor$Cbor$Decode$withRecordStep = F2(
	function (_with, st) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$andThen,
			function (inner) {
				if (inner.$ === 'TupleStep') {
					return $elm_toulouse$cbor$Cbor$Decode$fail;
				} else {
					var r = inner.a;
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$map,
						$elm_toulouse$cbor$Cbor$Decode$RecordStep,
						_with(r));
				}
			},
			st);
	});
var $elm_toulouse$cbor$Cbor$Decode$optionalField = F2(
	function (want, decodeField) {
		return $elm_toulouse$cbor$Cbor$Decode$withRecordStep(
			function (st) {
				var _v0 = A2($elm_toulouse$cbor$Cbor$Decode$extract, want, st.rest);
				if (_v0.$ === 'Just') {
					var _v1 = _v0.a;
					var bs = _v1.a;
					var rest = _v1.b;
					return A2(
						$elm$core$Maybe$withDefault,
						$elm_toulouse$cbor$Cbor$Decode$fail,
						A2(
							$elm$core$Maybe$map,
							function (v) {
								return $elm_toulouse$cbor$Cbor$Decode$succeed(
									{
										rest: rest,
										steps: st.steps(
											$elm$core$Maybe$Just(v))
									});
							},
							A2($elm_toulouse$cbor$Cbor$Decode$decode, decodeField, bs)));
				} else {
					return $elm_toulouse$cbor$Cbor$Decode$succeed(
						{
							rest: st.rest,
							steps: st.steps($elm$core$Maybe$Nothing)
						});
				}
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$record = F3(
	function (decodeKey, steps, decodeNext) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$andThen,
			function (result) {
				if (result.$ === 'RecordStep') {
					var st = result.a;
					return $elm_toulouse$cbor$Cbor$Decode$succeed(st.steps);
				} else {
					return $elm_toulouse$cbor$Cbor$Decode$fail;
				}
			},
			A2(
				$elm_toulouse$cbor$Cbor$Decode$andThen,
				function (rest) {
					return decodeNext(
						$elm_toulouse$cbor$Cbor$Decode$RecordStep(
							{rest: rest, steps: steps}));
				},
				A2($elm_toulouse$cbor$Cbor$Decode$associativeList, decodeKey, $elm_toulouse$cbor$Cbor$Decode$raw)));
	});
var $elm_toulouse$cbor$Cbor$Decode$tagged = F2(
	function (t, a) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$andThen,
			function (t_) {
				return _Utils_eq(t, t_) ? A3(
					$elm_toulouse$cbor$Cbor$Decode$map2,
					$elm$core$Tuple$pair,
					$elm_toulouse$cbor$Cbor$Decode$succeed(t),
					a) : $elm_toulouse$cbor$Cbor$Decode$fail;
			},
			$elm_toulouse$cbor$Cbor$Decode$tag);
	});
var $author$project$Cbor$Decode$Extra$set = function (elemDecoder) {
	return $elm_toulouse$cbor$Cbor$Decode$oneOf(
		_List_fromArray(
			[
				$elm_toulouse$cbor$Cbor$Decode$list(elemDecoder),
				A2(
				$elm_toulouse$cbor$Cbor$Decode$map,
				$elm$core$Tuple$second,
				A2(
					$elm_toulouse$cbor$Cbor$Decode$tagged,
					$elm_toulouse$cbor$Cbor$Tag$Unknown(258),
					$elm_toulouse$cbor$Cbor$Decode$list(elemDecoder)))
			]));
};
var $author$project$Cardano$Transaction$decodeWitnessSet = A3(
	$elm_toulouse$cbor$Cbor$Decode$record,
	$elm_toulouse$cbor$Cbor$Decode$int,
	$author$project$Cardano$Transaction$WitnessSet,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$fields,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$elm_toulouse$cbor$Cbor$Decode$optionalField,
				0,
				$elm_toulouse$cbor$Cbor$Decode$oneOf(
					_List_fromArray(
						[
							$author$project$Cbor$Decode$Extra$set($author$project$Cardano$Transaction$decodeVKeyWitness),
							$author$project$Cbor$Decode$Extra$failWith('Failed to decode KVeyWitness list')
						]))),
			A2(
				$elm$core$Basics$composeR,
				A2(
					$elm_toulouse$cbor$Cbor$Decode$optionalField,
					1,
					$elm_toulouse$cbor$Cbor$Decode$oneOf(
						_List_fromArray(
							[
								$author$project$Cbor$Decode$Extra$set($author$project$Cardano$Script$decodeNativeScript),
								$author$project$Cbor$Decode$Extra$failWith('Failed to decode NativeScript list')
							]))),
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm_toulouse$cbor$Cbor$Decode$optionalField,
						2,
						$elm_toulouse$cbor$Cbor$Decode$oneOf(
							_List_fromArray(
								[
									$author$project$Cbor$Decode$Extra$set($author$project$Cardano$Transaction$decodeBootstrapWitness),
									$author$project$Cbor$Decode$Extra$failWith('Failed to decode bootstrap witness')
								]))),
					A2(
						$elm$core$Basics$composeR,
						A2(
							$elm_toulouse$cbor$Cbor$Decode$optionalField,
							3,
							$elm_toulouse$cbor$Cbor$Decode$oneOf(
								_List_fromArray(
									[
										$author$project$Cbor$Decode$Extra$set(
										A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Decode$bytes)),
										$author$project$Cbor$Decode$Extra$failWith('Failed to decode plutus v1 script')
									]))),
						A2(
							$elm$core$Basics$composeR,
							A2(
								$elm_toulouse$cbor$Cbor$Decode$optionalField,
								4,
								$elm_toulouse$cbor$Cbor$Decode$oneOf(
									_List_fromArray(
										[
											$author$project$Cbor$Decode$Extra$set($author$project$Cardano$Data$fromCbor),
											$author$project$Cbor$Decode$Extra$failWith('Failed to decode plutus data')
										]))),
							A2(
								$elm$core$Basics$composeR,
								A2(
									$elm_toulouse$cbor$Cbor$Decode$optionalField,
									5,
									$elm_toulouse$cbor$Cbor$Decode$oneOf(
										_List_fromArray(
											[
												$elm_toulouse$cbor$Cbor$Decode$list($author$project$Cardano$Redeemer$fromCborArray),
												A2(
												$elm_toulouse$cbor$Cbor$Decode$map,
												$elm$core$List$map(
													function (_v0) {
														var _v1 = _v0.a;
														var tag = _v1.a;
														var index = _v1.b;
														var _v2 = _v0.b;
														var data = _v2.a;
														var exUnits = _v2.b;
														return A4($author$project$Cardano$Redeemer$Redeemer, tag, index, data, exUnits);
													}),
												A2(
													$elm_toulouse$cbor$Cbor$Decode$associativeList,
													A2(
														$elm_toulouse$cbor$Cbor$Decode$tuple,
														$elm$core$Tuple$pair,
														A2(
															$elm$core$Basics$composeR,
															$elm_toulouse$cbor$Cbor$Decode$elems,
															A2(
																$elm$core$Basics$composeR,
																$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Redeemer$tagFromCbor),
																$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$int)))),
													A2(
														$elm_toulouse$cbor$Cbor$Decode$tuple,
														$elm$core$Tuple$pair,
														A2(
															$elm$core$Basics$composeR,
															$elm_toulouse$cbor$Cbor$Decode$elems,
															A2(
																$elm$core$Basics$composeR,
																$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Data$fromCbor),
																$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Redeemer$exUnitsFromCbor)))))),
												$author$project$Cbor$Decode$Extra$failWith('Failed to decode redeemer')
											]))),
								A2(
									$elm$core$Basics$composeR,
									A2(
										$elm_toulouse$cbor$Cbor$Decode$optionalField,
										6,
										$elm_toulouse$cbor$Cbor$Decode$oneOf(
											_List_fromArray(
												[
													$author$project$Cbor$Decode$Extra$set(
													A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Decode$bytes)),
													$author$project$Cbor$Decode$Extra$failWith('Failed to decode plutus v2 script')
												]))),
									A2(
										$elm_toulouse$cbor$Cbor$Decode$optionalField,
										7,
										$elm_toulouse$cbor$Cbor$Decode$oneOf(
											_List_fromArray(
												[
													$author$project$Cbor$Decode$Extra$set(
													A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Decode$bytes)),
													$author$project$Cbor$Decode$Extra$failWith('Failed to decode plutus v3 script')
												]))))))))))));
var $author$project$Cardano$Cip30$extensionDecoder = A2($elm$json$Json$Decode$field, 'cip', $elm$json$Json$Decode$int);
var $author$project$Cardano$Value$Value = F2(
	function (lovelace, assets) {
		return {assets: assets, lovelace: lovelace};
	});
var $elm_toulouse$cbor$Cbor$Decode$dict = F2(
	function (key, value) {
		return A2(
			$elm_toulouse$cbor$Cbor$Decode$map,
			$elm$core$Dict$fromList,
			A2($elm_toulouse$cbor$Cbor$Decode$associativeList, key, value));
	});
var $author$project$Bytes$Map$fromCbor = function (valueDecoder) {
	return A2(
		$elm_toulouse$cbor$Cbor$Decode$map,
		$author$project$Bytes$Map$BytesMap,
		A2(
			$elm_toulouse$cbor$Cbor$Decode$dict,
			A2(
				$elm_toulouse$cbor$Cbor$Decode$map,
				A2($elm$core$Basics$composeL, $author$project$Bytes$Comparable$toHex, $author$project$Bytes$Comparable$fromBytes),
				$elm_toulouse$cbor$Cbor$Decode$bytes),
			valueDecoder));
};
var $author$project$Cardano$MultiAsset$coinsFromCbor = $author$project$Bytes$Map$fromCbor(
	$author$project$Bytes$Map$fromCbor($author$project$Cbor$Decode$Extra$natural));
var $author$project$Cardano$Value$fromCbor = $elm_toulouse$cbor$Cbor$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Cardano$Value$onlyLovelace, $author$project$Cbor$Decode$Extra$natural),
			A2(
			$elm_toulouse$cbor$Cbor$Decode$tuple,
			$author$project$Cardano$Value$Value,
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$elems,
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cbor$Decode$Extra$natural),
					$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$MultiAsset$coinsFromCbor))))
		]));
var $author$project$Cardano$Address$networkIdFromInt = function (n) {
	switch (n) {
		case 0:
			return $elm$core$Maybe$Just($author$project$Cardano$Address$Testnet);
		case 1:
			return $elm$core$Maybe$Just($author$project$Cardano$Address$Mainnet);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$Cip30$networkIdDecoder = A2(
	$elm$json$Json$Decode$andThen,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map($elm$json$Json$Decode$succeed),
		$elm$core$Maybe$withDefault(
			$elm$json$Json$Decode$fail('unknown network id'))),
	A2($elm$json$Json$Decode$map, $author$project$Cardano$Address$networkIdFromInt, $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Cardano$Utxo$DatumHash = function (a) {
	return {$: 'DatumHash', a: a};
};
var $author$project$Cardano$Utxo$decodeOutputDatum = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (_v0) {
		var datumCbor = _v0.b;
		var _v1 = A2($elm_toulouse$cbor$Cbor$Decode$decode, $author$project$Cardano$Data$fromCbor, datumCbor);
		if (_v1.$ === 'Just') {
			return $elm_toulouse$cbor$Cbor$Decode$succeed(
				$author$project$Bytes$Comparable$fromBytes(datumCbor));
		} else {
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	A2($elm_toulouse$cbor$Cbor$Decode$tagged, $elm_toulouse$cbor$Cbor$Tag$Cbor, $elm_toulouse$cbor$Cbor$Decode$bytes));
var $author$project$Cardano$Utxo$datumOptionFromCbor = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (tag) {
		switch (tag) {
			case 0:
				return A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					A2($elm$core$Basics$composeL, $author$project$Cardano$Utxo$DatumHash, $author$project$Bytes$Comparable$fromBytes),
					$elm_toulouse$cbor$Cbor$Decode$bytes);
			case 1:
				return A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					function (rawBytes) {
						return $author$project$Cardano$Utxo$DatumValue(
							{rawBytes: rawBytes});
					},
					$author$project$Cardano$Utxo$decodeOutputDatum);
			default:
				return $author$project$Cbor$Decode$Extra$failWith(
					'Unknown datum option tag: ' + $elm$core$String$fromInt(tag));
		}
	},
	A2($elm_toulouse$cbor$Cbor$Decode$ignoreThen, $elm_toulouse$cbor$Cbor$Decode$int, $elm_toulouse$cbor$Cbor$Decode$length));
var $author$project$Cardano$Address$decode = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (bytes) {
		var _v0 = A2(
			$elm$bytes$Bytes$Decode$decode,
			$author$project$Cardano$Address$decodeBytes(bytes),
			bytes);
		if (_v0.$ === 'Just') {
			var address = _v0.a;
			return $elm_toulouse$cbor$Cbor$Decode$succeed(address);
		} else {
			var _v1 = A2(
				$elm$core$Debug$log,
				'Failed to decode address',
				$author$project$Bytes$Comparable$toHex(
					$author$project$Bytes$Comparable$fromBytes(bytes)));
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	$elm_toulouse$cbor$Cbor$Decode$bytes);
var $author$project$Bytes$Comparable$concat = F2(
	function (_v0, _v1) {
		var b1 = _v0.a;
		var b2 = _v1.a;
		return $author$project$Bytes$Comparable$Bytes(
			_Utils_ap(b1, b2));
	});
var $author$project$Cardano$Script$refFromBytes = function (bytes) {
	var rawConcat = F2(
		function (raw1, raw2) {
			return A2(
				$author$project$Bytes$Comparable$concat,
				$author$project$Bytes$Comparable$fromBytes(raw1),
				$author$project$Bytes$Comparable$fromBytes(raw2));
		});
	var taggedRawScriptDecoder = A2(
		$elm_toulouse$cbor$Cbor$Decode$ignoreThen,
		A3($elm_toulouse$cbor$Cbor$Decode$map2, rawConcat, $elm_toulouse$cbor$Cbor$Decode$raw, $elm_toulouse$cbor$Cbor$Decode$raw),
		$elm_toulouse$cbor$Cbor$Decode$length);
	var elmBytes = $author$project$Bytes$Comparable$toBytes(bytes);
	var _v0 = A2($elm_toulouse$cbor$Cbor$Decode$decode, taggedRawScriptDecoder, elmBytes);
	if (_v0.$ === 'Just') {
		var taggedScriptBytes = _v0.a;
		return $elm$core$Maybe$Just(
			$author$project$Cardano$Script$Reference(
				{
					bytes: bytes,
					scriptHash: $author$project$Bytes$Comparable$blake2b224(taggedScriptBytes)
				}));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Cardano$Utxo$decodeScriptRef = A2(
	$elm_toulouse$cbor$Cbor$Decode$andThen,
	function (_v0) {
		var scriptCbor = _v0.b;
		var _v1 = $author$project$Cardano$Script$refFromBytes(
			$author$project$Bytes$Comparable$fromBytes(scriptCbor));
		if (_v1.$ === 'Just') {
			var scriptRef = _v1.a;
			return $elm_toulouse$cbor$Cbor$Decode$succeed(scriptRef);
		} else {
			return $elm_toulouse$cbor$Cbor$Decode$fail;
		}
	},
	A2($elm_toulouse$cbor$Cbor$Decode$tagged, $elm_toulouse$cbor$Cbor$Tag$Cbor, $elm_toulouse$cbor$Cbor$Decode$bytes));
var $elm_toulouse$cbor$Cbor$Decode$field = F2(
	function (want, decodeField) {
		return $elm_toulouse$cbor$Cbor$Decode$withRecordStep(
			function (st) {
				return A2(
					$elm$core$Maybe$withDefault,
					$elm_toulouse$cbor$Cbor$Decode$fail,
					A2(
						$elm$core$Maybe$andThen,
						function (_v0) {
							var bs = _v0.a;
							var rest = _v0.b;
							return A2(
								$elm$core$Maybe$map,
								function (v) {
									return $elm_toulouse$cbor$Cbor$Decode$succeed(
										{
											rest: rest,
											steps: st.steps(v)
										});
								},
								A2($elm_toulouse$cbor$Cbor$Decode$decode, decodeField, bs));
						},
						A2($elm_toulouse$cbor$Cbor$Decode$extract, want, st.rest)));
			});
	});
var $elm_toulouse$cbor$Cbor$Decode$optionalElem = function (v) {
	return $elm_toulouse$cbor$Cbor$Decode$withTupleStep(
		function (st) {
			var ignoreElem = A3($elm_toulouse$cbor$Cbor$Decode$step, st, st.k, $elm$core$Maybe$Nothing);
			var _v0 = st.size;
			if (_v0.$ === 'Indefinite') {
				var done = _v0.a;
				if (done) {
					return $elm_toulouse$cbor$Cbor$Decode$succeed(ignoreElem);
				} else {
					var _v1 = v;
					var consumeField = _v1.a;
					var processField = _v1.b;
					return A2(
						$elm_toulouse$cbor$Cbor$Decode$Decoder,
						consumeField,
						function (t) {
							return _Utils_eq(t, $elm_toulouse$cbor$Cbor$Decode$tBREAK) ? $elm_toulouse$cbor$Bytes$Decode$Branchable$succeed(
								_Utils_update(
									ignoreElem,
									{
										size: $elm_toulouse$cbor$Cbor$Decode$Indefinite(true)
									})) : A2(
								$elm_toulouse$cbor$Bytes$Decode$Branchable$map,
								A2(
									$elm$core$Basics$composeL,
									A2($elm_toulouse$cbor$Cbor$Decode$step, st, $elm$core$Maybe$Nothing),
									$elm$core$Maybe$Just),
								processField(t));
						});
				}
			} else {
				var sz = _v0.a;
				return (sz <= 0) ? $elm_toulouse$cbor$Cbor$Decode$succeed(ignoreElem) : A2(
					$elm_toulouse$cbor$Cbor$Decode$map,
					A2(
						$elm$core$Basics$composeL,
						A2($elm_toulouse$cbor$Cbor$Decode$step, st, $elm$core$Maybe$Nothing),
						$elm$core$Maybe$Just),
					v);
			}
		});
};
var $author$project$Cardano$Utxo$decodeOutput = function () {
	var preBabbageBuilder = F3(
		function (address, amount, optionalDatum) {
			return {address: address, amount: amount, datumOption: optionalDatum, referenceScript: $elm$core$Maybe$Nothing};
		});
	var preBabbage = A2(
		$elm_toulouse$cbor$Cbor$Decode$tuple,
		preBabbageBuilder,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elems,
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Address$decode),
				A2(
					$elm$core$Basics$composeR,
					$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Value$fromCbor),
					$elm_toulouse$cbor$Cbor$Decode$optionalElem(
						A2(
							$elm_toulouse$cbor$Cbor$Decode$map,
							A2($elm$core$Basics$composeL, $author$project$Cardano$Utxo$DatumHash, $author$project$Bytes$Comparable$fromBytes),
							$elm_toulouse$cbor$Cbor$Decode$bytes))))));
	var postBabbage = A3(
		$elm_toulouse$cbor$Cbor$Decode$record,
		$elm_toulouse$cbor$Cbor$Decode$int,
		$author$project$Cardano$Utxo$Output,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$fields,
			A2(
				$elm$core$Basics$composeR,
				A2($elm_toulouse$cbor$Cbor$Decode$field, 0, $author$project$Cardano$Address$decode),
				A2(
					$elm$core$Basics$composeR,
					A2($elm_toulouse$cbor$Cbor$Decode$field, 1, $author$project$Cardano$Value$fromCbor),
					A2(
						$elm$core$Basics$composeR,
						A2($elm_toulouse$cbor$Cbor$Decode$optionalField, 2, $author$project$Cardano$Utxo$datumOptionFromCbor),
						A2($elm_toulouse$cbor$Cbor$Decode$optionalField, 3, $author$project$Cardano$Utxo$decodeScriptRef))))));
	return $elm_toulouse$cbor$Cbor$Decode$oneOf(
		_List_fromArray(
			[
				preBabbage,
				postBabbage,
				$author$project$Cbor$Decode$Extra$failWith('Fail to decode output')
			]));
}();
var $author$project$Cardano$Utxo$decodeOutputReference = A2(
	$elm_toulouse$cbor$Cbor$Decode$tuple,
	$author$project$Cardano$Utxo$OutputReference,
	A2(
		$elm$core$Basics$composeR,
		$elm_toulouse$cbor$Cbor$Decode$elems,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elem(
				A2($elm_toulouse$cbor$Cbor$Decode$map, $author$project$Bytes$Comparable$fromBytes, $elm_toulouse$cbor$Cbor$Decode$bytes)),
			$elm_toulouse$cbor$Cbor$Decode$elem($elm_toulouse$cbor$Cbor$Decode$int))));
var $author$project$Cardano$Cip30$utxoDecoder = $author$project$Cardano$Cip30$hexCborDecoder(
	A2(
		$elm_toulouse$cbor$Cbor$Decode$tuple,
		$elm$core$Tuple$pair,
		A2(
			$elm$core$Basics$composeR,
			$elm_toulouse$cbor$Cbor$Decode$elems,
			A2(
				$elm$core$Basics$composeR,
				$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Utxo$decodeOutputReference),
				$elm_toulouse$cbor$Cbor$Decode$elem($author$project$Cardano$Utxo$decodeOutput)))));
var $author$project$Cardano$Cip30$apiDecoder = F2(
	function (method, walletId) {
		switch (method) {
			case 'getExtensions':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$Extensions(r));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$list($author$project$Cardano$Cip30$extensionDecoder)));
			case 'getNetworkId':
				return A2(
					$elm$json$Json$Decode$map,
					function (n) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$NetworkId(n));
					},
					A2($elm$json$Json$Decode$field, 'response', $author$project$Cardano$Cip30$networkIdDecoder));
			case 'getUtxos':
				return A2(
					$elm$json$Json$Decode$map,
					function (utxos) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$WalletUtxos(
								A2($elm$core$Maybe$withDefault, _List_Nil, utxos)));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$nullable(
							$elm$json$Json$Decode$list($author$project$Cardano$Cip30$utxoDecoder))));
			case 'getCollateral':
				return A2(
					$elm$json$Json$Decode$map,
					function (utxos) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$Collateral(
								A2($elm$core$Maybe$withDefault, _List_Nil, utxos)));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$nullable(
							$elm$json$Json$Decode$list($author$project$Cardano$Cip30$utxoDecoder))));
			case 'getBalance':
				return A2(
					$elm$json$Json$Decode$map,
					function (b) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$WalletBalance(b));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$author$project$Cardano$Cip30$hexCborDecoder($author$project$Cardano$Value$fromCbor)));
			case 'getUsedAddresses':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$UsedAddresses(r));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$list($author$project$Cardano$Cip30$addressDecoder)));
			case 'getUnusedAddresses':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$UnusedAddresses(r));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$list($author$project$Cardano$Cip30$addressDecoder)));
			case 'getChangeAddress':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$ChangeAddress(r));
					},
					A2($elm$json$Json$Decode$field, 'response', $author$project$Cardano$Cip30$addressDecoder));
			case 'getRewardAddresses':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$RewardAddresses(r));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$elm$json$Json$Decode$list($author$project$Cardano$Cip30$addressDecoder)));
			case 'signTx':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$SignedTx(r));
					},
					A2(
						$elm$json$Json$Decode$field,
						'response',
						$author$project$Cardano$Cip30$hexCborDecoder(
							A2(
								$elm_toulouse$cbor$Cbor$Decode$map,
								function (w) {
									return A2($elm$core$Maybe$withDefault, _List_Nil, w.vkeywitness);
								},
								$author$project$Cardano$Transaction$decodeWitnessSet))));
			case 'signData':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$SignedData(r));
					},
					A2($elm$json$Json$Decode$field, 'response', $author$project$Cardano$Cip30$dataSignatureDecoder));
			case 'submitTx':
				return A2(
					$elm$json$Json$Decode$map,
					function (r) {
						return A2(
							$author$project$Cardano$Cip30$ApiResponse,
							{walletId: walletId},
							$author$project$Cardano$Cip30$SubmittedTx(
								$author$project$Bytes$Comparable$fromHexUnchecked(r)));
					},
					A2($elm$json$Json$Decode$field, 'response', $elm$json$Json$Decode$string));
			default:
				return $elm$json$Json$Decode$succeed(
					$author$project$Cardano$Cip30$UnhandledResponseType('Unknown API call: ' + method));
		}
	});
var $author$project$Cardano$Cip30$AvailableWallets = function (a) {
	return {$: 'AvailableWallets', a: a};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$map6 = _Json_map6;
var $author$project$Cardano$Cip30$descriptorDecoder = A7(
	$elm$json$Json$Decode$map6,
	F6(
		function (id, name, icon, apiVersion, isEnabled, supportedExtensions) {
			return {apiVersion: apiVersion, icon: icon, id: id, isEnabled: isEnabled, name: name, supportedExtensions: supportedExtensions};
		}),
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'icon', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'apiVersion', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'isEnabled', $elm$json$Json$Decode$bool),
	A2(
		$elm$json$Json$Decode$field,
		'supportedExtensions',
		$elm$json$Json$Decode$list($author$project$Cardano$Cip30$extensionDecoder)));
var $author$project$Cardano$Cip30$discoverDecoder = A2(
	$elm$json$Json$Decode$map,
	$author$project$Cardano$Cip30$AvailableWallets,
	A2(
		$elm$json$Json$Decode$field,
		'wallets',
		$elm$json$Json$Decode$list($author$project$Cardano$Cip30$descriptorDecoder)));
var $author$project$Cardano$Cip30$EnabledWallet = function (a) {
	return {$: 'EnabledWallet', a: a};
};
var $author$project$Cardano$Cip30$Wallet = function (a) {
	return {$: 'Wallet', a: a};
};
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$Cardano$Cip30$enableDecoder = A2(
	$elm$json$Json$Decode$map,
	$author$project$Cardano$Cip30$EnabledWallet,
	A4(
		$elm$json$Json$Decode$map3,
		F3(
			function (descriptor, api, walletHandle) {
				return $author$project$Cardano$Cip30$Wallet(
					{api: api, descriptor: descriptor, walletHandle: walletHandle});
			}),
		A2($elm$json$Json$Decode$field, 'descriptor', $author$project$Cardano$Cip30$descriptorDecoder),
		A2($elm$json$Json$Decode$field, 'api', $elm$json$Json$Decode$value),
		A2($elm$json$Json$Decode$field, 'walletHandle', $elm$json$Json$Decode$value)));
var $author$project$Cardano$Cip30$errorDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$elm$json$Json$Decode$map2,
			F2(
				function (code, info) {
					return {code: code, info: info};
				}),
			A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'info', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			function (msg) {
				return {code: 0, info: msg};
			},
			A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			function (msg) {
				return {code: 0, info: msg};
			},
			$elm$json$Json$Decode$string)
		]));
var $author$project$Cardano$Cip30$responseDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (responseType) {
		switch (responseType) {
			case 'cip30-discover':
				return $author$project$Cardano$Cip30$discoverDecoder;
			case 'cip30-enable':
				return $author$project$Cardano$Cip30$enableDecoder;
			case 'cip30-api':
				return A2(
					$elm$json$Json$Decode$andThen,
					function (method) {
						return A2(
							$elm$json$Json$Decode$andThen,
							$author$project$Cardano$Cip30$apiDecoder(method),
							A2($elm$json$Json$Decode$field, 'walletId', $elm$json$Json$Decode$string));
					},
					A2($elm$json$Json$Decode$field, 'method', $elm$json$Json$Decode$string));
			case 'cip30-error':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Cardano$Cip30$ApiError,
					A2($elm$json$Json$Decode$field, 'error', $author$project$Cardano$Cip30$errorDecoder));
			default:
				return $elm$json$Json$Decode$succeed(
					$author$project$Cardano$Cip30$UnhandledResponseType(responseType));
		}
	},
	A2($elm$json$Json$Decode$field, 'responseType', $elm$json$Json$Decode$string));
var $author$project$Cardano$TxIntent$FromWallet = function (a) {
	return {$: 'FromWallet', a: a};
};
var $author$project$Cardano$TxIntent$SendToOutput = function (a) {
	return {$: 'SendToOutput', a: a};
};
var $author$project$Bytes$Comparable$toAny = function (_v0) {
	var str = _v0.a;
	return $author$project$Bytes$Comparable$Bytes(str);
};
var $author$project$Main$credentialToData = function (credential) {
	if (credential.$ === 'VKeyHash') {
		var credentialHash = credential.a;
		return A2(
			$author$project$Cardano$Data$Constr,
			$dwayne$elm_natural$Natural$zero,
			_List_fromArray(
				[
					$author$project$Cardano$Data$Bytes(
					$author$project$Bytes$Comparable$toAny(credentialHash))
				]));
	} else {
		var credentialBytes = credential.a;
		return A2(
			$author$project$Cardano$Data$Constr,
			$dwayne$elm_natural$Natural$zero,
			_List_fromArray(
				[
					$author$project$Cardano$Data$Bytes(
					$author$project$Bytes$Comparable$toAny(credentialBytes))
				]));
	}
};
var $author$project$Main$stakeCredentialToData = function (stakeCredential) {
	if (stakeCredential.$ === 'InlineCredential') {
		var credential = stakeCredential.a;
		return A2(
			$author$project$Cardano$Data$Constr,
			$dwayne$elm_natural$Natural$zero,
			_List_fromArray(
				[
					$author$project$Main$credentialToData(credential)
				]));
	} else {
		return A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil);
	}
};
var $author$project$Main$maybeStakeCredentialToData = function (maybeStakeCredential) {
	if (maybeStakeCredential.$ === 'Just') {
		var stakeCredential = maybeStakeCredential.a;
		return A2(
			$author$project$Cardano$Data$Constr,
			$dwayne$elm_natural$Natural$zero,
			_List_fromArray(
				[
					$author$project$Main$stakeCredentialToData(stakeCredential)
				]));
	} else {
		return A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil);
	}
};
var $author$project$Main$addressToData = function (address) {
	if (address.$ === 'Shelley') {
		var networkId = address.a.networkId;
		var paymentCredential = address.a.paymentCredential;
		var stakeCredential = address.a.stakeCredential;
		return A2(
			$author$project$Cardano$Data$Constr,
			$dwayne$elm_natural$Natural$zero,
			_List_fromArray(
				[
					$author$project$Main$credentialToData(paymentCredential),
					$author$project$Main$maybeStakeCredentialToData(stakeCredential)
				]));
	} else {
		return $author$project$Cardano$Data$Int($dwayne$elm_integer$Integer$zero);
	}
};
var $author$project$Main$startMetadata = F3(
	function (wallet, name, description) {
		var _v0 = $author$project$Main$metadataScriptResult($author$project$Main$metadataScriptString);
		if (_v0.$ === 'Ok') {
			var metadataScript = _v0.a;
			var metadataScriptHash = $author$project$Cardano$Script$hash(metadataScript);
			var metadataScriptAddress = A2($author$project$Cardano$Address$script, $author$project$Cardano$Address$Testnet, metadataScriptHash);
			var metadataDatum = A2(
				$author$project$Cardano$Data$Constr,
				$dwayne$elm_natural$Natural$zero,
				_List_fromArray(
					[
						A2(
						$author$project$Cardano$Data$Constr,
						$dwayne$elm_natural$Natural$zero,
						_List_fromArray(
							[
								$author$project$Cardano$Data$Bytes(
								$author$project$Bytes$Comparable$toAny(name)),
								$author$project$Cardano$Data$Bytes(description),
								A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil),
								A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil),
								A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil),
								A2($author$project$Cardano$Data$Constr, $dwayne$elm_natural$Natural$one, _List_Nil)
							])),
						$author$project$Cardano$Data$Int($dwayne$elm_integer$Integer$zero),
						$author$project$Main$addressToData(wallet.changeAddress)
					]));
			var metadata = $author$project$Cardano$TxIntent$TxMetadata(
				{
					metadata: $author$project$Cardano$Metadatum$Bytes(
						$author$project$Bytes$Comparable$fromText('Start Metadata')),
					tag: $dwayne$elm_natural$Natural$zero
				});
			return function (x) {
				var _v1 = A2($elm$core$Debug$log, 'txIntents ', x);
				return A3(
					$author$project$Cardano$TxIntent$finalize,
					$author$project$Main$localStateUtxos(wallet.utxos),
					_List_fromArray(
						[metadata]),
					x);
			}(
				_List_fromArray(
					[
						$author$project$Cardano$TxIntent$Spend(
						$author$project$Cardano$TxIntent$FromWallet(
							{address: wallet.changeAddress, guaranteedUtxos: _List_Nil, value: $author$project$Main$threeAda})),
						$author$project$Cardano$TxIntent$SendToOutput(
						{
							address: metadataScriptAddress,
							amount: $author$project$Main$threeAda,
							datumOption: $elm$core$Maybe$Just(
								$author$project$Cardano$Utxo$datumValueFromData(metadataDatum)),
							referenceScript: $elm$core$Maybe$Nothing
						})
					]));
		} else {
			return $elm$core$Result$Err(
				$author$project$Cardano$TxIntent$FailurePleaseReportToElmCardano('missing address'));
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		var _v0 = _Utils_Tuple2(msg, model);
		_v0$7:
		while (true) {
			switch (_v0.a.$) {
				case 'WalletMsg':
					var value = _v0.a.a;
					var _v1 = _Utils_Tuple2(
						A2($elm$json$Json$Decode$decodeValue, $author$project$Cardano$Cip30$responseDecoder, value),
						model);
					_v1$10:
					while (true) {
						if (_v1.a.$ === 'Ok') {
							switch (_v1.a.a.$) {
								case 'AvailableWallets':
									if (_v1.b.$ === 'Startup') {
										var wallets = _v1.a.a.a;
										var _v2 = _v1.b;
										return _Utils_Tuple2(
											$author$project$Main$WalletDiscovered(wallets),
											$author$project$Main$NoEffect);
									} else {
										break _v1$10;
									}
								case 'EnabledWallet':
									if (_v1.b.$ === 'WalletDiscovered') {
										var wallet = _v1.a.a.a;
										return _Utils_Tuple2(
											$author$project$Main$WalletLoading(
												{utxos: _List_Nil, wallet: wallet}),
											$author$project$Main$GetWalletUtxos(wallet));
									} else {
										break _v1$10;
									}
								case 'ApiResponse':
									switch (_v1.b.$) {
										case 'WalletLoading':
											switch (_v1.a.a.b.$) {
												case 'WalletUtxos':
													var _v3 = _v1.a.a;
													var walletId = _v3.a.walletId;
													var utxos = _v3.b.a;
													var wallet = _v1.b.a.wallet;
													return _Utils_Tuple2(
														$author$project$Main$WalletLoading(
															{utxos: utxos, wallet: wallet}),
														$author$project$Main$GetChangeAddress(wallet));
												case 'ChangeAddress':
													var _v4 = _v1.a.a;
													var walletId = _v4.a.walletId;
													var address = _v4.b.a;
													var wallet = _v1.b.a.wallet;
													var utxos = _v1.b.a.utxos;
													return _Utils_Tuple2(
														$author$project$Main$WalletWithChangeAddress(
															{changeAddress: address, utxos: utxos, wallet: wallet}),
														$author$project$Main$GetRewardAddress(wallet));
												default:
													break _v1$10;
											}
										case 'WalletWithChangeAddress':
											if (_v1.a.a.b.$ === 'RewardAddresses') {
												var _v5 = _v1.a.a;
												var walletId = _v5.a.walletId;
												var rewardAddresses = _v5.b.a;
												var previousWallet = _v1.b.a;
												return _Utils_Tuple2(
													$author$project$Main$GettingProtocalParameters(
														{changeAddress: previousWallet.changeAddress, rewardAddresses: rewardAddresses, utxos: previousWallet.utxos, wallet: previousWallet.wallet}),
													$author$project$Main$GetProtocalParameters);
											} else {
												break _v1$10;
											}
										case 'StartingMetadataScript':
											switch (_v1.a.a.b.$) {
												case 'SignedTx':
													var _v6 = _v1.a.a;
													var vkeywitnesses = _v6.b.a;
													var _v7 = _v1.b;
													var cleanTx = _v7.a;
													var wallet = _v7.b;
													var signedTx = A2(
														$author$project$Cardano$Transaction$updateSignatures,
														A2(
															$elm$core$Basics$composeL,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Maybe$Just,
																$elm$core$List$append(vkeywitnesses)),
															$elm$core$Maybe$withDefault(_List_Nil)),
														cleanTx);
													return _Utils_Tuple2(
														A2($author$project$Main$StartingMetadataScript, signedTx, wallet),
														A2($author$project$Main$SubmitStartMetadataScriptForSubmission, signedTx, wallet));
												case 'SubmittedTx':
													var _v8 = _v1.a.a;
													var walletId = _v8.a.walletId;
													var txId = _v8.b.a;
													var _v9 = _v1.b;
													var signedTx = _v9.a;
													var wallet = _v9.b;
													return _Utils_Tuple2(
														$author$project$Main$WaitingForInput(wallet),
														$author$project$Main$NoEffect);
												default:
													break _v1$10;
											}
										case 'ClosingMetadataScript':
											switch (_v1.a.a.b.$) {
												case 'SignedTx':
													var _v10 = _v1.a.a;
													var vkeywitnesses = _v10.b.a;
													var _v11 = _v1.b;
													var cleanTx = _v11.a;
													var wallet = _v11.b;
													var signedTx = A2(
														$author$project$Cardano$Transaction$updateSignatures,
														A2(
															$elm$core$Basics$composeL,
															A2(
																$elm$core$Basics$composeL,
																$elm$core$Maybe$Just,
																$elm$core$List$append(vkeywitnesses)),
															$elm$core$Maybe$withDefault(_List_Nil)),
														cleanTx);
													return _Utils_Tuple2(
														A2($author$project$Main$ClosingMetadataScript, signedTx, wallet),
														A2($author$project$Main$SubmitCloseMetadataScriptForSubmission, signedTx, wallet));
												case 'SubmittedTx':
													var _v12 = _v1.a.a;
													var walletId = _v12.a.walletId;
													var txId = _v12.b.a;
													var _v13 = _v1.b;
													var signedTx = _v13.a;
													var wallet = _v13.b;
													return _Utils_Tuple2(
														$author$project$Main$WaitingForInput(wallet),
														$author$project$Main$NoEffect);
												default:
													break _v1$10;
											}
										default:
											break _v1$10;
									}
								case 'ApiError':
									var code = _v1.a.a.a.code;
									var info = _v1.a.a.a.info;
									var _v14 = A2($elm$core$Debug$log, 'Cip30 APi error ', info);
									return _Utils_Tuple2(model, $author$project$Main$NoEffect);
								default:
									break _v1$10;
							}
						} else {
							break _v1$10;
						}
					}
					return _Utils_Tuple2(model, $author$project$Main$NoEffect);
				case 'GotReferenceUtxos':
					if (_v0.b.$ === 'GettingReferenceUtxos') {
						var result = _v0.a.a;
						var previousWallet = _v0.b.a;
						if (result.$ === 'Ok') {
							var maestroResponses = result.a;
							return _Utils_Tuple2(
								$author$project$Main$WaitingForInput(
									{
										changeAddress: previousWallet.changeAddress,
										protocolParameters: previousWallet.protocolParameters,
										referenceUtxos: $author$project$Main$convertReferenceScriptResponseIntoListOfUTxOReferenceOutputPairs(maestroResponses),
										rewardAddresses: previousWallet.rewardAddresses,
										utxos: previousWallet.utxos,
										wallet: previousWallet.wallet
									}),
								$author$project$Main$NoEffect);
						} else {
							var err = result.a;
							return _Utils_Tuple2(model, $author$project$Main$NoEffect);
						}
					} else {
						break _v0$7;
					}
				case 'ConnectButtonClicked':
					if (_v0.b.$ === 'WalletDiscovered') {
						var id = _v0.a.a.id;
						var descriptors = _v0.b.a;
						return _Utils_Tuple2(
							model,
							$author$project$Main$EnableWallet(id));
					} else {
						break _v0$7;
					}
				case 'StartMetadataScript':
					if (_v0.b.$ === 'WaitingForInput') {
						var _v16 = _v0.a;
						var wallet = _v0.b.a;
						var tx = A3(
							$author$project$Main$startMetadata,
							wallet,
							$author$project$Bytes$Comparable$fromText('hello'),
							$author$project$Bytes$Comparable$fromText('hello description'));
						if (tx.$ === 'Ok') {
							var validTx = tx.a;
							return _Utils_Tuple2(
								A2($author$project$Main$StartingMetadataScript, validTx.tx, wallet),
								A2($author$project$Main$SubmitStartMetadataScriptForSignature, validTx.tx, wallet));
						} else {
							var err = tx.a;
							return _Utils_Tuple2(model, $author$project$Main$NoEffect);
						}
					} else {
						break _v0$7;
					}
				case 'CloseMetadata':
					if (_v0.b.$ === 'WaitingForInput') {
						var _v18 = _v0.a;
						var wallet = _v0.b.a;
						var _v19 = $author$project$Main$metadataScriptResult($author$project$Main$metadataScriptString);
						if (_v19.$ === 'Ok') {
							var metadataScript = _v19.a;
							var metadataScriptHash = $author$project$Cardano$Script$hash(metadataScript);
							var metadataScriptAddress = A2($author$project$Cardano$Address$script, $author$project$Cardano$Address$Testnet, metadataScriptHash);
							return _Utils_Tuple2(
								model,
								A2($author$project$Main$SubmitCloseMetadataTransaction, wallet, metadataScriptAddress));
						} else {
							var err = _v19.a;
							return _Utils_Tuple2(model, $author$project$Main$NoEffect);
						}
					} else {
						break _v0$7;
					}
				case 'GotProtocolParameters':
					if (_v0.b.$ === 'GettingProtocalParameters') {
						var result = _v0.a.a;
						var previousWallet = _v0.b.a;
						if (result.$ === 'Ok') {
							var protocolParameters = result.a;
							return _Utils_Tuple2(
								$author$project$Main$GettingReferenceUtxos(
									{changeAddress: previousWallet.changeAddress, protocolParameters: protocolParameters, rewardAddresses: previousWallet.rewardAddresses, utxos: previousWallet.utxos, wallet: previousWallet.wallet}),
								$author$project$Main$GetReferenceUtxos);
						} else {
							var err = result.a;
							return _Utils_Tuple2(model, $author$project$Main$NoEffect);
						}
					} else {
						break _v0$7;
					}
				default:
					if (_v0.b.$ === 'WaitingForInput') {
						var x = _v0.a.a;
						var wallet = _v0.b.a;
						var _v21 = A2($elm$core$Debug$log, 'in RecieveCloseMetadata ', x);
						if ((x.$ === 'Ok') && (x.a.$ === 'Ok')) {
							var validTx = x.a.a;
							return _Utils_Tuple2(
								A2($author$project$Main$ClosingMetadataScript, validTx.tx, wallet),
								A2($author$project$Main$SubmitCloseMetadataScriptTransactionForSignature, validTx.tx, wallet));
						} else {
							return _Utils_Tuple2(model, $author$project$Main$NoEffect);
						}
					} else {
						break _v0$7;
					}
			}
		}
		return _Utils_Tuple2(model, $author$project$Main$NoEffect);
	});
var $author$project$Main$CloseMetadata = {$: 'CloseMetadata'};
var $author$project$Main$StartMetadataScript = {$: 'StartMetadataScript'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Main$ConnectButtonClicked = function (a) {
	return {$: 'ConnectButtonClicked', a: a};
};
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $author$project$Main$viewAvailableWallets = function (wallets) {
	var walletIcon = function (_v1) {
		var icon = _v1.icon;
		return A2(
			$elm$html$Html$img,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$src(icon),
					$elm$html$Html$Attributes$height(32)
				]),
			_List_Nil);
	};
	var walletDescription = function (w) {
		return 'id: ' + (w.id + (', name: ' + w.name));
	};
	var connectButton = function (_v0) {
		var id = _v0.id;
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick(
					$author$project$Main$ConnectButtonClicked(
						{id: id}))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('connect')
				]));
	};
	var walletRow = function (w) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					walletIcon(w),
					$elm$html$Html$text(
					walletDescription(w)),
					connectButton(w)
				]));
	};
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$map, walletRow, wallets));
};
var $author$project$Cardano$Cip30$walletDescriptor = function (_v0) {
	var descriptor = _v0.a.descriptor;
	return descriptor;
};
var $author$project$Main$view = function (model) {
	switch (model.$) {
		case 'Startup':
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Hello Cardano!')
							]))
					]));
		case 'WalletDiscovered':
			var availableWallets = model.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Hello Cardano!')
							])),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('CIP-30 wallets detected:')
							])),
						$author$project$Main$viewAvailableWallets(availableWallets)
					]));
		case 'WalletLoading':
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading wallet assets ...')
					]));
		case 'WaitingForInput':
			var wallet = model.a.wallet;
			var utxos = model.a.utxos;
			var changeAddress = model.a.changeAddress;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								'Wallet: ' + $author$project$Cardano$Cip30$walletDescriptor(wallet).name)
							])),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								'Address: ' + $author$project$Bytes$Comparable$toHex(
									$author$project$Cardano$Address$toBytes(changeAddress)))
							])),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								'UTxO count: ' + $elm$core$String$fromInt(
									$elm$core$List$length(utxos)))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$StartMetadataScript)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('start utxo at script')
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$CloseMetadata)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('close utxo at script')
							]))
					]));
		default:
			return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	}
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{
		init: function (flagsJson) {
			return A2(
				$elm$core$Tuple$mapSecond,
				$author$project$Main$perform,
				$author$project$Main$init(flagsJson));
		},
		subscriptions: function (_v0) {
			return $author$project$Main$fromWallet($author$project$Main$WalletMsg);
		},
		update: F2(
			function (msg, model) {
				return A2(
					$elm$core$Tuple$mapSecond,
					$author$project$Main$perform,
					A2($author$project$Main$update, msg, model));
			}),
		view: $author$project$Main$view
	});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));